(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/async-mutex/index.mjs
  var E_TIMEOUT, E_ALREADY_LOCKED, E_CANCELED, __awaiter$2, Semaphore, __awaiter$1, Mutex;
  var init_async_mutex = __esm({
    "node_modules/async-mutex/index.mjs"() {
      E_TIMEOUT = new Error("timeout while waiting for mutex to become available");
      E_ALREADY_LOCKED = new Error("mutex already locked");
      E_CANCELED = new Error("request for lock canceled");
      __awaiter$2 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Semaphore = class {
        constructor(_value, _cancelError = E_CANCELED) {
          this._value = _value;
          this._cancelError = _cancelError;
          this._weightedQueues = [];
          this._weightedWaiters = [];
        }
        acquire(weight = 1) {
          if (weight <= 0)
            throw new Error(`invalid weight ${weight}: must be positive`);
          return new Promise((resolve, reject) => {
            if (!this._weightedQueues[weight - 1])
              this._weightedQueues[weight - 1] = [];
            this._weightedQueues[weight - 1].push({ resolve, reject });
            this._dispatch();
          });
        }
        runExclusive(callback, weight = 1) {
          return __awaiter$2(this, void 0, void 0, function* () {
            const [value, release] = yield this.acquire(weight);
            try {
              return yield callback(value);
            } finally {
              release();
            }
          });
        }
        waitForUnlock(weight = 1) {
          if (weight <= 0)
            throw new Error(`invalid weight ${weight}: must be positive`);
          return new Promise((resolve) => {
            if (!this._weightedWaiters[weight - 1])
              this._weightedWaiters[weight - 1] = [];
            this._weightedWaiters[weight - 1].push(resolve);
            this._dispatch();
          });
        }
        isLocked() {
          return this._value <= 0;
        }
        getValue() {
          return this._value;
        }
        setValue(value) {
          this._value = value;
          this._dispatch();
        }
        release(weight = 1) {
          if (weight <= 0)
            throw new Error(`invalid weight ${weight}: must be positive`);
          this._value += weight;
          this._dispatch();
        }
        cancel() {
          this._weightedQueues.forEach((queue) => queue.forEach((entry) => entry.reject(this._cancelError)));
          this._weightedQueues = [];
        }
        _dispatch() {
          var _a;
          for (let weight = this._value; weight > 0; weight--) {
            const queueEntry = (_a = this._weightedQueues[weight - 1]) === null || _a === void 0 ? void 0 : _a.shift();
            if (!queueEntry)
              continue;
            const previousValue = this._value;
            const previousWeight = weight;
            this._value -= weight;
            weight = this._value + 1;
            queueEntry.resolve([previousValue, this._newReleaser(previousWeight)]);
          }
          this._drainUnlockWaiters();
        }
        _newReleaser(weight) {
          let called = false;
          return () => {
            if (called)
              return;
            called = true;
            this.release(weight);
          };
        }
        _drainUnlockWaiters() {
          for (let weight = this._value; weight > 0; weight--) {
            if (!this._weightedWaiters[weight - 1])
              continue;
            this._weightedWaiters[weight - 1].forEach((waiter) => waiter());
            this._weightedWaiters[weight - 1] = [];
          }
        }
      };
      __awaiter$1 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      Mutex = class {
        constructor(cancelError) {
          this._semaphore = new Semaphore(1, cancelError);
        }
        acquire() {
          return __awaiter$1(this, void 0, void 0, function* () {
            const [, releaser] = yield this._semaphore.acquire();
            return releaser;
          });
        }
        runExclusive(callback) {
          return this._semaphore.runExclusive(() => callback());
        }
        isLocked() {
          return this._semaphore.isLocked();
        }
        waitForUnlock() {
          return this._semaphore.waitForUnlock();
        }
        release() {
          if (this._semaphore.isLocked())
            this._semaphore.release();
        }
        cancel() {
          return this._semaphore.cancel();
        }
      };
    }
  });

  // node_modules/d3-array/src/index.js
  var init_src = __esm({
    "node_modules/d3-array/src/index.js"() {
    }
  });

  // node_modules/d3-axis/src/index.js
  var init_src2 = __esm({
    "node_modules/d3-axis/src/index.js"() {
    }
  });

  // node_modules/d3-dispatch/src/dispatch.js
  function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
        throw new Error("illegal type: " + t);
      _[t] = [];
    }
    return new Dispatch(_);
  }
  function Dispatch(_) {
    this._ = _;
  }
  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name = "", i = t.indexOf(".");
      if (i >= 0)
        name = t.slice(i + 1), t = t.slice(0, i);
      if (t && !types.hasOwnProperty(t))
        throw new Error("unknown type: " + t);
      return { type: t, name };
    });
  }
  function get(type2, name) {
    for (var i = 0, n = type2.length, c2; i < n; ++i) {
      if ((c2 = type2[i]).name === name) {
        return c2.value;
      }
    }
  }
  function set(type2, name, callback) {
    for (var i = 0, n = type2.length; i < n; ++i) {
      if (type2[i].name === name) {
        type2[i] = noop, type2 = type2.slice(0, i).concat(type2.slice(i + 1));
        break;
      }
    }
    if (callback != null)
      type2.push({ name, value: callback });
    return type2;
  }
  var noop, dispatch_default;
  var init_dispatch = __esm({
    "node_modules/d3-dispatch/src/dispatch.js"() {
      noop = { value: () => {
      } };
      Dispatch.prototype = dispatch.prototype = {
        constructor: Dispatch,
        on: function(typename, callback) {
          var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
          if (arguments.length < 2) {
            while (++i < n)
              if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name)))
                return t;
            return;
          }
          if (callback != null && typeof callback !== "function")
            throw new Error("invalid callback: " + callback);
          while (++i < n) {
            if (t = (typename = T[i]).type)
              _[t] = set(_[t], typename.name, callback);
            else if (callback == null)
              for (t in _)
                _[t] = set(_[t], typename.name, null);
          }
          return this;
        },
        copy: function() {
          var copy = {}, _ = this._;
          for (var t in _)
            copy[t] = _[t].slice();
          return new Dispatch(copy);
        },
        call: function(type2, that) {
          if ((n = arguments.length - 2) > 0)
            for (var args = new Array(n), i = 0, n, t; i < n; ++i)
              args[i] = arguments[i + 2];
          if (!this._.hasOwnProperty(type2))
            throw new Error("unknown type: " + type2);
          for (t = this._[type2], i = 0, n = t.length; i < n; ++i)
            t[i].value.apply(that, args);
        },
        apply: function(type2, that, args) {
          if (!this._.hasOwnProperty(type2))
            throw new Error("unknown type: " + type2);
          for (var t = this._[type2], i = 0, n = t.length; i < n; ++i)
            t[i].value.apply(that, args);
        }
      };
      dispatch_default = dispatch;
    }
  });

  // node_modules/d3-dispatch/src/index.js
  var init_src3 = __esm({
    "node_modules/d3-dispatch/src/index.js"() {
      init_dispatch();
    }
  });

  // node_modules/d3-selection/src/namespaces.js
  var xhtml, namespaces_default;
  var init_namespaces = __esm({
    "node_modules/d3-selection/src/namespaces.js"() {
      xhtml = "http://www.w3.org/1999/xhtml";
      namespaces_default = {
        svg: "http://www.w3.org/2000/svg",
        xhtml,
        xlink: "http://www.w3.org/1999/xlink",
        xml: "http://www.w3.org/XML/1998/namespace",
        xmlns: "http://www.w3.org/2000/xmlns/"
      };
    }
  });

  // node_modules/d3-selection/src/namespace.js
  function namespace_default(name) {
    var prefix = name += "", i = prefix.indexOf(":");
    if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns")
      name = name.slice(i + 1);
    return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name } : name;
  }
  var init_namespace = __esm({
    "node_modules/d3-selection/src/namespace.js"() {
      init_namespaces();
    }
  });

  // node_modules/d3-selection/src/creator.js
  function creatorInherit(name) {
    return function() {
      var document2 = this.ownerDocument, uri = this.namespaceURI;
      return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
    };
  }
  function creatorFixed(fullname) {
    return function() {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }
  function creator_default(name) {
    var fullname = namespace_default(name);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
  }
  var init_creator = __esm({
    "node_modules/d3-selection/src/creator.js"() {
      init_namespace();
      init_namespaces();
    }
  });

  // node_modules/d3-selection/src/selector.js
  function none() {
  }
  function selector_default(selector) {
    return selector == null ? none : function() {
      return this.querySelector(selector);
    };
  }
  var init_selector = __esm({
    "node_modules/d3-selection/src/selector.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/select.js
  function select_default(select) {
    if (typeof select !== "function")
      select = selector_default(select);
    for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }
  var init_select = __esm({
    "node_modules/d3-selection/src/selection/select.js"() {
      init_selection();
      init_selector();
    }
  });

  // node_modules/d3-selection/src/array.js
  function array(x3) {
    return x3 == null ? [] : Array.isArray(x3) ? x3 : Array.from(x3);
  }
  var init_array = __esm({
    "node_modules/d3-selection/src/array.js"() {
    }
  });

  // node_modules/d3-selection/src/selectorAll.js
  function empty() {
    return [];
  }
  function selectorAll_default(selector) {
    return selector == null ? empty : function() {
      return this.querySelectorAll(selector);
    };
  }
  var init_selectorAll = __esm({
    "node_modules/d3-selection/src/selectorAll.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/selectAll.js
  function arrayAll(select) {
    return function() {
      return array(select.apply(this, arguments));
    };
  }
  function selectAll_default(select) {
    if (typeof select === "function")
      select = arrayAll(select);
    else
      select = selectorAll_default(select);
    for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          subgroups.push(select.call(node, node.__data__, i, group));
          parents.push(node);
        }
      }
    }
    return new Selection(subgroups, parents);
  }
  var init_selectAll = __esm({
    "node_modules/d3-selection/src/selection/selectAll.js"() {
      init_selection();
      init_array();
      init_selectorAll();
    }
  });

  // node_modules/d3-selection/src/matcher.js
  function matcher_default(selector) {
    return function() {
      return this.matches(selector);
    };
  }
  function childMatcher(selector) {
    return function(node) {
      return node.matches(selector);
    };
  }
  var init_matcher = __esm({
    "node_modules/d3-selection/src/matcher.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/selectChild.js
  function childFind(match) {
    return function() {
      return find.call(this.children, match);
    };
  }
  function childFirst() {
    return this.firstElementChild;
  }
  function selectChild_default(match) {
    return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
  }
  var find;
  var init_selectChild = __esm({
    "node_modules/d3-selection/src/selection/selectChild.js"() {
      init_matcher();
      find = Array.prototype.find;
    }
  });

  // node_modules/d3-selection/src/selection/selectChildren.js
  function children() {
    return Array.from(this.children);
  }
  function childrenFilter(match) {
    return function() {
      return filter.call(this.children, match);
    };
  }
  function selectChildren_default(match) {
    return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
  }
  var filter;
  var init_selectChildren = __esm({
    "node_modules/d3-selection/src/selection/selectChildren.js"() {
      init_matcher();
      filter = Array.prototype.filter;
    }
  });

  // node_modules/d3-selection/src/selection/filter.js
  function filter_default(match) {
    if (typeof match !== "function")
      match = matcher_default(match);
    for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
          subgroup.push(node);
        }
      }
    }
    return new Selection(subgroups, this._parents);
  }
  var init_filter = __esm({
    "node_modules/d3-selection/src/selection/filter.js"() {
      init_selection();
      init_matcher();
    }
  });

  // node_modules/d3-selection/src/selection/sparse.js
  function sparse_default(update) {
    return new Array(update.length);
  }
  var init_sparse = __esm({
    "node_modules/d3-selection/src/selection/sparse.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/enter.js
  function enter_default() {
    return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
  }
  function EnterNode(parent, datum2) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum2;
  }
  var init_enter = __esm({
    "node_modules/d3-selection/src/selection/enter.js"() {
      init_sparse();
      init_selection();
      EnterNode.prototype = {
        constructor: EnterNode,
        appendChild: function(child) {
          return this._parent.insertBefore(child, this._next);
        },
        insertBefore: function(child, next) {
          return this._parent.insertBefore(child, next);
        },
        querySelector: function(selector) {
          return this._parent.querySelector(selector);
        },
        querySelectorAll: function(selector) {
          return this._parent.querySelectorAll(selector);
        }
      };
    }
  });

  // node_modules/d3-selection/src/constant.js
  function constant_default(x3) {
    return function() {
      return x3;
    };
  }
  var init_constant = __esm({
    "node_modules/d3-selection/src/constant.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/data.js
  function bindIndex(parent, group, enter, update, exit, data) {
    var i = 0, node, groupLength = group.length, dataLength = data.length;
    for (; i < dataLength; ++i) {
      if (node = group[i]) {
        node.__data__ = data[i];
        update[i] = node;
      } else {
        enter[i] = new EnterNode(parent, data[i]);
      }
    }
    for (; i < groupLength; ++i) {
      if (node = group[i]) {
        exit[i] = node;
      }
    }
  }
  function bindKey(parent, group, enter, update, exit, data, key) {
    var i, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    for (i = 0; i < groupLength; ++i) {
      if (node = group[i]) {
        keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
        if (nodeByKeyValue.has(keyValue)) {
          exit[i] = node;
        } else {
          nodeByKeyValue.set(keyValue, node);
        }
      }
    }
    for (i = 0; i < dataLength; ++i) {
      keyValue = key.call(parent, data[i], i, data) + "";
      if (node = nodeByKeyValue.get(keyValue)) {
        update[i] = node;
        node.__data__ = data[i];
        nodeByKeyValue.delete(keyValue);
      } else {
        enter[i] = new EnterNode(parent, data[i]);
      }
    }
    for (i = 0; i < groupLength; ++i) {
      if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
        exit[i] = node;
      }
    }
  }
  function datum(node) {
    return node.__data__;
  }
  function data_default(value, key) {
    if (!arguments.length)
      return Array.from(this, datum);
    var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
    if (typeof value !== "function")
      value = constant_default(value);
    for (var m2 = groups.length, update = new Array(m2), enter = new Array(m2), exit = new Array(m2), j = 0; j < m2; ++j) {
      var parent = parents[j], group = groups[j], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
          if (i0 >= i1)
            i1 = i0 + 1;
          while (!(next = updateGroup[i1]) && ++i1 < dataLength)
            ;
          previous._next = next || null;
        }
      }
    }
    update = new Selection(update, parents);
    update._enter = enter;
    update._exit = exit;
    return update;
  }
  function arraylike(data) {
    return typeof data === "object" && "length" in data ? data : Array.from(data);
  }
  var init_data = __esm({
    "node_modules/d3-selection/src/selection/data.js"() {
      init_selection();
      init_enter();
      init_constant();
    }
  });

  // node_modules/d3-selection/src/selection/exit.js
  function exit_default() {
    return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
  }
  var init_exit = __esm({
    "node_modules/d3-selection/src/selection/exit.js"() {
      init_sparse();
      init_selection();
    }
  });

  // node_modules/d3-selection/src/selection/join.js
  function join_default(onenter, onupdate, onexit) {
    var enter = this.enter(), update = this, exit = this.exit();
    if (typeof onenter === "function") {
      enter = onenter(enter);
      if (enter)
        enter = enter.selection();
    } else {
      enter = enter.append(onenter + "");
    }
    if (onupdate != null) {
      update = onupdate(update);
      if (update)
        update = update.selection();
    }
    if (onexit == null)
      exit.remove();
    else
      onexit(exit);
    return enter && update ? enter.merge(update).order() : update;
  }
  var init_join = __esm({
    "node_modules/d3-selection/src/selection/join.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/merge.js
  function merge_default(context) {
    var selection2 = context.selection ? context.selection() : context;
    for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge[i] = node;
        }
      }
    }
    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }
    return new Selection(merges, this._parents);
  }
  var init_merge = __esm({
    "node_modules/d3-selection/src/selection/merge.js"() {
      init_selection();
    }
  });

  // node_modules/d3-selection/src/selection/order.js
  function order_default() {
    for (var groups = this._groups, j = -1, m2 = groups.length; ++j < m2; ) {
      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && node.compareDocumentPosition(next) ^ 4)
            next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  }
  var init_order = __esm({
    "node_modules/d3-selection/src/selection/order.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/sort.js
  function sort_default(compare) {
    if (!compare)
      compare = ascending;
    function compareNode(a2, b) {
      return a2 && b ? compare(a2.__data__, b.__data__) : !a2 - !b;
    }
    for (var groups = this._groups, m2 = groups.length, sortgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          sortgroup[i] = node;
        }
      }
      sortgroup.sort(compareNode);
    }
    return new Selection(sortgroups, this._parents).order();
  }
  function ascending(a2, b) {
    return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
  }
  var init_sort = __esm({
    "node_modules/d3-selection/src/selection/sort.js"() {
      init_selection();
    }
  });

  // node_modules/d3-selection/src/selection/call.js
  function call_default() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
  }
  var init_call = __esm({
    "node_modules/d3-selection/src/selection/call.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/nodes.js
  function nodes_default() {
    return Array.from(this);
  }
  var init_nodes = __esm({
    "node_modules/d3-selection/src/selection/nodes.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/node.js
  function node_default() {
    for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
        var node = group[i];
        if (node)
          return node;
      }
    }
    return null;
  }
  var init_node = __esm({
    "node_modules/d3-selection/src/selection/node.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/size.js
  function size_default() {
    let size = 0;
    for (const node of this)
      ++size;
    return size;
  }
  var init_size = __esm({
    "node_modules/d3-selection/src/selection/size.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/empty.js
  function empty_default() {
    return !this.node();
  }
  var init_empty = __esm({
    "node_modules/d3-selection/src/selection/empty.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/each.js
  function each_default(callback) {
    for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
        if (node = group[i])
          callback.call(node, node.__data__, i, group);
      }
    }
    return this;
  }
  var init_each = __esm({
    "node_modules/d3-selection/src/selection/each.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/attr.js
  function attrRemove(name) {
    return function() {
      this.removeAttribute(name);
    };
  }
  function attrRemoveNS(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant(name, value) {
    return function() {
      this.setAttribute(name, value);
    };
  }
  function attrConstantNS(fullname, value) {
    return function() {
      this.setAttributeNS(fullname.space, fullname.local, value);
    };
  }
  function attrFunction(name, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        this.removeAttribute(name);
      else
        this.setAttribute(name, v);
    };
  }
  function attrFunctionNS(fullname, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        this.removeAttributeNS(fullname.space, fullname.local);
      else
        this.setAttributeNS(fullname.space, fullname.local, v);
    };
  }
  function attr_default(name, value) {
    var fullname = namespace_default(name);
    if (arguments.length < 2) {
      var node = this.node();
      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
  }
  var init_attr = __esm({
    "node_modules/d3-selection/src/selection/attr.js"() {
      init_namespace();
    }
  });

  // node_modules/d3-selection/src/window.js
  function window_default(node) {
    return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
  }
  var init_window = __esm({
    "node_modules/d3-selection/src/window.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/style.js
  function styleRemove(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }
  function styleConstant(name, value, priority) {
    return function() {
      this.style.setProperty(name, value, priority);
    };
  }
  function styleFunction(name, value, priority) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        this.style.removeProperty(name);
      else
        this.style.setProperty(name, v, priority);
    };
  }
  function style_default(name, value, priority) {
    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
  }
  function styleValue(node, name) {
    return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
  }
  var init_style = __esm({
    "node_modules/d3-selection/src/selection/style.js"() {
      init_window();
    }
  });

  // node_modules/d3-selection/src/selection/property.js
  function propertyRemove(name) {
    return function() {
      delete this[name];
    };
  }
  function propertyConstant(name, value) {
    return function() {
      this[name] = value;
    };
  }
  function propertyFunction(name, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null)
        delete this[name];
      else
        this[name] = v;
    };
  }
  function property_default(name, value) {
    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
  }
  var init_property = __esm({
    "node_modules/d3-selection/src/selection/property.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/classed.js
  function classArray(string) {
    return string.trim().split(/^|\s+/);
  }
  function classList(node) {
    return node.classList || new ClassList(node);
  }
  function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
  }
  function classedAdd(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while (++i < n)
      list.add(names[i]);
  }
  function classedRemove(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while (++i < n)
      list.remove(names[i]);
  }
  function classedTrue(names) {
    return function() {
      classedAdd(this, names);
    };
  }
  function classedFalse(names) {
    return function() {
      classedRemove(this, names);
    };
  }
  function classedFunction(names, value) {
    return function() {
      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
  }
  function classed_default(name, value) {
    var names = classArray(name + "");
    if (arguments.length < 2) {
      var list = classList(this.node()), i = -1, n = names.length;
      while (++i < n)
        if (!list.contains(names[i]))
          return false;
      return true;
    }
    return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
  }
  var init_classed = __esm({
    "node_modules/d3-selection/src/selection/classed.js"() {
      ClassList.prototype = {
        add: function(name) {
          var i = this._names.indexOf(name);
          if (i < 0) {
            this._names.push(name);
            this._node.setAttribute("class", this._names.join(" "));
          }
        },
        remove: function(name) {
          var i = this._names.indexOf(name);
          if (i >= 0) {
            this._names.splice(i, 1);
            this._node.setAttribute("class", this._names.join(" "));
          }
        },
        contains: function(name) {
          return this._names.indexOf(name) >= 0;
        }
      };
    }
  });

  // node_modules/d3-selection/src/selection/text.js
  function textRemove() {
    this.textContent = "";
  }
  function textConstant(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    };
  }
  function text_default(value) {
    return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
  }
  var init_text = __esm({
    "node_modules/d3-selection/src/selection/text.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/html.js
  function htmlRemove() {
    this.innerHTML = "";
  }
  function htmlConstant(value) {
    return function() {
      this.innerHTML = value;
    };
  }
  function htmlFunction(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    };
  }
  function html_default(value) {
    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
  }
  var init_html = __esm({
    "node_modules/d3-selection/src/selection/html.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/raise.js
  function raise() {
    if (this.nextSibling)
      this.parentNode.appendChild(this);
  }
  function raise_default() {
    return this.each(raise);
  }
  var init_raise = __esm({
    "node_modules/d3-selection/src/selection/raise.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/lower.js
  function lower() {
    if (this.previousSibling)
      this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }
  function lower_default() {
    return this.each(lower);
  }
  var init_lower = __esm({
    "node_modules/d3-selection/src/selection/lower.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/append.js
  function append_default(name) {
    var create2 = typeof name === "function" ? name : creator_default(name);
    return this.select(function() {
      return this.appendChild(create2.apply(this, arguments));
    });
  }
  var init_append = __esm({
    "node_modules/d3-selection/src/selection/append.js"() {
      init_creator();
    }
  });

  // node_modules/d3-selection/src/selection/insert.js
  function constantNull() {
    return null;
  }
  function insert_default(name, before) {
    var create2 = typeof name === "function" ? name : creator_default(name), select = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
    return this.select(function() {
      return this.insertBefore(create2.apply(this, arguments), select.apply(this, arguments) || null);
    });
  }
  var init_insert = __esm({
    "node_modules/d3-selection/src/selection/insert.js"() {
      init_creator();
      init_selector();
    }
  });

  // node_modules/d3-selection/src/selection/remove.js
  function remove() {
    var parent = this.parentNode;
    if (parent)
      parent.removeChild(this);
  }
  function remove_default() {
    return this.each(remove);
  }
  var init_remove = __esm({
    "node_modules/d3-selection/src/selection/remove.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/clone.js
  function selection_cloneShallow() {
    var clone = this.cloneNode(false), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
  }
  function selection_cloneDeep() {
    var clone = this.cloneNode(true), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
  }
  function clone_default(deep) {
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
  }
  var init_clone = __esm({
    "node_modules/d3-selection/src/selection/clone.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/datum.js
  function datum_default(value) {
    return arguments.length ? this.property("__data__", value) : this.node().__data__;
  }
  var init_datum = __esm({
    "node_modules/d3-selection/src/selection/datum.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/on.js
  function contextListener(listener) {
    return function(event) {
      listener.call(this, event, this.__data__);
    };
  }
  function parseTypenames2(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name = "", i = t.indexOf(".");
      if (i >= 0)
        name = t.slice(i + 1), t = t.slice(0, i);
      return { type: t, name };
    });
  }
  function onRemove(typename) {
    return function() {
      var on = this.__on;
      if (!on)
        return;
      for (var j = 0, i = -1, m2 = on.length, o; j < m2; ++j) {
        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
        } else {
          on[++i] = o;
        }
      }
      if (++i)
        on.length = i;
      else
        delete this.__on;
    };
  }
  function onAdd(typename, value, options) {
    return function() {
      var on = this.__on, o, listener = contextListener(value);
      if (on)
        for (var j = 0, m2 = on.length; j < m2; ++j) {
          if ((o = on[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
            this.addEventListener(o.type, o.listener = listener, o.options = options);
            o.value = value;
            return;
          }
        }
      this.addEventListener(typename.type, listener, options);
      o = { type: typename.type, name: typename.name, value, listener, options };
      if (!on)
        this.__on = [o];
      else
        on.push(o);
    };
  }
  function on_default(typename, value, options) {
    var typenames = parseTypenames2(typename + ""), i, n = typenames.length, t;
    if (arguments.length < 2) {
      var on = this.node().__on;
      if (on)
        for (var j = 0, m2 = on.length, o; j < m2; ++j) {
          for (i = 0, o = on[j]; i < n; ++i) {
            if ((t = typenames[i]).type === o.type && t.name === o.name) {
              return o.value;
            }
          }
        }
      return;
    }
    on = value ? onAdd : onRemove;
    for (i = 0; i < n; ++i)
      this.each(on(typenames[i], value, options));
    return this;
  }
  var init_on = __esm({
    "node_modules/d3-selection/src/selection/on.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/dispatch.js
  function dispatchEvent(node, type2, params) {
    var window2 = window_default(node), event = window2.CustomEvent;
    if (typeof event === "function") {
      event = new event(type2, params);
    } else {
      event = window2.document.createEvent("Event");
      if (params)
        event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
      else
        event.initEvent(type2, false, false);
    }
    node.dispatchEvent(event);
  }
  function dispatchConstant(type2, params) {
    return function() {
      return dispatchEvent(this, type2, params);
    };
  }
  function dispatchFunction(type2, params) {
    return function() {
      return dispatchEvent(this, type2, params.apply(this, arguments));
    };
  }
  function dispatch_default2(type2, params) {
    return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
  }
  var init_dispatch2 = __esm({
    "node_modules/d3-selection/src/selection/dispatch.js"() {
      init_window();
    }
  });

  // node_modules/d3-selection/src/selection/iterator.js
  function* iterator_default() {
    for (var groups = this._groups, j = 0, m2 = groups.length; j < m2; ++j) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
        if (node = group[i])
          yield node;
      }
    }
  }
  var init_iterator = __esm({
    "node_modules/d3-selection/src/selection/iterator.js"() {
    }
  });

  // node_modules/d3-selection/src/selection/index.js
  function Selection(groups, parents) {
    this._groups = groups;
    this._parents = parents;
  }
  function selection() {
    return new Selection([[document.documentElement]], root);
  }
  function selection_selection() {
    return this;
  }
  var root, selection_default;
  var init_selection = __esm({
    "node_modules/d3-selection/src/selection/index.js"() {
      init_select();
      init_selectAll();
      init_selectChild();
      init_selectChildren();
      init_filter();
      init_data();
      init_enter();
      init_exit();
      init_join();
      init_merge();
      init_order();
      init_sort();
      init_call();
      init_nodes();
      init_node();
      init_size();
      init_empty();
      init_each();
      init_attr();
      init_style();
      init_property();
      init_classed();
      init_text();
      init_html();
      init_raise();
      init_lower();
      init_append();
      init_insert();
      init_remove();
      init_clone();
      init_datum();
      init_on();
      init_dispatch2();
      init_iterator();
      root = [null];
      Selection.prototype = selection.prototype = {
        constructor: Selection,
        select: select_default,
        selectAll: selectAll_default,
        selectChild: selectChild_default,
        selectChildren: selectChildren_default,
        filter: filter_default,
        data: data_default,
        enter: enter_default,
        exit: exit_default,
        join: join_default,
        merge: merge_default,
        selection: selection_selection,
        order: order_default,
        sort: sort_default,
        call: call_default,
        nodes: nodes_default,
        node: node_default,
        size: size_default,
        empty: empty_default,
        each: each_default,
        attr: attr_default,
        style: style_default,
        property: property_default,
        classed: classed_default,
        text: text_default,
        html: html_default,
        raise: raise_default,
        lower: lower_default,
        append: append_default,
        insert: insert_default,
        remove: remove_default,
        clone: clone_default,
        datum: datum_default,
        on: on_default,
        dispatch: dispatch_default2,
        [Symbol.iterator]: iterator_default
      };
      selection_default = selection;
    }
  });

  // node_modules/d3-selection/src/select.js
  function select_default2(selector) {
    return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
  }
  var init_select2 = __esm({
    "node_modules/d3-selection/src/select.js"() {
      init_selection();
    }
  });

  // node_modules/d3-selection/src/create.js
  function create_default(name) {
    return select_default2(creator_default(name).call(document.documentElement));
  }
  var init_create = __esm({
    "node_modules/d3-selection/src/create.js"() {
      init_creator();
      init_select2();
    }
  });

  // node_modules/d3-selection/src/sourceEvent.js
  function sourceEvent_default(event) {
    let sourceEvent;
    while (sourceEvent = event.sourceEvent)
      event = sourceEvent;
    return event;
  }
  var init_sourceEvent = __esm({
    "node_modules/d3-selection/src/sourceEvent.js"() {
    }
  });

  // node_modules/d3-selection/src/pointer.js
  function pointer_default(event, node) {
    event = sourceEvent_default(event);
    if (node === void 0)
      node = event.currentTarget;
    if (node) {
      var svg = node.ownerSVGElement || node;
      if (svg.createSVGPoint) {
        var point = svg.createSVGPoint();
        point.x = event.clientX, point.y = event.clientY;
        point = point.matrixTransform(node.getScreenCTM().inverse());
        return [point.x, point.y];
      }
      if (node.getBoundingClientRect) {
        var rect = node.getBoundingClientRect();
        return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
      }
    }
    return [event.pageX, event.pageY];
  }
  var init_pointer = __esm({
    "node_modules/d3-selection/src/pointer.js"() {
      init_sourceEvent();
    }
  });

  // node_modules/d3-selection/src/index.js
  var init_src4 = __esm({
    "node_modules/d3-selection/src/index.js"() {
      init_create();
      init_matcher();
      init_namespace();
      init_pointer();
      init_select2();
      init_selection();
      init_selector();
      init_selectorAll();
      init_style();
    }
  });

  // node_modules/d3-drag/src/noevent.js
  function nopropagation(event) {
    event.stopImmediatePropagation();
  }
  function noevent_default(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
  }
  var nonpassive, nonpassivecapture;
  var init_noevent = __esm({
    "node_modules/d3-drag/src/noevent.js"() {
      nonpassive = { passive: false };
      nonpassivecapture = { capture: true, passive: false };
    }
  });

  // node_modules/d3-drag/src/nodrag.js
  function nodrag_default(view) {
    var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", noevent_default, nonpassivecapture);
    if ("onselectstart" in root2) {
      selection2.on("selectstart.drag", noevent_default, nonpassivecapture);
    } else {
      root2.__noselect = root2.style.MozUserSelect;
      root2.style.MozUserSelect = "none";
    }
  }
  function yesdrag(view, noclick) {
    var root2 = view.document.documentElement, selection2 = select_default2(view).on("dragstart.drag", null);
    if (noclick) {
      selection2.on("click.drag", noevent_default, nonpassivecapture);
      setTimeout(function() {
        selection2.on("click.drag", null);
      }, 0);
    }
    if ("onselectstart" in root2) {
      selection2.on("selectstart.drag", null);
    } else {
      root2.style.MozUserSelect = root2.__noselect;
      delete root2.__noselect;
    }
  }
  var init_nodrag = __esm({
    "node_modules/d3-drag/src/nodrag.js"() {
      init_src4();
      init_noevent();
    }
  });

  // node_modules/d3-drag/src/constant.js
  var constant_default2;
  var init_constant2 = __esm({
    "node_modules/d3-drag/src/constant.js"() {
      constant_default2 = (x3) => () => x3;
    }
  });

  // node_modules/d3-drag/src/event.js
  function DragEvent(type2, {
    sourceEvent,
    subject,
    target,
    identifier,
    active,
    x: x3,
    y: y3,
    dx,
    dy,
    dispatch: dispatch2
  }) {
    Object.defineProperties(this, {
      type: { value: type2, enumerable: true, configurable: true },
      sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
      subject: { value: subject, enumerable: true, configurable: true },
      target: { value: target, enumerable: true, configurable: true },
      identifier: { value: identifier, enumerable: true, configurable: true },
      active: { value: active, enumerable: true, configurable: true },
      x: { value: x3, enumerable: true, configurable: true },
      y: { value: y3, enumerable: true, configurable: true },
      dx: { value: dx, enumerable: true, configurable: true },
      dy: { value: dy, enumerable: true, configurable: true },
      _: { value: dispatch2 }
    });
  }
  var init_event = __esm({
    "node_modules/d3-drag/src/event.js"() {
      DragEvent.prototype.on = function() {
        var value = this._.on.apply(this._, arguments);
        return value === this._ ? this : value;
      };
    }
  });

  // node_modules/d3-drag/src/drag.js
  function defaultFilter(event) {
    return !event.ctrlKey && !event.button;
  }
  function defaultContainer() {
    return this.parentNode;
  }
  function defaultSubject(event, d) {
    return d == null ? { x: event.x, y: event.y } : d;
  }
  function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function drag_default() {
    var filter2 = defaultFilter, container = defaultContainer, subject = defaultSubject, touchable = defaultTouchable, gestures = {}, listeners = dispatch_default("start", "drag", "end"), active = 0, mousedownx, mousedowny, mousemoving, touchending, clickDistance2 = 0;
    function drag(selection2) {
      selection2.on("mousedown.drag", mousedowned).filter(touchable).on("touchstart.drag", touchstarted).on("touchmove.drag", touchmoved, nonpassive).on("touchend.drag touchcancel.drag", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    function mousedowned(event, d) {
      if (touchending || !filter2.call(this, event, d))
        return;
      var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
      if (!gesture)
        return;
      select_default2(event.view).on("mousemove.drag", mousemoved, nonpassivecapture).on("mouseup.drag", mouseupped, nonpassivecapture);
      nodrag_default(event.view);
      nopropagation(event);
      mousemoving = false;
      mousedownx = event.clientX;
      mousedowny = event.clientY;
      gesture("start", event);
    }
    function mousemoved(event) {
      noevent_default(event);
      if (!mousemoving) {
        var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
        mousemoving = dx * dx + dy * dy > clickDistance2;
      }
      gestures.mouse("drag", event);
    }
    function mouseupped(event) {
      select_default2(event.view).on("mousemove.drag mouseup.drag", null);
      yesdrag(event.view, mousemoving);
      noevent_default(event);
      gestures.mouse("end", event);
    }
    function touchstarted(event, d) {
      if (!filter2.call(this, event, d))
        return;
      var touches = event.changedTouches, c2 = container.call(this, event, d), n = touches.length, i, gesture;
      for (i = 0; i < n; ++i) {
        if (gesture = beforestart(this, c2, event, d, touches[i].identifier, touches[i])) {
          nopropagation(event);
          gesture("start", event, touches[i]);
        }
      }
    }
    function touchmoved(event) {
      var touches = event.changedTouches, n = touches.length, i, gesture;
      for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
          noevent_default(event);
          gesture("drag", event, touches[i]);
        }
      }
    }
    function touchended(event) {
      var touches = event.changedTouches, n = touches.length, i, gesture;
      if (touchending)
        clearTimeout(touchending);
      touchending = setTimeout(function() {
        touchending = null;
      }, 500);
      for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
          nopropagation(event);
          gesture("end", event, touches[i]);
        }
      }
    }
    function beforestart(that, container2, event, d, identifier, touch) {
      var dispatch2 = listeners.copy(), p = pointer_default(touch || event, container2), dx, dy, s;
      if ((s = subject.call(that, new DragEvent("beforestart", {
        sourceEvent: event,
        target: drag,
        identifier,
        active,
        x: p[0],
        y: p[1],
        dx: 0,
        dy: 0,
        dispatch: dispatch2
      }), d)) == null)
        return;
      dx = s.x - p[0] || 0;
      dy = s.y - p[1] || 0;
      return function gesture(type2, event2, touch2) {
        var p0 = p, n;
        switch (type2) {
          case "start":
            gestures[identifier] = gesture, n = active++;
            break;
          case "end":
            delete gestures[identifier], --active;
          case "drag":
            p = pointer_default(touch2 || event2, container2), n = active;
            break;
        }
        dispatch2.call(
          type2,
          that,
          new DragEvent(type2, {
            sourceEvent: event2,
            subject: s,
            target: drag,
            identifier,
            active: n,
            x: p[0] + dx,
            y: p[1] + dy,
            dx: p[0] - p0[0],
            dy: p[1] - p0[1],
            dispatch: dispatch2
          }),
          d
        );
      };
    }
    drag.filter = function(_) {
      return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant_default2(!!_), drag) : filter2;
    };
    drag.container = function(_) {
      return arguments.length ? (container = typeof _ === "function" ? _ : constant_default2(_), drag) : container;
    };
    drag.subject = function(_) {
      return arguments.length ? (subject = typeof _ === "function" ? _ : constant_default2(_), drag) : subject;
    };
    drag.touchable = function(_) {
      return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default2(!!_), drag) : touchable;
    };
    drag.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? drag : value;
    };
    drag.clickDistance = function(_) {
      return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
    };
    return drag;
  }
  var init_drag = __esm({
    "node_modules/d3-drag/src/drag.js"() {
      init_src3();
      init_src4();
      init_nodrag();
      init_noevent();
      init_constant2();
      init_event();
    }
  });

  // node_modules/d3-drag/src/index.js
  var init_src5 = __esm({
    "node_modules/d3-drag/src/index.js"() {
      init_drag();
    }
  });

  // node_modules/d3-color/src/define.js
  function define_default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition)
      prototype[key] = definition[key];
    return prototype;
  }
  var init_define = __esm({
    "node_modules/d3-color/src/define.js"() {
    }
  });

  // node_modules/d3-color/src/color.js
  function Color() {
  }
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHex8() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(format2) {
    var m2, l;
    format2 = (format2 + "").trim().toLowerCase();
    return (m2 = reHex.exec(format2)) ? (l = m2[1].length, m2 = parseInt(m2[1], 16), l === 6 ? rgbn(m2) : l === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format2)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format2)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format2)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format2)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n) {
    return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
  }
  function rgba(r, g, b, a2) {
    if (a2 <= 0)
      r = g = b = NaN;
    return new Rgb(r, g, b, a2);
  }
  function rgbConvert(o) {
    if (!(o instanceof Color))
      o = color(o);
    if (!o)
      return new Rgb();
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
  }
  function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
  }
  function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
  }
  function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
  }
  function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb() {
    const a2 = clampa(this.opacity);
    return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
  }
  function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
  }
  function clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
  }
  function hex(value) {
    value = clampi(value);
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla(h, s, l, a2) {
    if (a2 <= 0)
      h = s = l = NaN;
    else if (l <= 0 || l >= 1)
      h = s = NaN;
    else if (s <= 0)
      h = NaN;
    return new Hsl(h, s, l, a2);
  }
  function hslConvert(o) {
    if (o instanceof Hsl)
      return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color))
      o = color(o);
    if (!o)
      return new Hsl();
    if (o instanceof Hsl)
      return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min2 = Math.min(r, g, b), max2 = Math.max(r, g, b), h = NaN, s = max2 - min2, l = (max2 + min2) / 2;
    if (s) {
      if (r === max2)
        h = (g - b) / s + (g < b) * 6;
      else if (g === max2)
        h = (b - r) / s + 2;
      else
        h = (r - g) / s + 4;
      s /= l < 0.5 ? max2 + min2 : 2 - max2 - min2;
      h *= 60;
    } else {
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new Hsl(h, s, l, o.opacity);
  }
  function hsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
  }
  function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }
  function clamph(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
  }
  function clampt(value) {
    return Math.max(0, Math.min(1, value || 0));
  }
  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
  }
  var darker, brighter, reI, reN, reP, reHex, reRgbInteger, reRgbPercent, reRgbaInteger, reRgbaPercent, reHslPercent, reHslaPercent, named;
  var init_color = __esm({
    "node_modules/d3-color/src/color.js"() {
      init_define();
      darker = 0.7;
      brighter = 1 / darker;
      reI = "\\s*([+-]?\\d+)\\s*";
      reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
      reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
      reHex = /^#([0-9a-f]{3,8})$/;
      reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
      reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
      reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
      reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
      reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
      reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
      named = {
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
      };
      define_default(Color, color, {
        copy(channels) {
          return Object.assign(new this.constructor(), this, channels);
        },
        displayable() {
          return this.rgb().displayable();
        },
        hex: color_formatHex,
        // Deprecated! Use color.formatHex.
        formatHex: color_formatHex,
        formatHex8: color_formatHex8,
        formatHsl: color_formatHsl,
        formatRgb: color_formatRgb,
        toString: color_formatRgb
      });
      define_default(Rgb, rgb, extend(Color, {
        brighter(k) {
          k = k == null ? brighter : Math.pow(brighter, k);
          return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
        },
        darker(k) {
          k = k == null ? darker : Math.pow(darker, k);
          return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
        },
        rgb() {
          return this;
        },
        clamp() {
          return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
        },
        displayable() {
          return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
        },
        hex: rgb_formatHex,
        // Deprecated! Use color.formatHex.
        formatHex: rgb_formatHex,
        formatHex8: rgb_formatHex8,
        formatRgb: rgb_formatRgb,
        toString: rgb_formatRgb
      }));
      define_default(Hsl, hsl, extend(Color, {
        brighter(k) {
          k = k == null ? brighter : Math.pow(brighter, k);
          return new Hsl(this.h, this.s, this.l * k, this.opacity);
        },
        darker(k) {
          k = k == null ? darker : Math.pow(darker, k);
          return new Hsl(this.h, this.s, this.l * k, this.opacity);
        },
        rgb() {
          var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
          return new Rgb(
            hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
            hsl2rgb(h, m1, m2),
            hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
            this.opacity
          );
        },
        clamp() {
          return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
        },
        displayable() {
          return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
        },
        formatHsl() {
          const a2 = clampa(this.opacity);
          return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
        }
      }));
    }
  });

  // node_modules/d3-color/src/index.js
  var init_src6 = __esm({
    "node_modules/d3-color/src/index.js"() {
      init_color();
    }
  });

  // node_modules/d3-interpolate/src/basis.js
  function basis(t12, v0, v1, v2, v3) {
    var t2 = t12 * t12, t3 = t2 * t12;
    return ((1 - 3 * t12 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t12 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
  }
  function basis_default(values) {
    var n = values.length - 1;
    return function(t) {
      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }
  var init_basis = __esm({
    "node_modules/d3-interpolate/src/basis.js"() {
    }
  });

  // node_modules/d3-interpolate/src/basisClosed.js
  function basisClosed_default(values) {
    var n = values.length;
    return function(t) {
      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }
  var init_basisClosed = __esm({
    "node_modules/d3-interpolate/src/basisClosed.js"() {
      init_basis();
    }
  });

  // node_modules/d3-interpolate/src/constant.js
  var constant_default3;
  var init_constant3 = __esm({
    "node_modules/d3-interpolate/src/constant.js"() {
      constant_default3 = (x3) => () => x3;
    }
  });

  // node_modules/d3-interpolate/src/color.js
  function linear(a2, d) {
    return function(t) {
      return a2 + t * d;
    };
  }
  function exponential(a2, b, y3) {
    return a2 = Math.pow(a2, y3), b = Math.pow(b, y3) - a2, y3 = 1 / y3, function(t) {
      return Math.pow(a2 + t * b, y3);
    };
  }
  function gamma(y3) {
    return (y3 = +y3) === 1 ? nogamma : function(a2, b) {
      return b - a2 ? exponential(a2, b, y3) : constant_default3(isNaN(a2) ? b : a2);
    };
  }
  function nogamma(a2, b) {
    var d = b - a2;
    return d ? linear(a2, d) : constant_default3(isNaN(a2) ? b : a2);
  }
  var init_color2 = __esm({
    "node_modules/d3-interpolate/src/color.js"() {
      init_constant3();
    }
  });

  // node_modules/d3-interpolate/src/rgb.js
  function rgbSpline(spline) {
    return function(colors) {
      var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
      for (i = 0; i < n; ++i) {
        color2 = rgb(colors[i]);
        r[i] = color2.r || 0;
        g[i] = color2.g || 0;
        b[i] = color2.b || 0;
      }
      r = spline(r);
      g = spline(g);
      b = spline(b);
      color2.opacity = 1;
      return function(t) {
        color2.r = r(t);
        color2.g = g(t);
        color2.b = b(t);
        return color2 + "";
      };
    };
  }
  var rgb_default, rgbBasis, rgbBasisClosed;
  var init_rgb = __esm({
    "node_modules/d3-interpolate/src/rgb.js"() {
      init_src6();
      init_basis();
      init_basisClosed();
      init_color2();
      rgb_default = function rgbGamma(y3) {
        var color2 = gamma(y3);
        function rgb2(start2, end) {
          var r = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
          return function(t) {
            start2.r = r(t);
            start2.g = g(t);
            start2.b = b(t);
            start2.opacity = opacity(t);
            return start2 + "";
          };
        }
        rgb2.gamma = rgbGamma;
        return rgb2;
      }(1);
      rgbBasis = rgbSpline(basis_default);
      rgbBasisClosed = rgbSpline(basisClosed_default);
    }
  });

  // node_modules/d3-interpolate/src/number.js
  function number_default(a2, b) {
    return a2 = +a2, b = +b, function(t) {
      return a2 * (1 - t) + b * t;
    };
  }
  var init_number = __esm({
    "node_modules/d3-interpolate/src/number.js"() {
    }
  });

  // node_modules/d3-interpolate/src/string.js
  function zero(b) {
    return function() {
      return b;
    };
  }
  function one(b) {
    return function(t) {
      return b(t) + "";
    };
  }
  function string_default(a2, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a2 = a2 + "", b = b + "";
    while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i])
          s[i] += bs;
        else
          s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i])
          s[i] += bm;
        else
          s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({ i, x: number_default(am, bm) });
      }
      bi = reB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
      for (var i2 = 0, o; i2 < b; ++i2)
        s[(o = q[i2]).i] = o.x(t);
      return s.join("");
    });
  }
  var reA, reB;
  var init_string = __esm({
    "node_modules/d3-interpolate/src/string.js"() {
      init_number();
      reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
      reB = new RegExp(reA.source, "g");
    }
  });

  // node_modules/d3-interpolate/src/transform/decompose.js
  function decompose_default(a2, b, c2, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a2 * a2 + b * b))
      a2 /= scaleX, b /= scaleX;
    if (skewX = a2 * c2 + b * d)
      c2 -= a2 * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c2 * c2 + d * d))
      c2 /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a2 * d < b * c2)
      a2 = -a2, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b, a2) * degrees,
      skewX: Math.atan(skewX) * degrees,
      scaleX,
      scaleY
    };
  }
  var degrees, identity;
  var init_decompose = __esm({
    "node_modules/d3-interpolate/src/transform/decompose.js"() {
      degrees = 180 / Math.PI;
      identity = {
        translateX: 0,
        translateY: 0,
        rotate: 0,
        skewX: 0,
        scaleX: 1,
        scaleY: 1
      };
    }
  });

  // node_modules/d3-interpolate/src/transform/parse.js
  function parseCss(value) {
    const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m2.isIdentity ? identity : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
  }
  function parseSvg(value) {
    if (value == null)
      return identity;
    if (!svgNode)
      svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate()))
      return identity;
    value = value.matrix;
    return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
  }
  var svgNode;
  var init_parse = __esm({
    "node_modules/d3-interpolate/src/transform/parse.js"() {
      init_decompose();
    }
  });

  // node_modules/d3-interpolate/src/transform/index.js
  function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s) {
      return s.length ? s.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push("translate(", null, pxComma, null, pxParen);
        q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
      } else if (xb || yb) {
        s.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }
    function rotate(a2, b, s, q) {
      if (a2 !== b) {
        if (a2 - b > 180)
          b += 360;
        else if (b - a2 > 180)
          a2 += 360;
        q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number_default(a2, b) });
      } else if (b) {
        s.push(pop(s) + "rotate(" + b + degParen);
      }
    }
    function skewX(a2, b, s, q) {
      if (a2 !== b) {
        q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number_default(a2, b) });
      } else if (b) {
        s.push(pop(s) + "skewX(" + b + degParen);
      }
    }
    function scale(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push(pop(s) + "scale(", null, ",", null, ")");
        q.push({ i: i - 4, x: number_default(xa, xb) }, { i: i - 2, x: number_default(ya, yb) });
      } else if (xb !== 1 || yb !== 1) {
        s.push(pop(s) + "scale(" + xb + "," + yb + ")");
      }
    }
    return function(a2, b) {
      var s = [], q = [];
      a2 = parse(a2), b = parse(b);
      translate(a2.translateX, a2.translateY, b.translateX, b.translateY, s, q);
      rotate(a2.rotate, b.rotate, s, q);
      skewX(a2.skewX, b.skewX, s, q);
      scale(a2.scaleX, a2.scaleY, b.scaleX, b.scaleY, s, q);
      a2 = b = null;
      return function(t) {
        var i = -1, n = q.length, o;
        while (++i < n)
          s[(o = q[i]).i] = o.x(t);
        return s.join("");
      };
    };
  }
  var interpolateTransformCss, interpolateTransformSvg;
  var init_transform = __esm({
    "node_modules/d3-interpolate/src/transform/index.js"() {
      init_number();
      init_parse();
      interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
      interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
    }
  });

  // node_modules/d3-interpolate/src/index.js
  var init_src7 = __esm({
    "node_modules/d3-interpolate/src/index.js"() {
      init_number();
      init_string();
      init_transform();
      init_rgb();
    }
  });

  // node_modules/d3-timer/src/timer.js
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }
  function clearNow() {
    clockNow = 0;
  }
  function Timer() {
    this._call = this._time = this._next = null;
  }
  function timer(callback, delay, time) {
    var t = new Timer();
    t.restart(callback, delay, time);
    return t;
  }
  function timerFlush() {
    now();
    ++frame;
    var t = taskHead, e;
    while (t) {
      if ((e = clockNow - t._time) >= 0)
        t._call.call(void 0, e);
      t = t._next;
    }
    --frame;
  }
  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }
  function poke() {
    var now2 = clock.now(), delay = now2 - clockLast;
    if (delay > pokeDelay)
      clockSkew -= delay, clockLast = now2;
  }
  function nap() {
    var t02, t12 = taskHead, t2, time = Infinity;
    while (t12) {
      if (t12._call) {
        if (time > t12._time)
          time = t12._time;
        t02 = t12, t12 = t12._next;
      } else {
        t2 = t12._next, t12._next = null;
        t12 = t02 ? t02._next = t2 : taskHead = t2;
      }
    }
    taskTail = t02;
    sleep(time);
  }
  function sleep(time) {
    if (frame)
      return;
    if (timeout)
      timeout = clearTimeout(timeout);
    var delay = time - clockNow;
    if (delay > 24) {
      if (time < Infinity)
        timeout = setTimeout(wake, time - clock.now() - clockSkew);
      if (interval)
        interval = clearInterval(interval);
    } else {
      if (!interval)
        clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }
  var frame, timeout, interval, pokeDelay, taskHead, taskTail, clockLast, clockNow, clockSkew, clock, setFrame;
  var init_timer = __esm({
    "node_modules/d3-timer/src/timer.js"() {
      frame = 0;
      timeout = 0;
      interval = 0;
      pokeDelay = 1e3;
      clockLast = 0;
      clockNow = 0;
      clockSkew = 0;
      clock = typeof performance === "object" && performance.now ? performance : Date;
      setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
        setTimeout(f, 17);
      };
      Timer.prototype = timer.prototype = {
        constructor: Timer,
        restart: function(callback, delay, time) {
          if (typeof callback !== "function")
            throw new TypeError("callback is not a function");
          time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
          if (!this._next && taskTail !== this) {
            if (taskTail)
              taskTail._next = this;
            else
              taskHead = this;
            taskTail = this;
          }
          this._call = callback;
          this._time = time;
          sleep();
        },
        stop: function() {
          if (this._call) {
            this._call = null;
            this._time = Infinity;
            sleep();
          }
        }
      };
    }
  });

  // node_modules/d3-timer/src/timeout.js
  function timeout_default(callback, delay, time) {
    var t = new Timer();
    delay = delay == null ? 0 : +delay;
    t.restart((elapsed) => {
      t.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t;
  }
  var init_timeout = __esm({
    "node_modules/d3-timer/src/timeout.js"() {
      init_timer();
    }
  });

  // node_modules/d3-timer/src/index.js
  var init_src8 = __esm({
    "node_modules/d3-timer/src/index.js"() {
      init_timer();
      init_timeout();
    }
  });

  // node_modules/d3-transition/src/transition/schedule.js
  function schedule_default(node, name, id2, index2, group, timing) {
    var schedules = node.__transition;
    if (!schedules)
      node.__transition = {};
    else if (id2 in schedules)
      return;
    create(node, id2, {
      name,
      index: index2,
      // For context during callback.
      group,
      // For context during callback.
      on: emptyOn,
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED
    });
  }
  function init(node, id2) {
    var schedule = get2(node, id2);
    if (schedule.state > CREATED)
      throw new Error("too late; already scheduled");
    return schedule;
  }
  function set2(node, id2) {
    var schedule = get2(node, id2);
    if (schedule.state > STARTED)
      throw new Error("too late; already running");
    return schedule;
  }
  function get2(node, id2) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id2]))
      throw new Error("transition not found");
    return schedule;
  }
  function create(node, id2, self) {
    var schedules = node.__transition, tween;
    schedules[id2] = self;
    self.timer = timer(schedule, 0, self.time);
    function schedule(elapsed) {
      self.state = SCHEDULED;
      self.timer.restart(start2, self.delay, self.time);
      if (self.delay <= elapsed)
        start2(elapsed - self.delay);
    }
    function start2(elapsed) {
      var i, j, n, o;
      if (self.state !== SCHEDULED)
        return stop();
      for (i in schedules) {
        o = schedules[i];
        if (o.name !== self.name)
          continue;
        if (o.state === STARTED)
          return timeout_default(start2);
        if (o.state === RUNNING) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("interrupt", node, node.__data__, o.index, o.group);
          delete schedules[i];
        } else if (+i < id2) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("cancel", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }
      }
      timeout_default(function() {
        if (self.state === STARTED) {
          self.state = RUNNING;
          self.timer.restart(tick, self.delay, self.time);
          tick(elapsed);
        }
      });
      self.state = STARTING;
      self.on.call("start", node, node.__data__, self.index, self.group);
      if (self.state !== STARTING)
        return;
      self.state = STARTED;
      tween = new Array(n = self.tween.length);
      for (i = 0, j = -1; i < n; ++i) {
        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
          tween[++j] = o;
        }
      }
      tween.length = j + 1;
    }
    function tick(elapsed) {
      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1), i = -1, n = tween.length;
      while (++i < n) {
        tween[i].call(node, t);
      }
      if (self.state === ENDING) {
        self.on.call("end", node, node.__data__, self.index, self.group);
        stop();
      }
    }
    function stop() {
      self.state = ENDED;
      self.timer.stop();
      delete schedules[id2];
      for (var i in schedules)
        return;
      delete node.__transition;
    }
  }
  var emptyOn, emptyTween, CREATED, SCHEDULED, STARTING, STARTED, RUNNING, ENDING, ENDED;
  var init_schedule = __esm({
    "node_modules/d3-transition/src/transition/schedule.js"() {
      init_src3();
      init_src8();
      emptyOn = dispatch_default("start", "end", "cancel", "interrupt");
      emptyTween = [];
      CREATED = 0;
      SCHEDULED = 1;
      STARTING = 2;
      STARTED = 3;
      RUNNING = 4;
      ENDING = 5;
      ENDED = 6;
    }
  });

  // node_modules/d3-transition/src/interrupt.js
  function interrupt_default(node, name) {
    var schedules = node.__transition, schedule, active, empty2 = true, i;
    if (!schedules)
      return;
    name = name == null ? null : name + "";
    for (i in schedules) {
      if ((schedule = schedules[i]).name !== name) {
        empty2 = false;
        continue;
      }
      active = schedule.state > STARTING && schedule.state < ENDING;
      schedule.state = ENDED;
      schedule.timer.stop();
      schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
      delete schedules[i];
    }
    if (empty2)
      delete node.__transition;
  }
  var init_interrupt = __esm({
    "node_modules/d3-transition/src/interrupt.js"() {
      init_schedule();
    }
  });

  // node_modules/d3-transition/src/selection/interrupt.js
  function interrupt_default2(name) {
    return this.each(function() {
      interrupt_default(this, name);
    });
  }
  var init_interrupt2 = __esm({
    "node_modules/d3-transition/src/selection/interrupt.js"() {
      init_interrupt();
    }
  });

  // node_modules/d3-transition/src/transition/tween.js
  function tweenRemove(id2, name) {
    var tween0, tween1;
    return function() {
      var schedule = set2(this, id2), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name) {
            tween1 = tween1.slice();
            tween1.splice(i, 1);
            break;
          }
        }
      }
      schedule.tween = tween1;
    };
  }
  function tweenFunction(id2, name, value) {
    var tween0, tween1;
    if (typeof value !== "function")
      throw new Error();
    return function() {
      var schedule = set2(this, id2), tween = schedule.tween;
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t = { name, value }, i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name) {
            tween1[i] = t;
            break;
          }
        }
        if (i === n)
          tween1.push(t);
      }
      schedule.tween = tween1;
    };
  }
  function tween_default(name, value) {
    var id2 = this._id;
    name += "";
    if (arguments.length < 2) {
      var tween = get2(this.node(), id2).tween;
      for (var i = 0, n = tween.length, t; i < n; ++i) {
        if ((t = tween[i]).name === name) {
          return t.value;
        }
      }
      return null;
    }
    return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
  }
  function tweenValue(transition2, name, value) {
    var id2 = transition2._id;
    transition2.each(function() {
      var schedule = set2(this, id2);
      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
    });
    return function(node) {
      return get2(node, id2).value[name];
    };
  }
  var init_tween = __esm({
    "node_modules/d3-transition/src/transition/tween.js"() {
      init_schedule();
    }
  });

  // node_modules/d3-transition/src/transition/interpolate.js
  function interpolate_default(a2, b) {
    var c2;
    return (typeof b === "number" ? number_default : b instanceof color ? rgb_default : (c2 = color(b)) ? (b = c2, rgb_default) : string_default)(a2, b);
  }
  var init_interpolate = __esm({
    "node_modules/d3-transition/src/transition/interpolate.js"() {
      init_src6();
      init_src7();
    }
  });

  // node_modules/d3-transition/src/transition/attr.js
  function attrRemove2(name) {
    return function() {
      this.removeAttribute(name);
    };
  }
  function attrRemoveNS2(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }
  function attrConstant2(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttribute(name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrConstantNS2(fullname, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = this.getAttributeNS(fullname.space, fullname.local);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function attrFunction2(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttribute(name);
      string0 = this.getAttribute(name);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attrFunctionNS2(fullname, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0, value1 = value(this), string1;
      if (value1 == null)
        return void this.removeAttributeNS(fullname.space, fullname.local);
      string0 = this.getAttributeNS(fullname.space, fullname.local);
      string1 = value1 + "";
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function attr_default2(name, value) {
    var fullname = namespace_default(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate_default;
    return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS2 : attrFunction2)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS2 : attrRemove2)(fullname) : (fullname.local ? attrConstantNS2 : attrConstant2)(fullname, i, value));
  }
  var init_attr2 = __esm({
    "node_modules/d3-transition/src/transition/attr.js"() {
      init_src7();
      init_src4();
      init_tween();
      init_interpolate();
    }
  });

  // node_modules/d3-transition/src/transition/attrTween.js
  function attrInterpolate(name, i) {
    return function(t) {
      this.setAttribute(name, i.call(this, t));
    };
  }
  function attrInterpolateNS(fullname, i) {
    return function(t) {
      this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
    };
  }
  function attrTweenNS(fullname, value) {
    var t02, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t02 = (i0 = i) && attrInterpolateNS(fullname, i);
      return t02;
    }
    tween._value = value;
    return tween;
  }
  function attrTween(name, value) {
    var t02, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t02 = (i0 = i) && attrInterpolate(name, i);
      return t02;
    }
    tween._value = value;
    return tween;
  }
  function attrTween_default(name, value) {
    var key = "attr." + name;
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    var fullname = namespace_default(name);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
  }
  var init_attrTween = __esm({
    "node_modules/d3-transition/src/transition/attrTween.js"() {
      init_src4();
    }
  });

  // node_modules/d3-transition/src/transition/delay.js
  function delayFunction(id2, value) {
    return function() {
      init(this, id2).delay = +value.apply(this, arguments);
    };
  }
  function delayConstant(id2, value) {
    return value = +value, function() {
      init(this, id2).delay = value;
    };
  }
  function delay_default(value) {
    var id2 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get2(this.node(), id2).delay;
  }
  var init_delay = __esm({
    "node_modules/d3-transition/src/transition/delay.js"() {
      init_schedule();
    }
  });

  // node_modules/d3-transition/src/transition/duration.js
  function durationFunction(id2, value) {
    return function() {
      set2(this, id2).duration = +value.apply(this, arguments);
    };
  }
  function durationConstant(id2, value) {
    return value = +value, function() {
      set2(this, id2).duration = value;
    };
  }
  function duration_default(value) {
    var id2 = this._id;
    return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get2(this.node(), id2).duration;
  }
  var init_duration = __esm({
    "node_modules/d3-transition/src/transition/duration.js"() {
      init_schedule();
    }
  });

  // node_modules/d3-transition/src/transition/ease.js
  function easeConstant(id2, value) {
    if (typeof value !== "function")
      throw new Error();
    return function() {
      set2(this, id2).ease = value;
    };
  }
  function ease_default(value) {
    var id2 = this._id;
    return arguments.length ? this.each(easeConstant(id2, value)) : get2(this.node(), id2).ease;
  }
  var init_ease = __esm({
    "node_modules/d3-transition/src/transition/ease.js"() {
      init_schedule();
    }
  });

  // node_modules/d3-transition/src/transition/easeVarying.js
  function easeVarying(id2, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (typeof v !== "function")
        throw new Error();
      set2(this, id2).ease = v;
    };
  }
  function easeVarying_default(value) {
    if (typeof value !== "function")
      throw new Error();
    return this.each(easeVarying(this._id, value));
  }
  var init_easeVarying = __esm({
    "node_modules/d3-transition/src/transition/easeVarying.js"() {
      init_schedule();
    }
  });

  // node_modules/d3-transition/src/transition/filter.js
  function filter_default2(match) {
    if (typeof match !== "function")
      match = matcher_default(match);
    for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
          subgroup.push(node);
        }
      }
    }
    return new Transition(subgroups, this._parents, this._name, this._id);
  }
  var init_filter2 = __esm({
    "node_modules/d3-transition/src/transition/filter.js"() {
      init_src4();
      init_transition2();
    }
  });

  // node_modules/d3-transition/src/transition/merge.js
  function merge_default2(transition2) {
    if (transition2._id !== this._id)
      throw new Error();
    for (var groups0 = this._groups, groups1 = transition2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m2; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge[i] = node;
        }
      }
    }
    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }
    return new Transition(merges, this._parents, this._name, this._id);
  }
  var init_merge2 = __esm({
    "node_modules/d3-transition/src/transition/merge.js"() {
      init_transition2();
    }
  });

  // node_modules/d3-transition/src/transition/on.js
  function start(name) {
    return (name + "").trim().split(/^|\s+/).every(function(t) {
      var i = t.indexOf(".");
      if (i >= 0)
        t = t.slice(0, i);
      return !t || t === "start";
    });
  }
  function onFunction(id2, name, listener) {
    var on0, on1, sit = start(name) ? init : set2;
    return function() {
      var schedule = sit(this, id2), on = schedule.on;
      if (on !== on0)
        (on1 = (on0 = on).copy()).on(name, listener);
      schedule.on = on1;
    };
  }
  function on_default2(name, listener) {
    var id2 = this._id;
    return arguments.length < 2 ? get2(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
  }
  var init_on2 = __esm({
    "node_modules/d3-transition/src/transition/on.js"() {
      init_schedule();
    }
  });

  // node_modules/d3-transition/src/transition/remove.js
  function removeFunction(id2) {
    return function() {
      var parent = this.parentNode;
      for (var i in this.__transition)
        if (+i !== id2)
          return;
      if (parent)
        parent.removeChild(this);
    };
  }
  function remove_default2() {
    return this.on("end.remove", removeFunction(this._id));
  }
  var init_remove2 = __esm({
    "node_modules/d3-transition/src/transition/remove.js"() {
    }
  });

  // node_modules/d3-transition/src/transition/select.js
  function select_default3(select) {
    var name = this._name, id2 = this._id;
    if (typeof select !== "function")
      select = selector_default(select);
    for (var groups = this._groups, m2 = groups.length, subgroups = new Array(m2), j = 0; j < m2; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
          if ("__data__" in node)
            subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
          schedule_default(subgroup[i], name, id2, i, subgroup, get2(node, id2));
        }
      }
    }
    return new Transition(subgroups, this._parents, name, id2);
  }
  var init_select3 = __esm({
    "node_modules/d3-transition/src/transition/select.js"() {
      init_src4();
      init_transition2();
      init_schedule();
    }
  });

  // node_modules/d3-transition/src/transition/selectAll.js
  function selectAll_default2(select) {
    var name = this._name, id2 = this._id;
    if (typeof select !== "function")
      select = selectorAll_default(select);
    for (var groups = this._groups, m2 = groups.length, subgroups = [], parents = [], j = 0; j < m2; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          for (var children2 = select.call(node, node.__data__, i, group), child, inherit2 = get2(node, id2), k = 0, l = children2.length; k < l; ++k) {
            if (child = children2[k]) {
              schedule_default(child, name, id2, k, children2, inherit2);
            }
          }
          subgroups.push(children2);
          parents.push(node);
        }
      }
    }
    return new Transition(subgroups, parents, name, id2);
  }
  var init_selectAll2 = __esm({
    "node_modules/d3-transition/src/transition/selectAll.js"() {
      init_src4();
      init_transition2();
      init_schedule();
    }
  });

  // node_modules/d3-transition/src/transition/selection.js
  function selection_default2() {
    return new Selection2(this._groups, this._parents);
  }
  var Selection2;
  var init_selection2 = __esm({
    "node_modules/d3-transition/src/transition/selection.js"() {
      init_src4();
      Selection2 = selection_default.prototype.constructor;
    }
  });

  // node_modules/d3-transition/src/transition/style.js
  function styleNull(name, interpolate) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
  }
  function styleRemove2(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }
  function styleConstant2(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
      var string0 = styleValue(this, name);
      return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
  }
  function styleFunction2(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
      var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
      if (value1 == null)
        string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
      return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
  }
  function styleMaybeRemove(id2, name) {
    var on0, on1, listener0, key = "style." + name, event = "end." + key, remove2;
    return function() {
      var schedule = set2(this, id2), on = schedule.on, listener = schedule.value[key] == null ? remove2 || (remove2 = styleRemove2(name)) : void 0;
      if (on !== on0 || listener0 !== listener)
        (on1 = (on0 = on).copy()).on(event, listener0 = listener);
      schedule.on = on1;
    };
  }
  function style_default2(name, value, priority) {
    var i = (name += "") === "transform" ? interpolateTransformCss : interpolate_default;
    return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove2(name)) : typeof value === "function" ? this.styleTween(name, styleFunction2(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant2(name, i, value), priority).on("end.style." + name, null);
  }
  var init_style2 = __esm({
    "node_modules/d3-transition/src/transition/style.js"() {
      init_src7();
      init_src4();
      init_schedule();
      init_tween();
      init_interpolate();
    }
  });

  // node_modules/d3-transition/src/transition/styleTween.js
  function styleInterpolate(name, i, priority) {
    return function(t) {
      this.style.setProperty(name, i.call(this, t), priority);
    };
  }
  function styleTween(name, value, priority) {
    var t, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t = (i0 = i) && styleInterpolate(name, i, priority);
      return t;
    }
    tween._value = value;
    return tween;
  }
  function styleTween_default(name, value, priority) {
    var key = "style." + (name += "");
    if (arguments.length < 2)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
  }
  var init_styleTween = __esm({
    "node_modules/d3-transition/src/transition/styleTween.js"() {
    }
  });

  // node_modules/d3-transition/src/transition/text.js
  function textConstant2(value) {
    return function() {
      this.textContent = value;
    };
  }
  function textFunction2(value) {
    return function() {
      var value1 = value(this);
      this.textContent = value1 == null ? "" : value1;
    };
  }
  function text_default2(value) {
    return this.tween("text", typeof value === "function" ? textFunction2(tweenValue(this, "text", value)) : textConstant2(value == null ? "" : value + ""));
  }
  var init_text2 = __esm({
    "node_modules/d3-transition/src/transition/text.js"() {
      init_tween();
    }
  });

  // node_modules/d3-transition/src/transition/textTween.js
  function textInterpolate(i) {
    return function(t) {
      this.textContent = i.call(this, t);
    };
  }
  function textTween(value) {
    var t02, i0;
    function tween() {
      var i = value.apply(this, arguments);
      if (i !== i0)
        t02 = (i0 = i) && textInterpolate(i);
      return t02;
    }
    tween._value = value;
    return tween;
  }
  function textTween_default(value) {
    var key = "text";
    if (arguments.length < 1)
      return (key = this.tween(key)) && key._value;
    if (value == null)
      return this.tween(key, null);
    if (typeof value !== "function")
      throw new Error();
    return this.tween(key, textTween(value));
  }
  var init_textTween = __esm({
    "node_modules/d3-transition/src/transition/textTween.js"() {
    }
  });

  // node_modules/d3-transition/src/transition/transition.js
  function transition_default() {
    var name = this._name, id0 = this._id, id1 = newId();
    for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          var inherit2 = get2(node, id0);
          schedule_default(node, name, id1, i, group, {
            time: inherit2.time + inherit2.delay + inherit2.duration,
            delay: 0,
            duration: inherit2.duration,
            ease: inherit2.ease
          });
        }
      }
    }
    return new Transition(groups, this._parents, name, id1);
  }
  var init_transition = __esm({
    "node_modules/d3-transition/src/transition/transition.js"() {
      init_transition2();
      init_schedule();
    }
  });

  // node_modules/d3-transition/src/transition/end.js
  function end_default() {
    var on0, on1, that = this, id2 = that._id, size = that.size();
    return new Promise(function(resolve, reject) {
      var cancel = { value: reject }, end = { value: function() {
        if (--size === 0)
          resolve();
      } };
      that.each(function() {
        var schedule = set2(this, id2), on = schedule.on;
        if (on !== on0) {
          on1 = (on0 = on).copy();
          on1._.cancel.push(cancel);
          on1._.interrupt.push(cancel);
          on1._.end.push(end);
        }
        schedule.on = on1;
      });
      if (size === 0)
        resolve();
    });
  }
  var init_end = __esm({
    "node_modules/d3-transition/src/transition/end.js"() {
      init_schedule();
    }
  });

  // node_modules/d3-transition/src/transition/index.js
  function Transition(groups, parents, name, id2) {
    this._groups = groups;
    this._parents = parents;
    this._name = name;
    this._id = id2;
  }
  function transition(name) {
    return selection_default().transition(name);
  }
  function newId() {
    return ++id;
  }
  var id, selection_prototype;
  var init_transition2 = __esm({
    "node_modules/d3-transition/src/transition/index.js"() {
      init_src4();
      init_attr2();
      init_attrTween();
      init_delay();
      init_duration();
      init_ease();
      init_easeVarying();
      init_filter2();
      init_merge2();
      init_on2();
      init_remove2();
      init_select3();
      init_selectAll2();
      init_selection2();
      init_style2();
      init_styleTween();
      init_text2();
      init_textTween();
      init_transition();
      init_tween();
      init_end();
      id = 0;
      selection_prototype = selection_default.prototype;
      Transition.prototype = transition.prototype = {
        constructor: Transition,
        select: select_default3,
        selectAll: selectAll_default2,
        selectChild: selection_prototype.selectChild,
        selectChildren: selection_prototype.selectChildren,
        filter: filter_default2,
        merge: merge_default2,
        selection: selection_default2,
        transition: transition_default,
        call: selection_prototype.call,
        nodes: selection_prototype.nodes,
        node: selection_prototype.node,
        size: selection_prototype.size,
        empty: selection_prototype.empty,
        each: selection_prototype.each,
        on: on_default2,
        attr: attr_default2,
        attrTween: attrTween_default,
        style: style_default2,
        styleTween: styleTween_default,
        text: text_default2,
        textTween: textTween_default,
        remove: remove_default2,
        tween: tween_default,
        delay: delay_default,
        duration: duration_default,
        ease: ease_default,
        easeVarying: easeVarying_default,
        end: end_default,
        [Symbol.iterator]: selection_prototype[Symbol.iterator]
      };
    }
  });

  // node_modules/d3-ease/src/linear.js
  var linear2;
  var init_linear = __esm({
    "node_modules/d3-ease/src/linear.js"() {
      linear2 = (t) => +t;
    }
  });

  // node_modules/d3-ease/src/cubic.js
  function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
  }
  var init_cubic = __esm({
    "node_modules/d3-ease/src/cubic.js"() {
    }
  });

  // node_modules/d3-ease/src/index.js
  var init_src9 = __esm({
    "node_modules/d3-ease/src/index.js"() {
      init_linear();
      init_cubic();
    }
  });

  // node_modules/d3-transition/src/selection/transition.js
  function inherit(node, id2) {
    var timing;
    while (!(timing = node.__transition) || !(timing = timing[id2])) {
      if (!(node = node.parentNode)) {
        throw new Error(`transition ${id2} not found`);
      }
    }
    return timing;
  }
  function transition_default2(name) {
    var id2, timing;
    if (name instanceof Transition) {
      id2 = name._id, name = name._name;
    } else {
      id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
    }
    for (var groups = this._groups, m2 = groups.length, j = 0; j < m2; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          schedule_default(node, name, id2, i, group, timing || inherit(node, id2));
        }
      }
    }
    return new Transition(groups, this._parents, name, id2);
  }
  var defaultTiming;
  var init_transition3 = __esm({
    "node_modules/d3-transition/src/selection/transition.js"() {
      init_transition2();
      init_schedule();
      init_src9();
      init_src8();
      defaultTiming = {
        time: null,
        // Set on use.
        delay: 0,
        duration: 250,
        ease: cubicInOut
      };
    }
  });

  // node_modules/d3-transition/src/selection/index.js
  var init_selection3 = __esm({
    "node_modules/d3-transition/src/selection/index.js"() {
      init_src4();
      init_interrupt2();
      init_transition3();
      selection_default.prototype.interrupt = interrupt_default2;
      selection_default.prototype.transition = transition_default2;
    }
  });

  // node_modules/d3-transition/src/index.js
  var init_src10 = __esm({
    "node_modules/d3-transition/src/index.js"() {
      init_selection3();
      init_transition2();
    }
  });

  // node_modules/d3-brush/src/constant.js
  var init_constant4 = __esm({
    "node_modules/d3-brush/src/constant.js"() {
    }
  });

  // node_modules/d3-brush/src/event.js
  var init_event2 = __esm({
    "node_modules/d3-brush/src/event.js"() {
    }
  });

  // node_modules/d3-brush/src/noevent.js
  var init_noevent2 = __esm({
    "node_modules/d3-brush/src/noevent.js"() {
    }
  });

  // node_modules/d3-brush/src/brush.js
  function number1(e) {
    return [+e[0], +e[1]];
  }
  function number2(e) {
    return [number1(e[0]), number1(e[1])];
  }
  function type(t) {
    return { type: t };
  }
  var abs, max, min, X, Y, XY;
  var init_brush = __esm({
    "node_modules/d3-brush/src/brush.js"() {
      init_src10();
      init_constant4();
      init_event2();
      init_noevent2();
      ({ abs, max, min } = Math);
      X = {
        name: "x",
        handles: ["w", "e"].map(type),
        input: function(x3, e) {
          return x3 == null ? null : [[+x3[0], e[0][1]], [+x3[1], e[1][1]]];
        },
        output: function(xy) {
          return xy && [xy[0][0], xy[1][0]];
        }
      };
      Y = {
        name: "y",
        handles: ["n", "s"].map(type),
        input: function(y3, e) {
          return y3 == null ? null : [[e[0][0], +y3[0]], [e[1][0], +y3[1]]];
        },
        output: function(xy) {
          return xy && [xy[0][1], xy[1][1]];
        }
      };
      XY = {
        name: "xy",
        handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
        input: function(xy) {
          return xy == null ? null : number2(xy);
        },
        output: function(xy) {
          return xy;
        }
      };
    }
  });

  // node_modules/d3-brush/src/index.js
  var init_src11 = __esm({
    "node_modules/d3-brush/src/index.js"() {
      init_brush();
    }
  });

  // node_modules/d3-path/src/index.js
  var init_src12 = __esm({
    "node_modules/d3-path/src/index.js"() {
    }
  });

  // node_modules/d3-chord/src/index.js
  var init_src13 = __esm({
    "node_modules/d3-chord/src/index.js"() {
    }
  });

  // node_modules/d3-contour/src/index.js
  var init_src14 = __esm({
    "node_modules/d3-contour/src/index.js"() {
    }
  });

  // node_modules/d3-delaunay/src/index.js
  var init_src15 = __esm({
    "node_modules/d3-delaunay/src/index.js"() {
    }
  });

  // node_modules/d3-dsv/src/index.js
  var init_src16 = __esm({
    "node_modules/d3-dsv/src/index.js"() {
    }
  });

  // node_modules/d3-fetch/src/index.js
  var init_src17 = __esm({
    "node_modules/d3-fetch/src/index.js"() {
    }
  });

  // node_modules/d3-quadtree/src/add.js
  function add_default(d) {
    const x3 = +this._x.call(null, d), y3 = +this._y.call(null, d);
    return add(this.cover(x3, y3), x3, y3, d);
  }
  function add(tree, x3, y3, d) {
    if (isNaN(x3) || isNaN(y3))
      return tree;
    var parent, node = tree._root, leaf = { data: d }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
    if (!node)
      return tree._root = leaf, tree;
    while (node.length) {
      if (right = x3 >= (xm = (x0 + x1) / 2))
        x0 = xm;
      else
        x1 = xm;
      if (bottom = y3 >= (ym = (y0 + y1) / 2))
        y0 = ym;
      else
        y1 = ym;
      if (parent = node, !(node = node[i = bottom << 1 | right]))
        return parent[i] = leaf, tree;
    }
    xp = +tree._x.call(null, node.data);
    yp = +tree._y.call(null, node.data);
    if (x3 === xp && y3 === yp)
      return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
    do {
      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
      if (right = x3 >= (xm = (x0 + x1) / 2))
        x0 = xm;
      else
        x1 = xm;
      if (bottom = y3 >= (ym = (y0 + y1) / 2))
        y0 = ym;
      else
        y1 = ym;
    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
    return parent[j] = node, parent[i] = leaf, tree;
  }
  function addAll(data) {
    var d, i, n = data.length, x3, y3, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
    for (i = 0; i < n; ++i) {
      if (isNaN(x3 = +this._x.call(null, d = data[i])) || isNaN(y3 = +this._y.call(null, d)))
        continue;
      xz[i] = x3;
      yz[i] = y3;
      if (x3 < x0)
        x0 = x3;
      if (x3 > x1)
        x1 = x3;
      if (y3 < y0)
        y0 = y3;
      if (y3 > y1)
        y1 = y3;
    }
    if (x0 > x1 || y0 > y1)
      return this;
    this.cover(x0, y0).cover(x1, y1);
    for (i = 0; i < n; ++i) {
      add(this, xz[i], yz[i], data[i]);
    }
    return this;
  }
  var init_add = __esm({
    "node_modules/d3-quadtree/src/add.js"() {
    }
  });

  // node_modules/d3-quadtree/src/cover.js
  function cover_default(x3, y3) {
    if (isNaN(x3 = +x3) || isNaN(y3 = +y3))
      return this;
    var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
    if (isNaN(x0)) {
      x1 = (x0 = Math.floor(x3)) + 1;
      y1 = (y0 = Math.floor(y3)) + 1;
    } else {
      var z = x1 - x0 || 1, node = this._root, parent, i;
      while (x0 > x3 || x3 >= x1 || y0 > y3 || y3 >= y1) {
        i = (y3 < y0) << 1 | x3 < x0;
        parent = new Array(4), parent[i] = node, node = parent, z *= 2;
        switch (i) {
          case 0:
            x1 = x0 + z, y1 = y0 + z;
            break;
          case 1:
            x0 = x1 - z, y1 = y0 + z;
            break;
          case 2:
            x1 = x0 + z, y0 = y1 - z;
            break;
          case 3:
            x0 = x1 - z, y0 = y1 - z;
            break;
        }
      }
      if (this._root && this._root.length)
        this._root = node;
    }
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    return this;
  }
  var init_cover = __esm({
    "node_modules/d3-quadtree/src/cover.js"() {
    }
  });

  // node_modules/d3-quadtree/src/data.js
  function data_default2() {
    var data = [];
    this.visit(function(node) {
      if (!node.length)
        do
          data.push(node.data);
        while (node = node.next);
    });
    return data;
  }
  var init_data2 = __esm({
    "node_modules/d3-quadtree/src/data.js"() {
    }
  });

  // node_modules/d3-quadtree/src/extent.js
  function extent_default(_) {
    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]];
  }
  var init_extent = __esm({
    "node_modules/d3-quadtree/src/extent.js"() {
    }
  });

  // node_modules/d3-quadtree/src/quad.js
  function quad_default(node, x0, y0, x1, y1) {
    this.node = node;
    this.x0 = x0;
    this.y0 = y0;
    this.x1 = x1;
    this.y1 = y1;
  }
  var init_quad = __esm({
    "node_modules/d3-quadtree/src/quad.js"() {
    }
  });

  // node_modules/d3-quadtree/src/find.js
  function find_default(x3, y3, radius) {
    var data, x0 = this._x0, y0 = this._y0, x1, y1, x22, y22, x32 = this._x1, y32 = this._y1, quads = [], node = this._root, q, i;
    if (node)
      quads.push(new quad_default(node, x0, y0, x32, y32));
    if (radius == null)
      radius = Infinity;
    else {
      x0 = x3 - radius, y0 = y3 - radius;
      x32 = x3 + radius, y32 = y3 + radius;
      radius *= radius;
    }
    while (q = quads.pop()) {
      if (!(node = q.node) || (x1 = q.x0) > x32 || (y1 = q.y0) > y32 || (x22 = q.x1) < x0 || (y22 = q.y1) < y0)
        continue;
      if (node.length) {
        var xm = (x1 + x22) / 2, ym = (y1 + y22) / 2;
        quads.push(
          new quad_default(node[3], xm, ym, x22, y22),
          new quad_default(node[2], x1, ym, xm, y22),
          new quad_default(node[1], xm, y1, x22, ym),
          new quad_default(node[0], x1, y1, xm, ym)
        );
        if (i = (y3 >= ym) << 1 | x3 >= xm) {
          q = quads[quads.length - 1];
          quads[quads.length - 1] = quads[quads.length - 1 - i];
          quads[quads.length - 1 - i] = q;
        }
      } else {
        var dx = x3 - +this._x.call(null, node.data), dy = y3 - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x3 - d, y0 = y3 - d;
          x32 = x3 + d, y32 = y3 + d;
          data = node.data;
        }
      }
    }
    return data;
  }
  var init_find = __esm({
    "node_modules/d3-quadtree/src/find.js"() {
      init_quad();
    }
  });

  // node_modules/d3-quadtree/src/remove.js
  function remove_default3(d) {
    if (isNaN(x3 = +this._x.call(null, d)) || isNaN(y3 = +this._y.call(null, d)))
      return this;
    var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x3, y3, xm, ym, right, bottom, i, j;
    if (!node)
      return this;
    if (node.length)
      while (true) {
        if (right = x3 >= (xm = (x0 + x1) / 2))
          x0 = xm;
        else
          x1 = xm;
        if (bottom = y3 >= (ym = (y0 + y1) / 2))
          y0 = ym;
        else
          y1 = ym;
        if (!(parent = node, node = node[i = bottom << 1 | right]))
          return this;
        if (!node.length)
          break;
        if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3])
          retainer = parent, j = i;
      }
    while (node.data !== d)
      if (!(previous = node, node = node.next))
        return this;
    if (next = node.next)
      delete node.next;
    if (previous)
      return next ? previous.next = next : delete previous.next, this;
    if (!parent)
      return this._root = next, this;
    next ? parent[i] = next : delete parent[i];
    if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
      if (retainer)
        retainer[j] = node;
      else
        this._root = node;
    }
    return this;
  }
  function removeAll(data) {
    for (var i = 0, n = data.length; i < n; ++i)
      this.remove(data[i]);
    return this;
  }
  var init_remove3 = __esm({
    "node_modules/d3-quadtree/src/remove.js"() {
    }
  });

  // node_modules/d3-quadtree/src/root.js
  function root_default() {
    return this._root;
  }
  var init_root = __esm({
    "node_modules/d3-quadtree/src/root.js"() {
    }
  });

  // node_modules/d3-quadtree/src/size.js
  function size_default2() {
    var size = 0;
    this.visit(function(node) {
      if (!node.length)
        do
          ++size;
        while (node = node.next);
    });
    return size;
  }
  var init_size2 = __esm({
    "node_modules/d3-quadtree/src/size.js"() {
    }
  });

  // node_modules/d3-quadtree/src/visit.js
  function visit_default(callback) {
    var quads = [], q, node = this._root, child, x0, y0, x1, y1;
    if (node)
      quads.push(new quad_default(node, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[3])
          quads.push(new quad_default(child, xm, ym, x1, y1));
        if (child = node[2])
          quads.push(new quad_default(child, x0, ym, xm, y1));
        if (child = node[1])
          quads.push(new quad_default(child, xm, y0, x1, ym));
        if (child = node[0])
          quads.push(new quad_default(child, x0, y0, xm, ym));
      }
    }
    return this;
  }
  var init_visit = __esm({
    "node_modules/d3-quadtree/src/visit.js"() {
      init_quad();
    }
  });

  // node_modules/d3-quadtree/src/visitAfter.js
  function visitAfter_default(callback) {
    var quads = [], next = [], q;
    if (this._root)
      quads.push(new quad_default(this._root, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      var node = q.node;
      if (node.length) {
        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[0])
          quads.push(new quad_default(child, x0, y0, xm, ym));
        if (child = node[1])
          quads.push(new quad_default(child, xm, y0, x1, ym));
        if (child = node[2])
          quads.push(new quad_default(child, x0, ym, xm, y1));
        if (child = node[3])
          quads.push(new quad_default(child, xm, ym, x1, y1));
      }
      next.push(q);
    }
    while (q = next.pop()) {
      callback(q.node, q.x0, q.y0, q.x1, q.y1);
    }
    return this;
  }
  var init_visitAfter = __esm({
    "node_modules/d3-quadtree/src/visitAfter.js"() {
      init_quad();
    }
  });

  // node_modules/d3-quadtree/src/x.js
  function defaultX(d) {
    return d[0];
  }
  function x_default(_) {
    return arguments.length ? (this._x = _, this) : this._x;
  }
  var init_x = __esm({
    "node_modules/d3-quadtree/src/x.js"() {
    }
  });

  // node_modules/d3-quadtree/src/y.js
  function defaultY(d) {
    return d[1];
  }
  function y_default(_) {
    return arguments.length ? (this._y = _, this) : this._y;
  }
  var init_y = __esm({
    "node_modules/d3-quadtree/src/y.js"() {
    }
  });

  // node_modules/d3-quadtree/src/quadtree.js
  function quadtree(nodes, x3, y3) {
    var tree = new Quadtree(x3 == null ? defaultX : x3, y3 == null ? defaultY : y3, NaN, NaN, NaN, NaN);
    return nodes == null ? tree : tree.addAll(nodes);
  }
  function Quadtree(x3, y3, x0, y0, x1, y1) {
    this._x = x3;
    this._y = y3;
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    this._root = void 0;
  }
  function leaf_copy(leaf) {
    var copy = { data: leaf.data }, next = copy;
    while (leaf = leaf.next)
      next = next.next = { data: leaf.data };
    return copy;
  }
  var treeProto;
  var init_quadtree = __esm({
    "node_modules/d3-quadtree/src/quadtree.js"() {
      init_add();
      init_cover();
      init_data2();
      init_extent();
      init_find();
      init_remove3();
      init_root();
      init_size2();
      init_visit();
      init_visitAfter();
      init_x();
      init_y();
      treeProto = quadtree.prototype = Quadtree.prototype;
      treeProto.copy = function() {
        var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
        if (!node)
          return copy;
        if (!node.length)
          return copy._root = leaf_copy(node), copy;
        nodes = [{ source: node, target: copy._root = new Array(4) }];
        while (node = nodes.pop()) {
          for (var i = 0; i < 4; ++i) {
            if (child = node.source[i]) {
              if (child.length)
                nodes.push({ source: child, target: node.target[i] = new Array(4) });
              else
                node.target[i] = leaf_copy(child);
            }
          }
        }
        return copy;
      };
      treeProto.add = add_default;
      treeProto.addAll = addAll;
      treeProto.cover = cover_default;
      treeProto.data = data_default2;
      treeProto.extent = extent_default;
      treeProto.find = find_default;
      treeProto.remove = remove_default3;
      treeProto.removeAll = removeAll;
      treeProto.root = root_default;
      treeProto.size = size_default2;
      treeProto.visit = visit_default;
      treeProto.visitAfter = visitAfter_default;
      treeProto.x = x_default;
      treeProto.y = y_default;
    }
  });

  // node_modules/d3-quadtree/src/index.js
  var init_src18 = __esm({
    "node_modules/d3-quadtree/src/index.js"() {
      init_quadtree();
    }
  });

  // node_modules/d3-force/src/constant.js
  function constant_default5(x3) {
    return function() {
      return x3;
    };
  }
  var init_constant5 = __esm({
    "node_modules/d3-force/src/constant.js"() {
    }
  });

  // node_modules/d3-force/src/jiggle.js
  function jiggle_default(random) {
    return (random() - 0.5) * 1e-6;
  }
  var init_jiggle = __esm({
    "node_modules/d3-force/src/jiggle.js"() {
    }
  });

  // node_modules/d3-force/src/collide.js
  function x(d) {
    return d.x + d.vx;
  }
  function y(d) {
    return d.y + d.vy;
  }
  function collide_default(radius) {
    var nodes, radii, random, strength = 1, iterations = 1;
    if (typeof radius !== "function")
      radius = constant_default5(radius == null ? 1 : +radius);
    function force() {
      var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
      for (var k = 0; k < iterations; ++k) {
        tree = quadtree(nodes, x, y).visitAfter(prepare);
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          ri = radii[node.index], ri2 = ri * ri;
          xi = node.x + node.vx;
          yi = node.y + node.vy;
          tree.visit(apply);
        }
      }
      function apply(quad, x0, y0, x1, y1) {
        var data = quad.data, rj = quad.r, r = ri + rj;
        if (data) {
          if (data.index > node.index) {
            var x3 = xi - data.x - data.vx, y3 = yi - data.y - data.vy, l = x3 * x3 + y3 * y3;
            if (l < r * r) {
              if (x3 === 0)
                x3 = jiggle_default(random), l += x3 * x3;
              if (y3 === 0)
                y3 = jiggle_default(random), l += y3 * y3;
              l = (r - (l = Math.sqrt(l))) / l * strength;
              node.vx += (x3 *= l) * (r = (rj *= rj) / (ri2 + rj));
              node.vy += (y3 *= l) * r;
              data.vx -= x3 * (r = 1 - r);
              data.vy -= y3 * r;
            }
          }
          return;
        }
        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
      }
    }
    function prepare(quad) {
      if (quad.data)
        return quad.r = radii[quad.data.index];
      for (var i = quad.r = 0; i < 4; ++i) {
        if (quad[i] && quad[i].r > quad.r) {
          quad.r = quad[i].r;
        }
      }
    }
    function initialize() {
      if (!nodes)
        return;
      var i, n = nodes.length, node;
      radii = new Array(n);
      for (i = 0; i < n; ++i)
        node = nodes[i], radii[node.index] = +radius(node, i, nodes);
    }
    force.initialize = function(_nodes, _random) {
      nodes = _nodes;
      random = _random;
      initialize();
    };
    force.iterations = function(_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function(_) {
      return arguments.length ? (strength = +_, force) : strength;
    };
    force.radius = function(_) {
      return arguments.length ? (radius = typeof _ === "function" ? _ : constant_default5(+_), initialize(), force) : radius;
    };
    return force;
  }
  var init_collide = __esm({
    "node_modules/d3-force/src/collide.js"() {
      init_src18();
      init_constant5();
      init_jiggle();
    }
  });

  // node_modules/d3-force/src/link.js
  function index(d) {
    return d.index;
  }
  function find2(nodeById, nodeId) {
    var node = nodeById.get(nodeId);
    if (!node)
      throw new Error("node not found: " + nodeId);
    return node;
  }
  function link_default(links) {
    var id2 = index, strength = defaultStrength, strengths, distance = constant_default5(30), distances, nodes, count, bias, random, iterations = 1;
    if (links == null)
      links = [];
    function defaultStrength(link) {
      return 1 / Math.min(count[link.source.index], count[link.target.index]);
    }
    function force(alpha) {
      for (var k = 0, n = links.length; k < iterations; ++k) {
        for (var i = 0, link, source, target, x3, y3, l, b; i < n; ++i) {
          link = links[i], source = link.source, target = link.target;
          x3 = target.x + target.vx - source.x - source.vx || jiggle_default(random);
          y3 = target.y + target.vy - source.y - source.vy || jiggle_default(random);
          l = Math.sqrt(x3 * x3 + y3 * y3);
          l = (l - distances[i]) / l * alpha * strengths[i];
          x3 *= l, y3 *= l;
          target.vx -= x3 * (b = bias[i]);
          target.vy -= y3 * b;
          source.vx += x3 * (b = 1 - b);
          source.vy += y3 * b;
        }
      }
    }
    function initialize() {
      if (!nodes)
        return;
      var i, n = nodes.length, m2 = links.length, nodeById = new Map(nodes.map((d, i2) => [id2(d, i2, nodes), d])), link;
      for (i = 0, count = new Array(n); i < m2; ++i) {
        link = links[i], link.index = i;
        if (typeof link.source !== "object")
          link.source = find2(nodeById, link.source);
        if (typeof link.target !== "object")
          link.target = find2(nodeById, link.target);
        count[link.source.index] = (count[link.source.index] || 0) + 1;
        count[link.target.index] = (count[link.target.index] || 0) + 1;
      }
      for (i = 0, bias = new Array(m2); i < m2; ++i) {
        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
      }
      strengths = new Array(m2), initializeStrength();
      distances = new Array(m2), initializeDistance();
    }
    function initializeStrength() {
      if (!nodes)
        return;
      for (var i = 0, n = links.length; i < n; ++i) {
        strengths[i] = +strength(links[i], i, links);
      }
    }
    function initializeDistance() {
      if (!nodes)
        return;
      for (var i = 0, n = links.length; i < n; ++i) {
        distances[i] = +distance(links[i], i, links);
      }
    }
    force.initialize = function(_nodes, _random) {
      nodes = _nodes;
      random = _random;
      initialize();
    };
    force.links = function(_) {
      return arguments.length ? (links = _, initialize(), force) : links;
    };
    force.id = function(_) {
      return arguments.length ? (id2 = _, force) : id2;
    };
    force.iterations = function(_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default5(+_), initializeStrength(), force) : strength;
    };
    force.distance = function(_) {
      return arguments.length ? (distance = typeof _ === "function" ? _ : constant_default5(+_), initializeDistance(), force) : distance;
    };
    return force;
  }
  var init_link = __esm({
    "node_modules/d3-force/src/link.js"() {
      init_constant5();
      init_jiggle();
    }
  });

  // node_modules/d3-force/src/lcg.js
  function lcg_default() {
    let s = 1;
    return () => (s = (a * s + c) % m) / m;
  }
  var a, c, m;
  var init_lcg = __esm({
    "node_modules/d3-force/src/lcg.js"() {
      a = 1664525;
      c = 1013904223;
      m = 4294967296;
    }
  });

  // node_modules/d3-force/src/simulation.js
  function x2(d) {
    return d.x;
  }
  function y2(d) {
    return d.y;
  }
  function simulation_default(nodes) {
    var simulation, alpha = 1, alphaMin = 1e-3, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = /* @__PURE__ */ new Map(), stepper = timer(step), event = dispatch_default("tick", "end"), random = lcg_default();
    if (nodes == null)
      nodes = [];
    function step() {
      tick();
      event.call("tick", simulation);
      if (alpha < alphaMin) {
        stepper.stop();
        event.call("end", simulation);
      }
    }
    function tick(iterations) {
      var i, n = nodes.length, node;
      if (iterations === void 0)
        iterations = 1;
      for (var k = 0; k < iterations; ++k) {
        alpha += (alphaTarget - alpha) * alphaDecay;
        forces.forEach(function(force) {
          force(alpha);
        });
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          if (node.fx == null)
            node.x += node.vx *= velocityDecay;
          else
            node.x = node.fx, node.vx = 0;
          if (node.fy == null)
            node.y += node.vy *= velocityDecay;
          else
            node.y = node.fy, node.vy = 0;
        }
      }
      return simulation;
    }
    function initializeNodes() {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.index = i;
        if (node.fx != null)
          node.x = node.fx;
        if (node.fy != null)
          node.y = node.fy;
        if (isNaN(node.x) || isNaN(node.y)) {
          var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
          node.x = radius * Math.cos(angle);
          node.y = radius * Math.sin(angle);
        }
        if (isNaN(node.vx) || isNaN(node.vy)) {
          node.vx = node.vy = 0;
        }
      }
    }
    function initializeForce(force) {
      if (force.initialize)
        force.initialize(nodes, random);
      return force;
    }
    initializeNodes();
    return simulation = {
      tick,
      restart: function() {
        return stepper.restart(step), simulation;
      },
      stop: function() {
        return stepper.stop(), simulation;
      },
      nodes: function(_) {
        return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
      },
      alpha: function(_) {
        return arguments.length ? (alpha = +_, simulation) : alpha;
      },
      alphaMin: function(_) {
        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
      },
      alphaDecay: function(_) {
        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
      },
      alphaTarget: function(_) {
        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
      },
      velocityDecay: function(_) {
        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
      },
      randomSource: function(_) {
        return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
      },
      force: function(name, _) {
        return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
      },
      find: function(x3, y3, radius) {
        var i = 0, n = nodes.length, dx, dy, d2, node, closest;
        if (radius == null)
          radius = Infinity;
        else
          radius *= radius;
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          dx = x3 - node.x;
          dy = y3 - node.y;
          d2 = dx * dx + dy * dy;
          if (d2 < radius)
            closest = node, radius = d2;
        }
        return closest;
      },
      on: function(name, _) {
        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
      }
    };
  }
  var initialRadius, initialAngle;
  var init_simulation = __esm({
    "node_modules/d3-force/src/simulation.js"() {
      init_src3();
      init_src8();
      init_lcg();
      initialRadius = 10;
      initialAngle = Math.PI * (3 - Math.sqrt(5));
    }
  });

  // node_modules/d3-force/src/manyBody.js
  function manyBody_default() {
    var nodes, node, random, alpha, strength = constant_default5(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
    function force(_) {
      var i, n = nodes.length, tree = quadtree(nodes, x2, y2).visitAfter(accumulate);
      for (alpha = _, i = 0; i < n; ++i)
        node = nodes[i], tree.visit(apply);
    }
    function initialize() {
      if (!nodes)
        return;
      var i, n = nodes.length, node2;
      strengths = new Array(n);
      for (i = 0; i < n; ++i)
        node2 = nodes[i], strengths[node2.index] = +strength(node2, i, nodes);
    }
    function accumulate(quad) {
      var strength2 = 0, q, c2, weight = 0, x3, y3, i;
      if (quad.length) {
        for (x3 = y3 = i = 0; i < 4; ++i) {
          if ((q = quad[i]) && (c2 = Math.abs(q.value))) {
            strength2 += q.value, weight += c2, x3 += c2 * q.x, y3 += c2 * q.y;
          }
        }
        quad.x = x3 / weight;
        quad.y = y3 / weight;
      } else {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;
        do
          strength2 += strengths[q.data.index];
        while (q = q.next);
      }
      quad.value = strength2;
    }
    function apply(quad, x1, _, x22) {
      if (!quad.value)
        return true;
      var x3 = quad.x - node.x, y3 = quad.y - node.y, w = x22 - x1, l = x3 * x3 + y3 * y3;
      if (w * w / theta2 < l) {
        if (l < distanceMax2) {
          if (x3 === 0)
            x3 = jiggle_default(random), l += x3 * x3;
          if (y3 === 0)
            y3 = jiggle_default(random), l += y3 * y3;
          if (l < distanceMin2)
            l = Math.sqrt(distanceMin2 * l);
          node.vx += x3 * quad.value * alpha / l;
          node.vy += y3 * quad.value * alpha / l;
        }
        return true;
      } else if (quad.length || l >= distanceMax2)
        return;
      if (quad.data !== node || quad.next) {
        if (x3 === 0)
          x3 = jiggle_default(random), l += x3 * x3;
        if (y3 === 0)
          y3 = jiggle_default(random), l += y3 * y3;
        if (l < distanceMin2)
          l = Math.sqrt(distanceMin2 * l);
      }
      do
        if (quad.data !== node) {
          w = strengths[quad.data.index] * alpha / l;
          node.vx += x3 * w;
          node.vy += y3 * w;
        }
      while (quad = quad.next);
    }
    force.initialize = function(_nodes, _random) {
      nodes = _nodes;
      random = _random;
      initialize();
    };
    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default5(+_), initialize(), force) : strength;
    };
    force.distanceMin = function(_) {
      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
    };
    force.distanceMax = function(_) {
      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
    };
    force.theta = function(_) {
      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
    };
    return force;
  }
  var init_manyBody = __esm({
    "node_modules/d3-force/src/manyBody.js"() {
      init_src18();
      init_constant5();
      init_jiggle();
      init_simulation();
    }
  });

  // node_modules/d3-force/src/x.js
  function x_default2(x3) {
    var strength = constant_default5(0.1), nodes, strengths, xz;
    if (typeof x3 !== "function")
      x3 = constant_default5(x3 == null ? 0 : +x3);
    function force(alpha) {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
      }
    }
    function initialize() {
      if (!nodes)
        return;
      var i, n = nodes.length;
      strengths = new Array(n);
      xz = new Array(n);
      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(xz[i] = +x3(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
      }
    }
    force.initialize = function(_) {
      nodes = _;
      initialize();
    };
    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default5(+_), initialize(), force) : strength;
    };
    force.x = function(_) {
      return arguments.length ? (x3 = typeof _ === "function" ? _ : constant_default5(+_), initialize(), force) : x3;
    };
    return force;
  }
  var init_x2 = __esm({
    "node_modules/d3-force/src/x.js"() {
      init_constant5();
    }
  });

  // node_modules/d3-force/src/y.js
  function y_default2(y3) {
    var strength = constant_default5(0.1), nodes, strengths, yz;
    if (typeof y3 !== "function")
      y3 = constant_default5(y3 == null ? 0 : +y3);
    function force(alpha) {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
      }
    }
    function initialize() {
      if (!nodes)
        return;
      var i, n = nodes.length;
      strengths = new Array(n);
      yz = new Array(n);
      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(yz[i] = +y3(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
      }
    }
    force.initialize = function(_) {
      nodes = _;
      initialize();
    };
    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant_default5(+_), initialize(), force) : strength;
    };
    force.y = function(_) {
      return arguments.length ? (y3 = typeof _ === "function" ? _ : constant_default5(+_), initialize(), force) : y3;
    };
    return force;
  }
  var init_y2 = __esm({
    "node_modules/d3-force/src/y.js"() {
      init_constant5();
    }
  });

  // node_modules/d3-force/src/index.js
  var init_src19 = __esm({
    "node_modules/d3-force/src/index.js"() {
      init_collide();
      init_link();
      init_manyBody();
      init_simulation();
      init_x2();
      init_y2();
    }
  });

  // node_modules/d3-format/src/formatDecimal.js
  function formatDecimal_default(x3) {
    return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
  }
  function formatDecimalParts(x3, p) {
    if ((i = (x3 = p ? x3.toExponential(p - 1) : x3.toExponential()).indexOf("e")) < 0)
      return null;
    var i, coefficient = x3.slice(0, i);
    return [
      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
      +x3.slice(i + 1)
    ];
  }
  var init_formatDecimal = __esm({
    "node_modules/d3-format/src/formatDecimal.js"() {
    }
  });

  // node_modules/d3-format/src/exponent.js
  function exponent_default(x3) {
    return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
  }
  var init_exponent = __esm({
    "node_modules/d3-format/src/exponent.js"() {
      init_formatDecimal();
    }
  });

  // node_modules/d3-format/src/formatGroup.js
  function formatGroup_default(grouping, thousands) {
    return function(value, width) {
      var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width)
          g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width)
          break;
        g = grouping[j = (j + 1) % grouping.length];
      }
      return t.reverse().join(thousands);
    };
  }
  var init_formatGroup = __esm({
    "node_modules/d3-format/src/formatGroup.js"() {
    }
  });

  // node_modules/d3-format/src/formatNumerals.js
  function formatNumerals_default(numerals) {
    return function(value) {
      return value.replace(/[0-9]/g, function(i) {
        return numerals[+i];
      });
    };
  }
  var init_formatNumerals = __esm({
    "node_modules/d3-format/src/formatNumerals.js"() {
    }
  });

  // node_modules/d3-format/src/formatSpecifier.js
  function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier)))
      throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }
  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
    this.align = specifier.align === void 0 ? ">" : specifier.align + "";
    this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === void 0 ? void 0 : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === void 0 ? "" : specifier.type + "";
  }
  var re;
  var init_formatSpecifier = __esm({
    "node_modules/d3-format/src/formatSpecifier.js"() {
      re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
      formatSpecifier.prototype = FormatSpecifier.prototype;
      FormatSpecifier.prototype.toString = function() {
        return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
      };
    }
  });

  // node_modules/d3-format/src/formatTrim.js
  function formatTrim_default(s) {
    out:
      for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s[i]) {
          case ".":
            i0 = i1 = i;
            break;
          case "0":
            if (i0 === 0)
              i0 = i;
            i1 = i;
            break;
          default:
            if (!+s[i])
              break out;
            if (i0 > 0)
              i0 = 0;
            break;
        }
      }
    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
  }
  var init_formatTrim = __esm({
    "node_modules/d3-format/src/formatTrim.js"() {
    }
  });

  // node_modules/d3-format/src/formatPrefixAuto.js
  function formatPrefixAuto_default(x3, p) {
    var d = formatDecimalParts(x3, p);
    if (!d)
      return x3 + "";
    var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x3, Math.max(0, p + i - 1))[0];
  }
  var prefixExponent;
  var init_formatPrefixAuto = __esm({
    "node_modules/d3-format/src/formatPrefixAuto.js"() {
      init_formatDecimal();
    }
  });

  // node_modules/d3-format/src/formatRounded.js
  function formatRounded_default(x3, p) {
    var d = formatDecimalParts(x3, p);
    if (!d)
      return x3 + "";
    var coefficient = d[0], exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }
  var init_formatRounded = __esm({
    "node_modules/d3-format/src/formatRounded.js"() {
      init_formatDecimal();
    }
  });

  // node_modules/d3-format/src/formatTypes.js
  var formatTypes_default;
  var init_formatTypes = __esm({
    "node_modules/d3-format/src/formatTypes.js"() {
      init_formatDecimal();
      init_formatPrefixAuto();
      init_formatRounded();
      formatTypes_default = {
        "%": (x3, p) => (x3 * 100).toFixed(p),
        "b": (x3) => Math.round(x3).toString(2),
        "c": (x3) => x3 + "",
        "d": formatDecimal_default,
        "e": (x3, p) => x3.toExponential(p),
        "f": (x3, p) => x3.toFixed(p),
        "g": (x3, p) => x3.toPrecision(p),
        "o": (x3) => Math.round(x3).toString(8),
        "p": (x3, p) => formatRounded_default(x3 * 100, p),
        "r": formatRounded_default,
        "s": formatPrefixAuto_default,
        "X": (x3) => Math.round(x3).toString(16).toUpperCase(),
        "x": (x3) => Math.round(x3).toString(16)
      };
    }
  });

  // node_modules/d3-format/src/identity.js
  function identity_default(x3) {
    return x3;
  }
  var init_identity = __esm({
    "node_modules/d3-format/src/identity.js"() {
    }
  });

  // node_modules/d3-format/src/locale.js
  function locale_default(locale3) {
    var group = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default : formatGroup_default(map.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default : formatNumerals_default(map.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "\u2212" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
      if (type2 === "n")
        comma = true, type2 = "g";
      else if (!formatTypes_default[type2])
        precision === void 0 && (precision = 12), trim = true, type2 = "g";
      if (zero2 || fill === "0" && align === "=")
        zero2 = true, fill = "0", align = "=";
      var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
      var formatType = formatTypes_default[type2], maybeSuffix = /[defgprs%]/.test(type2);
      precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
      function format2(value) {
        var valuePrefix = prefix, valueSuffix = suffix, i, n, c2;
        if (type2 === "c") {
          valueSuffix = formatType(value) + valueSuffix;
          value = "";
        } else {
          value = +value;
          var valueNegative = value < 0 || 1 / value < 0;
          value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
          if (trim)
            value = formatTrim_default(value);
          if (valueNegative && +value === 0 && sign !== "+")
            valueNegative = false;
          valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
          valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
          if (maybeSuffix) {
            i = -1, n = value.length;
            while (++i < n) {
              if (c2 = value.charCodeAt(i), 48 > c2 || c2 > 57) {
                valueSuffix = (c2 === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                value = value.slice(0, i);
                break;
              }
            }
          }
        }
        if (comma && !zero2)
          value = group(value, Infinity);
        var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
        if (comma && zero2)
          value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
        switch (align) {
          case "<":
            value = valuePrefix + value + valueSuffix + padding;
            break;
          case "=":
            value = valuePrefix + padding + value + valueSuffix;
            break;
          case "^":
            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
            break;
          default:
            value = padding + valuePrefix + value + valueSuffix;
            break;
        }
        return numerals(value);
      }
      format2.toString = function() {
        return specifier + "";
      };
      return format2;
    }
    function formatPrefix2(specifier, value) {
      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
      return function(value2) {
        return f(k * value2) + prefix;
      };
    }
    return {
      format: newFormat,
      formatPrefix: formatPrefix2
    };
  }
  var map, prefixes;
  var init_locale = __esm({
    "node_modules/d3-format/src/locale.js"() {
      init_exponent();
      init_formatGroup();
      init_formatNumerals();
      init_formatSpecifier();
      init_formatTrim();
      init_formatTypes();
      init_formatPrefixAuto();
      init_identity();
      map = Array.prototype.map;
      prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
    }
  });

  // node_modules/d3-format/src/defaultLocale.js
  function defaultLocale(definition) {
    locale = locale_default(definition);
    format = locale.format;
    formatPrefix = locale.formatPrefix;
    return locale;
  }
  var locale, format, formatPrefix;
  var init_defaultLocale = __esm({
    "node_modules/d3-format/src/defaultLocale.js"() {
      init_locale();
      defaultLocale({
        thousands: ",",
        grouping: [3],
        currency: ["$", ""]
      });
    }
  });

  // node_modules/d3-format/src/index.js
  var init_src20 = __esm({
    "node_modules/d3-format/src/index.js"() {
      init_defaultLocale();
    }
  });

  // node_modules/d3-geo/src/index.js
  var init_src21 = __esm({
    "node_modules/d3-geo/src/index.js"() {
    }
  });

  // node_modules/d3-hierarchy/src/index.js
  var init_src22 = __esm({
    "node_modules/d3-hierarchy/src/index.js"() {
    }
  });

  // node_modules/d3-polygon/src/index.js
  var init_src23 = __esm({
    "node_modules/d3-polygon/src/index.js"() {
    }
  });

  // node_modules/d3-random/src/index.js
  var init_src24 = __esm({
    "node_modules/d3-random/src/index.js"() {
    }
  });

  // node_modules/d3-time/src/interval.js
  function timeInterval(floori, offseti, count, field) {
    function interval2(date) {
      return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
    }
    interval2.floor = (date) => {
      return floori(date = /* @__PURE__ */ new Date(+date)), date;
    };
    interval2.ceil = (date) => {
      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
    };
    interval2.round = (date) => {
      const d0 = interval2(date), d1 = interval2.ceil(date);
      return date - d0 < d1 - date ? d0 : d1;
    };
    interval2.offset = (date, step) => {
      return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
    };
    interval2.range = (start2, stop, step) => {
      const range = [];
      start2 = interval2.ceil(start2);
      step = step == null ? 1 : Math.floor(step);
      if (!(start2 < stop) || !(step > 0))
        return range;
      let previous;
      do
        range.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
      while (previous < start2 && start2 < stop);
      return range;
    };
    interval2.filter = (test) => {
      return timeInterval((date) => {
        if (date >= date)
          while (floori(date), !test(date))
            date.setTime(date - 1);
      }, (date, step) => {
        if (date >= date) {
          if (step < 0)
            while (++step <= 0) {
              while (offseti(date, -1), !test(date)) {
              }
            }
          else
            while (--step >= 0) {
              while (offseti(date, 1), !test(date)) {
              }
            }
        }
      });
    };
    if (count) {
      interval2.count = (start2, end) => {
        t0.setTime(+start2), t1.setTime(+end);
        floori(t0), floori(t1);
        return Math.floor(count(t0, t1));
      };
      interval2.every = (step) => {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval2 : interval2.filter(field ? (d) => field(d) % step === 0 : (d) => interval2.count(0, d) % step === 0);
      };
    }
    return interval2;
  }
  var t0, t1;
  var init_interval = __esm({
    "node_modules/d3-time/src/interval.js"() {
      t0 = /* @__PURE__ */ new Date();
      t1 = /* @__PURE__ */ new Date();
    }
  });

  // node_modules/d3-time/src/duration.js
  var durationSecond, durationMinute, durationHour, durationDay, durationWeek, durationMonth, durationYear;
  var init_duration2 = __esm({
    "node_modules/d3-time/src/duration.js"() {
      durationSecond = 1e3;
      durationMinute = durationSecond * 60;
      durationHour = durationMinute * 60;
      durationDay = durationHour * 24;
      durationWeek = durationDay * 7;
      durationMonth = durationDay * 30;
      durationYear = durationDay * 365;
    }
  });

  // node_modules/d3-time/src/day.js
  var timeDay, timeDays, utcDay, utcDays, unixDay, unixDays;
  var init_day = __esm({
    "node_modules/d3-time/src/day.js"() {
      init_interval();
      init_duration2();
      timeDay = timeInterval(
        (date) => date.setHours(0, 0, 0, 0),
        (date, step) => date.setDate(date.getDate() + step),
        (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay,
        (date) => date.getDate() - 1
      );
      timeDays = timeDay.range;
      utcDay = timeInterval((date) => {
        date.setUTCHours(0, 0, 0, 0);
      }, (date, step) => {
        date.setUTCDate(date.getUTCDate() + step);
      }, (start2, end) => {
        return (end - start2) / durationDay;
      }, (date) => {
        return date.getUTCDate() - 1;
      });
      utcDays = utcDay.range;
      unixDay = timeInterval((date) => {
        date.setUTCHours(0, 0, 0, 0);
      }, (date, step) => {
        date.setUTCDate(date.getUTCDate() + step);
      }, (start2, end) => {
        return (end - start2) / durationDay;
      }, (date) => {
        return Math.floor(date / durationDay);
      });
      unixDays = unixDay.range;
    }
  });

  // node_modules/d3-time/src/week.js
  function timeWeekday(i) {
    return timeInterval((date) => {
      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
      date.setHours(0, 0, 0, 0);
    }, (date, step) => {
      date.setDate(date.getDate() + step * 7);
    }, (start2, end) => {
      return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
    });
  }
  function utcWeekday(i) {
    return timeInterval((date) => {
      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
      date.setUTCHours(0, 0, 0, 0);
    }, (date, step) => {
      date.setUTCDate(date.getUTCDate() + step * 7);
    }, (start2, end) => {
      return (end - start2) / durationWeek;
    });
  }
  var timeSunday, timeMonday, timeTuesday, timeWednesday, timeThursday, timeFriday, timeSaturday, timeSundays, timeMondays, timeTuesdays, timeWednesdays, timeThursdays, timeFridays, timeSaturdays, utcSunday, utcMonday, utcTuesday, utcWednesday, utcThursday, utcFriday, utcSaturday, utcSundays, utcMondays, utcTuesdays, utcWednesdays, utcThursdays, utcFridays, utcSaturdays;
  var init_week = __esm({
    "node_modules/d3-time/src/week.js"() {
      init_interval();
      init_duration2();
      timeSunday = timeWeekday(0);
      timeMonday = timeWeekday(1);
      timeTuesday = timeWeekday(2);
      timeWednesday = timeWeekday(3);
      timeThursday = timeWeekday(4);
      timeFriday = timeWeekday(5);
      timeSaturday = timeWeekday(6);
      timeSundays = timeSunday.range;
      timeMondays = timeMonday.range;
      timeTuesdays = timeTuesday.range;
      timeWednesdays = timeWednesday.range;
      timeThursdays = timeThursday.range;
      timeFridays = timeFriday.range;
      timeSaturdays = timeSaturday.range;
      utcSunday = utcWeekday(0);
      utcMonday = utcWeekday(1);
      utcTuesday = utcWeekday(2);
      utcWednesday = utcWeekday(3);
      utcThursday = utcWeekday(4);
      utcFriday = utcWeekday(5);
      utcSaturday = utcWeekday(6);
      utcSundays = utcSunday.range;
      utcMondays = utcMonday.range;
      utcTuesdays = utcTuesday.range;
      utcWednesdays = utcWednesday.range;
      utcThursdays = utcThursday.range;
      utcFridays = utcFriday.range;
      utcSaturdays = utcSaturday.range;
    }
  });

  // node_modules/d3-time/src/year.js
  var timeYear, timeYears, utcYear, utcYears;
  var init_year = __esm({
    "node_modules/d3-time/src/year.js"() {
      init_interval();
      timeYear = timeInterval((date) => {
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
      }, (date, step) => {
        date.setFullYear(date.getFullYear() + step);
      }, (start2, end) => {
        return end.getFullYear() - start2.getFullYear();
      }, (date) => {
        return date.getFullYear();
      });
      timeYear.every = (k) => {
        return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {
          date.setFullYear(Math.floor(date.getFullYear() / k) * k);
          date.setMonth(0, 1);
          date.setHours(0, 0, 0, 0);
        }, (date, step) => {
          date.setFullYear(date.getFullYear() + step * k);
        });
      };
      timeYears = timeYear.range;
      utcYear = timeInterval((date) => {
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
      }, (date, step) => {
        date.setUTCFullYear(date.getUTCFullYear() + step);
      }, (start2, end) => {
        return end.getUTCFullYear() - start2.getUTCFullYear();
      }, (date) => {
        return date.getUTCFullYear();
      });
      utcYear.every = (k) => {
        return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {
          date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
          date.setUTCMonth(0, 1);
          date.setUTCHours(0, 0, 0, 0);
        }, (date, step) => {
          date.setUTCFullYear(date.getUTCFullYear() + step * k);
        });
      };
      utcYears = utcYear.range;
    }
  });

  // node_modules/d3-time/src/index.js
  var init_src25 = __esm({
    "node_modules/d3-time/src/index.js"() {
      init_day();
      init_week();
      init_year();
    }
  });

  // node_modules/d3-time-format/src/locale.js
  function localDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
      date.setFullYear(d.y);
      return date;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
  }
  function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
      date.setUTCFullYear(d.y);
      return date;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
  }
  function newDate(y3, m2, d) {
    return { y: y3, m: m2, d, H: 0, M: 0, S: 0, L: 0 };
  }
  function formatLocale(locale3) {
    var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
    var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
    var formats = {
      "a": formatShortWeekday,
      "A": formatWeekday,
      "b": formatShortMonth,
      "B": formatMonth,
      "c": null,
      "d": formatDayOfMonth,
      "e": formatDayOfMonth,
      "f": formatMicroseconds,
      "g": formatYearISO,
      "G": formatFullYearISO,
      "H": formatHour24,
      "I": formatHour12,
      "j": formatDayOfYear,
      "L": formatMilliseconds,
      "m": formatMonthNumber,
      "M": formatMinutes,
      "p": formatPeriod,
      "q": formatQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatSeconds,
      "u": formatWeekdayNumberMonday,
      "U": formatWeekNumberSunday,
      "V": formatWeekNumberISO,
      "w": formatWeekdayNumberSunday,
      "W": formatWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatYear,
      "Y": formatFullYear,
      "Z": formatZone,
      "%": formatLiteralPercent
    };
    var utcFormats = {
      "a": formatUTCShortWeekday,
      "A": formatUTCWeekday,
      "b": formatUTCShortMonth,
      "B": formatUTCMonth,
      "c": null,
      "d": formatUTCDayOfMonth,
      "e": formatUTCDayOfMonth,
      "f": formatUTCMicroseconds,
      "g": formatUTCYearISO,
      "G": formatUTCFullYearISO,
      "H": formatUTCHour24,
      "I": formatUTCHour12,
      "j": formatUTCDayOfYear,
      "L": formatUTCMilliseconds,
      "m": formatUTCMonthNumber,
      "M": formatUTCMinutes,
      "p": formatUTCPeriod,
      "q": formatUTCQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatUTCSeconds,
      "u": formatUTCWeekdayNumberMonday,
      "U": formatUTCWeekNumberSunday,
      "V": formatUTCWeekNumberISO,
      "w": formatUTCWeekdayNumberSunday,
      "W": formatUTCWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatUTCYear,
      "Y": formatUTCFullYear,
      "Z": formatUTCZone,
      "%": formatLiteralPercent
    };
    var parses = {
      "a": parseShortWeekday,
      "A": parseWeekday,
      "b": parseShortMonth,
      "B": parseMonth,
      "c": parseLocaleDateTime,
      "d": parseDayOfMonth,
      "e": parseDayOfMonth,
      "f": parseMicroseconds,
      "g": parseYear,
      "G": parseFullYear,
      "H": parseHour24,
      "I": parseHour24,
      "j": parseDayOfYear,
      "L": parseMilliseconds,
      "m": parseMonthNumber,
      "M": parseMinutes,
      "p": parsePeriod,
      "q": parseQuarter,
      "Q": parseUnixTimestamp,
      "s": parseUnixTimestampSeconds,
      "S": parseSeconds,
      "u": parseWeekdayNumberMonday,
      "U": parseWeekNumberSunday,
      "V": parseWeekNumberISO,
      "w": parseWeekdayNumberSunday,
      "W": parseWeekNumberMonday,
      "x": parseLocaleDate,
      "X": parseLocaleTime,
      "y": parseYear,
      "Y": parseFullYear,
      "Z": parseZone,
      "%": parseLiteralPercent
    };
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats2) {
      return function(date) {
        var string = [], i = -1, j = 0, n = specifier.length, c2, pad2, format2;
        if (!(date instanceof Date))
          date = /* @__PURE__ */ new Date(+date);
        while (++i < n) {
          if (specifier.charCodeAt(i) === 37) {
            string.push(specifier.slice(j, i));
            if ((pad2 = pads[c2 = specifier.charAt(++i)]) != null)
              c2 = specifier.charAt(++i);
            else
              pad2 = c2 === "e" ? " " : "0";
            if (format2 = formats2[c2])
              c2 = format2(date, pad2);
            string.push(c2);
            j = i + 1;
          }
        }
        string.push(specifier.slice(j, i));
        return string.join("");
      };
    }
    function newParse(specifier, Z) {
      return function(string) {
        var d = newDate(1900, void 0, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
        if (i != string.length)
          return null;
        if ("Q" in d)
          return new Date(d.Q);
        if ("s" in d)
          return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
        if (Z && !("Z" in d))
          d.Z = 0;
        if ("p" in d)
          d.H = d.H % 12 + d.p * 12;
        if (d.m === void 0)
          d.m = "q" in d ? d.q : 0;
        if ("V" in d) {
          if (d.V < 1 || d.V > 53)
            return null;
          if (!("w" in d))
            d.w = 1;
          if ("Z" in d) {
            week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
            week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
            week = utcDay.offset(week, (d.V - 1) * 7);
            d.y = week.getUTCFullYear();
            d.m = week.getUTCMonth();
            d.d = week.getUTCDate() + (d.w + 6) % 7;
          } else {
            week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
            week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
            week = timeDay.offset(week, (d.V - 1) * 7);
            d.y = week.getFullYear();
            d.m = week.getMonth();
            d.d = week.getDate() + (d.w + 6) % 7;
          }
        } else if ("W" in d || "U" in d) {
          if (!("w" in d))
            d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
          day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
          d.m = 0;
          d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
        }
        if ("Z" in d) {
          d.H += d.Z / 100 | 0;
          d.M += d.Z % 100;
          return utcDate(d);
        }
        return localDate(d);
      };
    }
    function parseSpecifier(d, specifier, string, j) {
      var i = 0, n = specifier.length, m2 = string.length, c2, parse;
      while (i < n) {
        if (j >= m2)
          return -1;
        c2 = specifier.charCodeAt(i++);
        if (c2 === 37) {
          c2 = specifier.charAt(i++);
          parse = parses[c2 in pads ? specifier.charAt(i++) : c2];
          if (!parse || (j = parse(d, string, j)) < 0)
            return -1;
        } else if (c2 != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    function parsePeriod(d, string, i) {
      var n = periodRe.exec(string.slice(i));
      return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortWeekday(d, string, i) {
      var n = shortWeekdayRe.exec(string.slice(i));
      return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseWeekday(d, string, i) {
      var n = weekdayRe.exec(string.slice(i));
      return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortMonth(d, string, i) {
      var n = shortMonthRe.exec(string.slice(i));
      return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseMonth(d, string, i) {
      var n = monthRe.exec(string.slice(i));
      return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseLocaleDateTime(d, string, i) {
      return parseSpecifier(d, locale_dateTime, string, i);
    }
    function parseLocaleDate(d, string, i) {
      return parseSpecifier(d, locale_date, string, i);
    }
    function parseLocaleTime(d, string, i) {
      return parseSpecifier(d, locale_time, string, i);
    }
    function formatShortWeekday(d) {
      return locale_shortWeekdays[d.getDay()];
    }
    function formatWeekday(d) {
      return locale_weekdays[d.getDay()];
    }
    function formatShortMonth(d) {
      return locale_shortMonths[d.getMonth()];
    }
    function formatMonth(d) {
      return locale_months[d.getMonth()];
    }
    function formatPeriod(d) {
      return locale_periods[+(d.getHours() >= 12)];
    }
    function formatQuarter(d) {
      return 1 + ~~(d.getMonth() / 3);
    }
    function formatUTCShortWeekday(d) {
      return locale_shortWeekdays[d.getUTCDay()];
    }
    function formatUTCWeekday(d) {
      return locale_weekdays[d.getUTCDay()];
    }
    function formatUTCShortMonth(d) {
      return locale_shortMonths[d.getUTCMonth()];
    }
    function formatUTCMonth(d) {
      return locale_months[d.getUTCMonth()];
    }
    function formatUTCPeriod(d) {
      return locale_periods[+(d.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d) {
      return 1 + ~~(d.getUTCMonth() / 3);
    }
    return {
      format: function(specifier) {
        var f = newFormat(specifier += "", formats);
        f.toString = function() {
          return specifier;
        };
        return f;
      },
      parse: function(specifier) {
        var p = newParse(specifier += "", false);
        p.toString = function() {
          return specifier;
        };
        return p;
      },
      utcFormat: function(specifier) {
        var f = newFormat(specifier += "", utcFormats);
        f.toString = function() {
          return specifier;
        };
        return f;
      },
      utcParse: function(specifier) {
        var p = newParse(specifier += "", true);
        p.toString = function() {
          return specifier;
        };
        return p;
      }
    };
  }
  function pad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function requote(s) {
    return s.replace(requoteRe, "\\$&");
  }
  function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
  }
  function formatLookup(names) {
    return new Map(names.map((name, i) => [name.toLowerCase(), i]));
  }
  function parseWeekdayNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
  }
  function parseWeekdayNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.u = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberISO(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.V = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
  }
  function parseFullYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
  }
  function parseYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
  }
  function parseZone(d, string, i) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
  }
  function parseQuarter(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
  }
  function parseMonthNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
  }
  function parseDayOfMonth(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
  }
  function parseDayOfYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
  }
  function parseHour24(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
  }
  function parseMinutes(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
  }
  function parseSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
  }
  function parseMilliseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
  }
  function parseMicroseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 6));
    return n ? (d.L = Math.floor(n[0] / 1e3), i + n[0].length) : -1;
  }
  function parseLiteralPercent(d, string, i) {
    var n = percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function parseUnixTimestamp(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.Q = +n[0], i + n[0].length) : -1;
  }
  function parseUnixTimestampSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.s = +n[0], i + n[0].length) : -1;
  }
  function formatDayOfMonth(d, p) {
    return pad(d.getDate(), p, 2);
  }
  function formatHour24(d, p) {
    return pad(d.getHours(), p, 2);
  }
  function formatHour12(d, p) {
    return pad(d.getHours() % 12 || 12, p, 2);
  }
  function formatDayOfYear(d, p) {
    return pad(1 + timeDay.count(timeYear(d), d), p, 3);
  }
  function formatMilliseconds(d, p) {
    return pad(d.getMilliseconds(), p, 3);
  }
  function formatMicroseconds(d, p) {
    return formatMilliseconds(d, p) + "000";
  }
  function formatMonthNumber(d, p) {
    return pad(d.getMonth() + 1, p, 2);
  }
  function formatMinutes(d, p) {
    return pad(d.getMinutes(), p, 2);
  }
  function formatSeconds(d, p) {
    return pad(d.getSeconds(), p, 2);
  }
  function formatWeekdayNumberMonday(d) {
    var day = d.getDay();
    return day === 0 ? 7 : day;
  }
  function formatWeekNumberSunday(d, p) {
    return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);
  }
  function dISO(d) {
    var day = d.getDay();
    return day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
  }
  function formatWeekNumberISO(d, p) {
    d = dISO(d);
    return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);
  }
  function formatWeekdayNumberSunday(d) {
    return d.getDay();
  }
  function formatWeekNumberMonday(d, p) {
    return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);
  }
  function formatYear(d, p) {
    return pad(d.getFullYear() % 100, p, 2);
  }
  function formatYearISO(d, p) {
    d = dISO(d);
    return pad(d.getFullYear() % 100, p, 2);
  }
  function formatFullYear(d, p) {
    return pad(d.getFullYear() % 1e4, p, 4);
  }
  function formatFullYearISO(d, p) {
    var day = d.getDay();
    d = day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
    return pad(d.getFullYear() % 1e4, p, 4);
  }
  function formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
  }
  function formatUTCDayOfMonth(d, p) {
    return pad(d.getUTCDate(), p, 2);
  }
  function formatUTCHour24(d, p) {
    return pad(d.getUTCHours(), p, 2);
  }
  function formatUTCHour12(d, p) {
    return pad(d.getUTCHours() % 12 || 12, p, 2);
  }
  function formatUTCDayOfYear(d, p) {
    return pad(1 + utcDay.count(utcYear(d), d), p, 3);
  }
  function formatUTCMilliseconds(d, p) {
    return pad(d.getUTCMilliseconds(), p, 3);
  }
  function formatUTCMicroseconds(d, p) {
    return formatUTCMilliseconds(d, p) + "000";
  }
  function formatUTCMonthNumber(d, p) {
    return pad(d.getUTCMonth() + 1, p, 2);
  }
  function formatUTCMinutes(d, p) {
    return pad(d.getUTCMinutes(), p, 2);
  }
  function formatUTCSeconds(d, p) {
    return pad(d.getUTCSeconds(), p, 2);
  }
  function formatUTCWeekdayNumberMonday(d) {
    var dow = d.getUTCDay();
    return dow === 0 ? 7 : dow;
  }
  function formatUTCWeekNumberSunday(d, p) {
    return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
  }
  function UTCdISO(d) {
    var day = d.getUTCDay();
    return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
  }
  function formatUTCWeekNumberISO(d, p) {
    d = UTCdISO(d);
    return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
  }
  function formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay();
  }
  function formatUTCWeekNumberMonday(d, p) {
    return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
  }
  function formatUTCYear(d, p) {
    return pad(d.getUTCFullYear() % 100, p, 2);
  }
  function formatUTCYearISO(d, p) {
    d = UTCdISO(d);
    return pad(d.getUTCFullYear() % 100, p, 2);
  }
  function formatUTCFullYear(d, p) {
    return pad(d.getUTCFullYear() % 1e4, p, 4);
  }
  function formatUTCFullYearISO(d, p) {
    var day = d.getUTCDay();
    d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
    return pad(d.getUTCFullYear() % 1e4, p, 4);
  }
  function formatUTCZone() {
    return "+0000";
  }
  function formatLiteralPercent() {
    return "%";
  }
  function formatUnixTimestamp(d) {
    return +d;
  }
  function formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1e3);
  }
  var pads, numberRe, percentRe, requoteRe;
  var init_locale2 = __esm({
    "node_modules/d3-time-format/src/locale.js"() {
      init_src25();
      pads = { "-": "", "_": " ", "0": "0" };
      numberRe = /^\s*\d+/;
      percentRe = /^%/;
      requoteRe = /[\\^$*+?|[\]().{}]/g;
    }
  });

  // node_modules/d3-time-format/src/defaultLocale.js
  function defaultLocale2(definition) {
    locale2 = formatLocale(definition);
    timeFormat = locale2.format;
    timeParse = locale2.parse;
    utcFormat = locale2.utcFormat;
    utcParse = locale2.utcParse;
    return locale2;
  }
  var locale2, timeFormat, timeParse, utcFormat, utcParse;
  var init_defaultLocale2 = __esm({
    "node_modules/d3-time-format/src/defaultLocale.js"() {
      init_locale2();
      defaultLocale2({
        dateTime: "%x, %X",
        date: "%-m/%-d/%Y",
        time: "%-I:%M:%S %p",
        periods: ["AM", "PM"],
        days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
      });
    }
  });

  // node_modules/d3-time-format/src/index.js
  var init_src26 = __esm({
    "node_modules/d3-time-format/src/index.js"() {
      init_defaultLocale2();
    }
  });

  // node_modules/d3-scale/src/index.js
  var init_src27 = __esm({
    "node_modules/d3-scale/src/index.js"() {
    }
  });

  // node_modules/d3-scale-chromatic/src/index.js
  var init_src28 = __esm({
    "node_modules/d3-scale-chromatic/src/index.js"() {
    }
  });

  // node_modules/d3-shape/src/index.js
  var init_src29 = __esm({
    "node_modules/d3-shape/src/index.js"() {
    }
  });

  // node_modules/d3-zoom/src/constant.js
  var init_constant6 = __esm({
    "node_modules/d3-zoom/src/constant.js"() {
    }
  });

  // node_modules/d3-zoom/src/event.js
  var init_event3 = __esm({
    "node_modules/d3-zoom/src/event.js"() {
    }
  });

  // node_modules/d3-zoom/src/transform.js
  function Transform(k, x3, y3) {
    this.k = k;
    this.x = x3;
    this.y = y3;
  }
  function transform(node) {
    while (!node.__zoom)
      if (!(node = node.parentNode))
        return identity2;
    return node.__zoom;
  }
  var identity2;
  var init_transform2 = __esm({
    "node_modules/d3-zoom/src/transform.js"() {
      Transform.prototype = {
        constructor: Transform,
        scale: function(k) {
          return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
        },
        translate: function(x3, y3) {
          return x3 === 0 & y3 === 0 ? this : new Transform(this.k, this.x + this.k * x3, this.y + this.k * y3);
        },
        apply: function(point) {
          return [point[0] * this.k + this.x, point[1] * this.k + this.y];
        },
        applyX: function(x3) {
          return x3 * this.k + this.x;
        },
        applyY: function(y3) {
          return y3 * this.k + this.y;
        },
        invert: function(location) {
          return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
        },
        invertX: function(x3) {
          return (x3 - this.x) / this.k;
        },
        invertY: function(y3) {
          return (y3 - this.y) / this.k;
        },
        rescaleX: function(x3) {
          return x3.copy().domain(x3.range().map(this.invertX, this).map(x3.invert, x3));
        },
        rescaleY: function(y3) {
          return y3.copy().domain(y3.range().map(this.invertY, this).map(y3.invert, y3));
        },
        toString: function() {
          return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
        }
      };
      identity2 = new Transform(1, 0, 0);
      transform.prototype = Transform.prototype;
    }
  });

  // node_modules/d3-zoom/src/noevent.js
  var init_noevent3 = __esm({
    "node_modules/d3-zoom/src/noevent.js"() {
    }
  });

  // node_modules/d3-zoom/src/zoom.js
  var init_zoom = __esm({
    "node_modules/d3-zoom/src/zoom.js"() {
      init_src10();
      init_constant6();
      init_event3();
      init_transform2();
      init_noevent3();
    }
  });

  // node_modules/d3-zoom/src/index.js
  var init_src30 = __esm({
    "node_modules/d3-zoom/src/index.js"() {
      init_zoom();
      init_transform2();
    }
  });

  // node_modules/d3/src/index.js
  var init_src31 = __esm({
    "node_modules/d3/src/index.js"() {
      init_src();
      init_src2();
      init_src11();
      init_src13();
      init_src6();
      init_src14();
      init_src15();
      init_src3();
      init_src5();
      init_src16();
      init_src9();
      init_src17();
      init_src19();
      init_src20();
      init_src21();
      init_src22();
      init_src7();
      init_src12();
      init_src23();
      init_src18();
      init_src24();
      init_src27();
      init_src28();
      init_src4();
      init_src29();
      init_src25();
      init_src26();
      init_src8();
      init_src10();
      init_src30();
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/roslib/src/mixin.js
  var require_mixin = __commonJS({
    "node_modules/roslib/src/mixin.js"(exports, module) {
      module.exports = function(Ros, classes, features) {
        classes.forEach(function(className) {
          var Class = features[className];
          Ros.prototype[className] = function(options) {
            options.ros = this;
            return new Class(options);
          };
        });
      };
    }
  });

  // node_modules/roslib/src/util/shim/WebSocket.js
  var require_WebSocket = __commonJS({
    "node_modules/roslib/src/util/shim/WebSocket.js"(exports, module) {
      module.exports = typeof window !== "undefined" ? window.WebSocket : WebSocket;
    }
  });

  // node_modules/webworkify/index.js
  var require_webworkify = __commonJS({
    "node_modules/webworkify/index.js"(exports, module) {
      var bundleFn = arguments[3];
      var sources = arguments[4];
      var cache = arguments[5];
      var stringify = JSON.stringify;
      module.exports = function(fn, options) {
        var wkey;
        var cacheKeys = Object.keys(cache);
        for (var i = 0, l = cacheKeys.length; i < l; i++) {
          var key = cacheKeys[i];
          var exp = cache[key].exports;
          if (exp === fn || exp && exp.default === fn) {
            wkey = key;
            break;
          }
        }
        if (!wkey) {
          wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
          var wcache = {};
          for (var i = 0, l = cacheKeys.length; i < l; i++) {
            var key = cacheKeys[i];
            wcache[key] = key;
          }
          sources[wkey] = [
            "function(require,module,exports){" + fn + "(self); }",
            wcache
          ];
        }
        var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
        var scache = {};
        scache[wkey] = wkey;
        sources[skey] = [
          "function(require,module,exports){var f = require(" + stringify(wkey) + ");(f.default ? f.default : f)(self);}",
          scache
        ];
        var workerSources = {};
        resolveSources(skey);
        function resolveSources(key2) {
          workerSources[key2] = true;
          for (var depPath in sources[key2][1]) {
            var depKey = sources[key2][1][depPath];
            if (!workerSources[depKey]) {
              resolveSources(depKey);
            }
          }
        }
        var src = "(" + bundleFn + ")({" + Object.keys(workerSources).map(function(key2) {
          return stringify(key2) + ":[" + sources[key2][0] + "," + stringify(sources[key2][1]) + "]";
        }).join(",") + "},{},[" + stringify(skey) + "])";
        var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;
        var blob = new Blob([src], { type: "text/javascript" });
        if (options && options.bare) {
          return blob;
        }
        var workerUrl = URL.createObjectURL(blob);
        var worker = new Worker(workerUrl);
        worker.objectURL = workerUrl;
        return worker;
      };
    }
  });

  // node_modules/webworkify-webpack/index.js
  var require_webworkify_webpack = __commonJS({
    "node_modules/webworkify-webpack/index.js"(exports, module) {
      function webpackBootstrapFunc(modules) {
        var installedModules = {};
        function __webpack_require__2(moduleId) {
          if (installedModules[moduleId])
            return installedModules[moduleId].exports;
          var module2 = installedModules[moduleId] = {
            /******/
            i: moduleId,
            /******/
            l: false,
            /******/
            exports: {}
            /******/
          };
          modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__2);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__2.m = modules;
        __webpack_require__2.c = installedModules;
        __webpack_require__2.i = function(value) {
          return value;
        };
        __webpack_require__2.d = function(exports2, name, getter) {
          if (!__webpack_require__2.o(exports2, name)) {
            Object.defineProperty(exports2, name, {
              /******/
              configurable: false,
              /******/
              enumerable: true,
              /******/
              get: getter
              /******/
            });
          }
        };
        __webpack_require__2.r = function(exports2) {
          Object.defineProperty(exports2, "__esModule", { value: true });
        };
        __webpack_require__2.n = function(module2) {
          var getter = module2 && module2.__esModule ? (
            /******/
            function getDefault() {
              return module2["default"];
            }
          ) : (
            /******/
            function getModuleExports() {
              return module2;
            }
          );
          __webpack_require__2.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__2.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__2.p = "/";
        __webpack_require__2.oe = function(err) {
          console.error(err);
          throw err;
        };
        var f = __webpack_require__2(__webpack_require__2.s = ENTRY_MODULE);
        return f.default || f;
      }
      var moduleNameReqExp = "[\\.|\\-|\\+|\\w|/|@]+";
      var dependencyRegExp = "\\(\\s*(/\\*.*?\\*/)?\\s*.*?(" + moduleNameReqExp + ").*?\\)";
      function quoteRegExp(str) {
        return (str + "").replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
      }
      function isNumeric(n) {
        return !isNaN(1 * n);
      }
      function getModuleDependencies(sources, module2, queueName) {
        var retval = {};
        retval[queueName] = [];
        var fnString = module2.toString();
        var wrapperSignature = fnString.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);
        if (!wrapperSignature)
          return retval;
        var webpackRequireName = wrapperSignature[1];
        var re2 = new RegExp("(\\\\n|\\W)" + quoteRegExp(webpackRequireName) + dependencyRegExp, "g");
        var match;
        while (match = re2.exec(fnString)) {
          if (match[3] === "dll-reference")
            continue;
          retval[queueName].push(match[3]);
        }
        re2 = new RegExp("\\(" + quoteRegExp(webpackRequireName) + '\\("(dll-reference\\s(' + moduleNameReqExp + '))"\\)\\)' + dependencyRegExp, "g");
        while (match = re2.exec(fnString)) {
          if (!sources[match[2]]) {
            retval[queueName].push(match[1]);
            sources[match[2]] = __webpack_require__(match[1]).m;
          }
          retval[match[2]] = retval[match[2]] || [];
          retval[match[2]].push(match[4]);
        }
        var keys = Object.keys(retval);
        for (var i = 0; i < keys.length; i++) {
          for (var j = 0; j < retval[keys[i]].length; j++) {
            if (isNumeric(retval[keys[i]][j])) {
              retval[keys[i]][j] = 1 * retval[keys[i]][j];
            }
          }
        }
        return retval;
      }
      function hasValuesInQueues(queues) {
        var keys = Object.keys(queues);
        return keys.reduce(function(hasValues, key) {
          return hasValues || queues[key].length > 0;
        }, false);
      }
      function getRequiredModules(sources, moduleId) {
        var modulesQueue = {
          main: [moduleId]
        };
        var requiredModules = {
          main: []
        };
        var seenModules = {
          main: {}
        };
        while (hasValuesInQueues(modulesQueue)) {
          var queues = Object.keys(modulesQueue);
          for (var i = 0; i < queues.length; i++) {
            var queueName = queues[i];
            var queue = modulesQueue[queueName];
            var moduleToCheck = queue.pop();
            seenModules[queueName] = seenModules[queueName] || {};
            if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck])
              continue;
            seenModules[queueName][moduleToCheck] = true;
            requiredModules[queueName] = requiredModules[queueName] || [];
            requiredModules[queueName].push(moduleToCheck);
            var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName);
            var newModulesKeys = Object.keys(newModules);
            for (var j = 0; j < newModulesKeys.length; j++) {
              modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || [];
              modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]]);
            }
          }
        }
        return requiredModules;
      }
      module.exports = function(moduleId, options) {
        options = options || {};
        var sources = {
          main: __webpack_modules__
        };
        var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId);
        var src = "";
        Object.keys(requiredModules).filter(function(m2) {
          return m2 !== "main";
        }).forEach(function(module2) {
          var entryModule = 0;
          while (requiredModules[module2][entryModule]) {
            entryModule++;
          }
          requiredModules[module2].push(entryModule);
          sources[module2][entryModule] = "(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })";
          src = src + "var " + module2 + " = (" + webpackBootstrapFunc.toString().replace("ENTRY_MODULE", JSON.stringify(entryModule)) + ")({" + requiredModules[module2].map(function(id2) {
            return "" + JSON.stringify(id2) + ": " + sources[module2][id2].toString();
          }).join(",") + "});\n";
        });
        src = src + "new ((" + webpackBootstrapFunc.toString().replace("ENTRY_MODULE", JSON.stringify(moduleId)) + ")({" + requiredModules.main.map(function(id2) {
          return "" + JSON.stringify(id2) + ": " + sources.main[id2].toString();
        }).join(",") + "}))(self);";
        var blob = new window.Blob([src], { type: "text/javascript" });
        if (options.bare) {
          return blob;
        }
        var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;
        var workerUrl = URL.createObjectURL(blob);
        var worker = new window.Worker(workerUrl);
        worker.objectURL = workerUrl;
        return worker;
      };
    }
  });

  // node_modules/roslib/src/util/workerSocketImpl.js
  var require_workerSocketImpl = __commonJS({
    "node_modules/roslib/src/util/workerSocketImpl.js"(exports, module) {
      var WebSocket2 = WebSocket2 || require_WebSocket();
      module.exports = function(self) {
        var socket = null;
        function handleSocketMessage(ev) {
          var data = ev.data;
          if (data instanceof ArrayBuffer) {
            self.postMessage(data, [data]);
          } else {
            self.postMessage(data);
          }
        }
        function handleSocketControl(ev) {
          self.postMessage({ type: ev.type });
        }
        self.addEventListener("message", function(ev) {
          var data = ev.data;
          if (typeof data === "string") {
            socket.send(data);
          } else {
            if (data.hasOwnProperty("close")) {
              socket.close();
              socket = null;
            } else if (data.hasOwnProperty("uri")) {
              var uri = data.uri;
              socket = new WebSocket2(uri);
              socket.binaryType = "arraybuffer";
              socket.onmessage = handleSocketMessage;
              socket.onclose = handleSocketControl;
              socket.onopen = handleSocketControl;
              socket.onerror = handleSocketControl;
            } else {
              throw "Unknown message to WorkerSocket";
            }
          }
        });
      };
    }
  });

  // node_modules/roslib/src/util/workerSocket.js
  var require_workerSocket = __commonJS({
    "node_modules/roslib/src/util/workerSocket.js"(exports, module) {
      try {
        work = require_webworkify();
      } catch (ReferenceError2) {
        work = require_webworkify_webpack();
      }
      var work;
      var workerSocketImpl = require_workerSocketImpl();
      function WorkerSocket(uri) {
        this.socket_ = work(workerSocketImpl);
        this.socket_.addEventListener("message", this.handleWorkerMessage_.bind(this));
        this.socket_.postMessage({
          uri
        });
      }
      WorkerSocket.prototype.handleWorkerMessage_ = function(ev) {
        var data = ev.data;
        if (data instanceof ArrayBuffer || typeof data === "string") {
          this.onmessage(ev);
        } else {
          var type2 = data.type;
          if (type2 === "close") {
            this.onclose(null);
          } else if (type2 === "open") {
            this.onopen(null);
          } else if (type2 === "error") {
            this.onerror(null);
          } else {
            throw "Unknown message from workersocket";
          }
        }
      };
      WorkerSocket.prototype.send = function(data) {
        this.socket_.postMessage(data);
      };
      WorkerSocket.prototype.close = function() {
        this.socket_.postMessage({
          close: true
        });
      };
      module.exports = WorkerSocket;
    }
  });

  // node_modules/roslib/src/util/shim/canvas.js
  var require_canvas = __commonJS({
    "node_modules/roslib/src/util/shim/canvas.js"(exports, module) {
      module.exports = function Canvas() {
        return document.createElement("canvas");
      };
    }
  });

  // node_modules/roslib/src/util/shim/decompressPng.js
  var require_decompressPng = __commonJS({
    "node_modules/roslib/src/util/shim/decompressPng.js"(exports, module) {
      "use strict";
      var Canvas = require_canvas();
      var Image = Canvas.Image || window.Image;
      function decompressPng(data, callback) {
        var image = new Image();
        image.onload = function() {
          var canvas = new Canvas();
          var context = canvas.getContext("2d");
          canvas.width = image.width;
          canvas.height = image.height;
          context.imageSmoothingEnabled = false;
          context.webkitImageSmoothingEnabled = false;
          context.mozImageSmoothingEnabled = false;
          context.drawImage(image, 0, 0);
          var imageData = context.getImageData(0, 0, image.width, image.height).data;
          var jsonData = "";
          for (var i = 0; i < imageData.length; i += 4) {
            jsonData += String.fromCharCode(imageData[i], imageData[i + 1], imageData[i + 2]);
          }
          callback(JSON.parse(jsonData));
        };
        image.src = "data:image/png;base64," + data;
      }
      module.exports = decompressPng;
    }
  });

  // node_modules/cbor-js/cbor.js
  var require_cbor = __commonJS({
    "node_modules/cbor-js/cbor.js"(exports, module) {
      (function(global, undefined2) {
        "use strict";
        var POW_2_24 = Math.pow(2, -24), POW_2_32 = Math.pow(2, 32), POW_2_53 = Math.pow(2, 53);
        function encode(value) {
          var data = new ArrayBuffer(256);
          var dataView = new DataView(data);
          var lastLength;
          var offset = 0;
          function ensureSpace(length) {
            var newByteLength = data.byteLength;
            var requiredLength = offset + length;
            while (newByteLength < requiredLength)
              newByteLength *= 2;
            if (newByteLength !== data.byteLength) {
              var oldDataView = dataView;
              data = new ArrayBuffer(newByteLength);
              dataView = new DataView(data);
              var uint32count = offset + 3 >> 2;
              for (var i2 = 0; i2 < uint32count; ++i2)
                dataView.setUint32(i2 * 4, oldDataView.getUint32(i2 * 4));
            }
            lastLength = length;
            return dataView;
          }
          function write() {
            offset += lastLength;
          }
          function writeFloat64(value2) {
            write(ensureSpace(8).setFloat64(offset, value2));
          }
          function writeUint8(value2) {
            write(ensureSpace(1).setUint8(offset, value2));
          }
          function writeUint8Array(value2) {
            var dataView2 = ensureSpace(value2.length);
            for (var i2 = 0; i2 < value2.length; ++i2)
              dataView2.setUint8(offset + i2, value2[i2]);
            write();
          }
          function writeUint16(value2) {
            write(ensureSpace(2).setUint16(offset, value2));
          }
          function writeUint32(value2) {
            write(ensureSpace(4).setUint32(offset, value2));
          }
          function writeUint64(value2) {
            var low = value2 % POW_2_32;
            var high = (value2 - low) / POW_2_32;
            var dataView2 = ensureSpace(8);
            dataView2.setUint32(offset, high);
            dataView2.setUint32(offset + 4, low);
            write();
          }
          function writeTypeAndLength(type2, length) {
            if (length < 24) {
              writeUint8(type2 << 5 | length);
            } else if (length < 256) {
              writeUint8(type2 << 5 | 24);
              writeUint8(length);
            } else if (length < 65536) {
              writeUint8(type2 << 5 | 25);
              writeUint16(length);
            } else if (length < 4294967296) {
              writeUint8(type2 << 5 | 26);
              writeUint32(length);
            } else {
              writeUint8(type2 << 5 | 27);
              writeUint64(length);
            }
          }
          function encodeItem(value2) {
            var i2;
            if (value2 === false)
              return writeUint8(244);
            if (value2 === true)
              return writeUint8(245);
            if (value2 === null)
              return writeUint8(246);
            if (value2 === undefined2)
              return writeUint8(247);
            switch (typeof value2) {
              case "number":
                if (Math.floor(value2) === value2) {
                  if (0 <= value2 && value2 <= POW_2_53)
                    return writeTypeAndLength(0, value2);
                  if (-POW_2_53 <= value2 && value2 < 0)
                    return writeTypeAndLength(1, -(value2 + 1));
                }
                writeUint8(251);
                return writeFloat64(value2);
              case "string":
                var utf8data = [];
                for (i2 = 0; i2 < value2.length; ++i2) {
                  var charCode = value2.charCodeAt(i2);
                  if (charCode < 128) {
                    utf8data.push(charCode);
                  } else if (charCode < 2048) {
                    utf8data.push(192 | charCode >> 6);
                    utf8data.push(128 | charCode & 63);
                  } else if (charCode < 55296) {
                    utf8data.push(224 | charCode >> 12);
                    utf8data.push(128 | charCode >> 6 & 63);
                    utf8data.push(128 | charCode & 63);
                  } else {
                    charCode = (charCode & 1023) << 10;
                    charCode |= value2.charCodeAt(++i2) & 1023;
                    charCode += 65536;
                    utf8data.push(240 | charCode >> 18);
                    utf8data.push(128 | charCode >> 12 & 63);
                    utf8data.push(128 | charCode >> 6 & 63);
                    utf8data.push(128 | charCode & 63);
                  }
                }
                writeTypeAndLength(3, utf8data.length);
                return writeUint8Array(utf8data);
              default:
                var length;
                if (Array.isArray(value2)) {
                  length = value2.length;
                  writeTypeAndLength(4, length);
                  for (i2 = 0; i2 < length; ++i2)
                    encodeItem(value2[i2]);
                } else if (value2 instanceof Uint8Array) {
                  writeTypeAndLength(2, value2.length);
                  writeUint8Array(value2);
                } else {
                  var keys = Object.keys(value2);
                  length = keys.length;
                  writeTypeAndLength(5, length);
                  for (i2 = 0; i2 < length; ++i2) {
                    var key = keys[i2];
                    encodeItem(key);
                    encodeItem(value2[key]);
                  }
                }
            }
          }
          encodeItem(value);
          if ("slice" in data)
            return data.slice(0, offset);
          var ret = new ArrayBuffer(offset);
          var retView = new DataView(ret);
          for (var i = 0; i < offset; ++i)
            retView.setUint8(i, dataView.getUint8(i));
          return ret;
        }
        function decode(data, tagger, simpleValue) {
          var dataView = new DataView(data);
          var offset = 0;
          if (typeof tagger !== "function")
            tagger = function(value) {
              return value;
            };
          if (typeof simpleValue !== "function")
            simpleValue = function() {
              return undefined2;
            };
          function read(value, length) {
            offset += length;
            return value;
          }
          function readArrayBuffer(length) {
            return read(new Uint8Array(data, offset, length), length);
          }
          function readFloat16() {
            var tempArrayBuffer = new ArrayBuffer(4);
            var tempDataView = new DataView(tempArrayBuffer);
            var value = readUint16();
            var sign = value & 32768;
            var exponent = value & 31744;
            var fraction = value & 1023;
            if (exponent === 31744)
              exponent = 255 << 10;
            else if (exponent !== 0)
              exponent += 127 - 15 << 10;
            else if (fraction !== 0)
              return fraction * POW_2_24;
            tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);
            return tempDataView.getFloat32(0);
          }
          function readFloat32() {
            return read(dataView.getFloat32(offset), 4);
          }
          function readFloat64() {
            return read(dataView.getFloat64(offset), 8);
          }
          function readUint8() {
            return read(dataView.getUint8(offset), 1);
          }
          function readUint16() {
            return read(dataView.getUint16(offset), 2);
          }
          function readUint32() {
            return read(dataView.getUint32(offset), 4);
          }
          function readUint64() {
            return readUint32() * POW_2_32 + readUint32();
          }
          function readBreak() {
            if (dataView.getUint8(offset) !== 255)
              return false;
            offset += 1;
            return true;
          }
          function readLength(additionalInformation) {
            if (additionalInformation < 24)
              return additionalInformation;
            if (additionalInformation === 24)
              return readUint8();
            if (additionalInformation === 25)
              return readUint16();
            if (additionalInformation === 26)
              return readUint32();
            if (additionalInformation === 27)
              return readUint64();
            if (additionalInformation === 31)
              return -1;
            throw "Invalid length encoding";
          }
          function readIndefiniteStringLength(majorType) {
            var initialByte = readUint8();
            if (initialByte === 255)
              return -1;
            var length = readLength(initialByte & 31);
            if (length < 0 || initialByte >> 5 !== majorType)
              throw "Invalid indefinite length element";
            return length;
          }
          function appendUtf16data(utf16data, length) {
            for (var i = 0; i < length; ++i) {
              var value = readUint8();
              if (value & 128) {
                if (value < 224) {
                  value = (value & 31) << 6 | readUint8() & 63;
                  length -= 1;
                } else if (value < 240) {
                  value = (value & 15) << 12 | (readUint8() & 63) << 6 | readUint8() & 63;
                  length -= 2;
                } else {
                  value = (value & 15) << 18 | (readUint8() & 63) << 12 | (readUint8() & 63) << 6 | readUint8() & 63;
                  length -= 3;
                }
              }
              if (value < 65536) {
                utf16data.push(value);
              } else {
                value -= 65536;
                utf16data.push(55296 | value >> 10);
                utf16data.push(56320 | value & 1023);
              }
            }
          }
          function decodeItem() {
            var initialByte = readUint8();
            var majorType = initialByte >> 5;
            var additionalInformation = initialByte & 31;
            var i;
            var length;
            if (majorType === 7) {
              switch (additionalInformation) {
                case 25:
                  return readFloat16();
                case 26:
                  return readFloat32();
                case 27:
                  return readFloat64();
              }
            }
            length = readLength(additionalInformation);
            if (length < 0 && (majorType < 2 || 6 < majorType))
              throw "Invalid length";
            switch (majorType) {
              case 0:
                return length;
              case 1:
                return -1 - length;
              case 2:
                if (length < 0) {
                  var elements = [];
                  var fullArrayLength = 0;
                  while ((length = readIndefiniteStringLength(majorType)) >= 0) {
                    fullArrayLength += length;
                    elements.push(readArrayBuffer(length));
                  }
                  var fullArray = new Uint8Array(fullArrayLength);
                  var fullArrayOffset = 0;
                  for (i = 0; i < elements.length; ++i) {
                    fullArray.set(elements[i], fullArrayOffset);
                    fullArrayOffset += elements[i].length;
                  }
                  return fullArray;
                }
                return readArrayBuffer(length);
              case 3:
                var utf16data = [];
                if (length < 0) {
                  while ((length = readIndefiniteStringLength(majorType)) >= 0)
                    appendUtf16data(utf16data, length);
                } else
                  appendUtf16data(utf16data, length);
                return String.fromCharCode.apply(null, utf16data);
              case 4:
                var retArray;
                if (length < 0) {
                  retArray = [];
                  while (!readBreak())
                    retArray.push(decodeItem());
                } else {
                  retArray = new Array(length);
                  for (i = 0; i < length; ++i)
                    retArray[i] = decodeItem();
                }
                return retArray;
              case 5:
                var retObject = {};
                for (i = 0; i < length || length < 0 && !readBreak(); ++i) {
                  var key = decodeItem();
                  retObject[key] = decodeItem();
                }
                return retObject;
              case 6:
                return tagger(decodeItem(), length);
              case 7:
                switch (length) {
                  case 20:
                    return false;
                  case 21:
                    return true;
                  case 22:
                    return null;
                  case 23:
                    return undefined2;
                  default:
                    return simpleValue(length);
                }
            }
          }
          var ret = decodeItem();
          if (offset !== data.byteLength)
            throw "Remaining bytes";
          return ret;
        }
        var obj = { encode, decode };
        if (typeof define === "function" && define.amd)
          define("cbor/cbor", obj);
        else if (typeof module !== "undefined" && module.exports)
          module.exports = obj;
        else if (!global.CBOR)
          global.CBOR = obj;
      })(exports);
    }
  });

  // node_modules/roslib/src/util/cborTypedArrayTags.js
  var require_cborTypedArrayTags = __commonJS({
    "node_modules/roslib/src/util/cborTypedArrayTags.js"(exports, module) {
      "use strict";
      var UPPER32 = Math.pow(2, 32);
      var warnedPrecision = false;
      function warnPrecision() {
        if (!warnedPrecision) {
          warnedPrecision = true;
          console.warn("CBOR 64-bit integer array values may lose precision. No further warnings.");
        }
      }
      function decodeUint64LE(bytes) {
        warnPrecision();
        var byteLen = bytes.byteLength;
        var offset = bytes.byteOffset;
        var arrLen = byteLen / 8;
        var buffer = bytes.buffer.slice(offset, offset + byteLen);
        var uint32View = new Uint32Array(buffer);
        var arr = new Array(arrLen);
        for (var i = 0; i < arrLen; i++) {
          var si = i * 2;
          var lo = uint32View[si];
          var hi = uint32View[si + 1];
          arr[i] = lo + UPPER32 * hi;
        }
        return arr;
      }
      function decodeInt64LE(bytes) {
        warnPrecision();
        var byteLen = bytes.byteLength;
        var offset = bytes.byteOffset;
        var arrLen = byteLen / 8;
        var buffer = bytes.buffer.slice(offset, offset + byteLen);
        var uint32View = new Uint32Array(buffer);
        var int32View = new Int32Array(buffer);
        var arr = new Array(arrLen);
        for (var i = 0; i < arrLen; i++) {
          var si = i * 2;
          var lo = uint32View[si];
          var hi = int32View[si + 1];
          arr[i] = lo + UPPER32 * hi;
        }
        return arr;
      }
      function decodeNativeArray(bytes, ArrayType) {
        var byteLen = bytes.byteLength;
        var offset = bytes.byteOffset;
        var buffer = bytes.buffer.slice(offset, offset + byteLen);
        return new ArrayType(buffer);
      }
      var nativeArrayTypes = {
        64: Uint8Array,
        69: Uint16Array,
        70: Uint32Array,
        72: Int8Array,
        77: Int16Array,
        78: Int32Array,
        85: Float32Array,
        86: Float64Array
      };
      var conversionArrayTypes = {
        71: decodeUint64LE,
        79: decodeInt64LE
      };
      function cborTypedArrayTagger(data, tag) {
        if (tag in nativeArrayTypes) {
          var arrayType = nativeArrayTypes[tag];
          return decodeNativeArray(data, arrayType);
        }
        if (tag in conversionArrayTypes) {
          return conversionArrayTypes[tag](data);
        }
        return data;
      }
      if (typeof module !== "undefined" && module.exports) {
        module.exports = cborTypedArrayTagger;
      }
    }
  });

  // node_modules/roslib/src/core/SocketAdapter.js
  var require_SocketAdapter = __commonJS({
    "node_modules/roslib/src/core/SocketAdapter.js"(exports, module) {
      "use strict";
      var decompressPng = require_decompressPng();
      var CBOR = require_cbor();
      var typedArrayTagger = require_cborTypedArrayTags();
      var BSON = null;
      if (typeof bson !== "undefined") {
        BSON = bson().BSON;
      }
      function SocketAdapter(client) {
        var decoder = null;
        if (client.transportOptions.decoder) {
          decoder = client.transportOptions.decoder;
        }
        function handleMessage(message) {
          if (message.op === "publish") {
            client.emit(message.topic, message.msg);
          } else if (message.op === "service_response") {
            client.emit(message.id, message);
          } else if (message.op === "call_service") {
            client.emit(message.service, message);
          } else if (message.op === "status") {
            if (message.id) {
              client.emit("status:" + message.id, message);
            } else {
              client.emit("status", message);
            }
          }
        }
        function handlePng(message, callback) {
          if (message.op === "png") {
            decompressPng(message.data, callback);
          } else {
            callback(message);
          }
        }
        function decodeBSON(data, callback) {
          if (!BSON) {
            throw "Cannot process BSON encoded message without BSON header.";
          }
          var reader = new FileReader();
          reader.onload = function() {
            var uint8Array = new Uint8Array(this.result);
            var msg = BSON.deserialize(uint8Array);
            callback(msg);
          };
          reader.readAsArrayBuffer(data);
        }
        return {
          /**
           * Emit a 'connection' event on WebSocket connection.
           *
           * @param {function} event - The argument to emit with the event.
           * @memberof SocketAdapter
           */
          onopen: function onOpen(event) {
            client.isConnected = true;
            client.emit("connection", event);
          },
          /**
           * Emit a 'close' event on WebSocket disconnection.
           *
           * @param {function} event - The argument to emit with the event.
           * @memberof SocketAdapter
           */
          onclose: function onClose(event) {
            client.isConnected = false;
            client.emit("close", event);
          },
          /**
           * Emit an 'error' event whenever there was an error.
           *
           * @param {function} event - The argument to emit with the event.
           * @memberof SocketAdapter
           */
          onerror: function onError(event) {
            client.emit("error", event);
          },
          /**
           * Parse message responses from rosbridge and send to the appropriate
           * topic, service, or param.
           *
           * @param {Object} data - The raw JSON message from rosbridge.
           * @memberof SocketAdapter
           */
          onmessage: function onMessage(data) {
            if (decoder) {
              decoder(data.data, function(message2) {
                handleMessage(message2);
              });
            } else if (typeof Blob !== "undefined" && data.data instanceof Blob) {
              decodeBSON(data.data, function(message2) {
                handlePng(message2, handleMessage);
              });
            } else if (data.data instanceof ArrayBuffer) {
              var decoded = CBOR.decode(data.data, typedArrayTagger);
              handleMessage(decoded);
            } else {
              var message = JSON.parse(typeof data === "string" ? data : data.data);
              handlePng(message, handleMessage);
            }
          }
        };
      }
      module.exports = SocketAdapter;
    }
  });

  // node_modules/roslib/src/core/ServiceResponse.js
  var require_ServiceResponse = __commonJS({
    "node_modules/roslib/src/core/ServiceResponse.js"(exports, module) {
      var assign = require_object_assign();
      function ServiceResponse(values) {
        assign(this, values);
      }
      module.exports = ServiceResponse;
    }
  });

  // node_modules/roslib/src/core/ServiceRequest.js
  var require_ServiceRequest = __commonJS({
    "node_modules/roslib/src/core/ServiceRequest.js"(exports, module) {
      var assign = require_object_assign();
      function ServiceRequest(values) {
        assign(this, values);
      }
      module.exports = ServiceRequest;
    }
  });

  // node_modules/eventemitter2/lib/eventemitter2.js
  var require_eventemitter2 = __commonJS({
    "node_modules/eventemitter2/lib/eventemitter2.js"(exports, module) {
      !function(undefined2) {
        var hasOwnProperty = Object.hasOwnProperty;
        var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
        var defaultMaxListeners = 10;
        var nextTickSupported = typeof process == "object" && typeof process.nextTick == "function";
        var symbolsSupported = typeof Symbol === "function";
        var reflectSupported = typeof Reflect === "object";
        var setImmediateSupported = typeof setImmediate === "function";
        var _setImmediate = setImmediateSupported ? setImmediate : setTimeout;
        var ownKeys = symbolsSupported ? reflectSupported && typeof Reflect.ownKeys === "function" ? Reflect.ownKeys : function(obj) {
          var arr = Object.getOwnPropertyNames(obj);
          arr.push.apply(arr, Object.getOwnPropertySymbols(obj));
          return arr;
        } : Object.keys;
        function init2() {
          this._events = {};
          if (this._conf) {
            configure.call(this, this._conf);
          }
        }
        function configure(conf) {
          if (conf) {
            this._conf = conf;
            conf.delimiter && (this.delimiter = conf.delimiter);
            if (conf.maxListeners !== undefined2) {
              this._maxListeners = conf.maxListeners;
            }
            conf.wildcard && (this.wildcard = conf.wildcard);
            conf.newListener && (this._newListener = conf.newListener);
            conf.removeListener && (this._removeListener = conf.removeListener);
            conf.verboseMemoryLeak && (this.verboseMemoryLeak = conf.verboseMemoryLeak);
            conf.ignoreErrors && (this.ignoreErrors = conf.ignoreErrors);
            if (this.wildcard) {
              this.listenerTree = {};
            }
          }
        }
        function logPossibleMemoryLeak(count, eventName) {
          var errorMsg = "(node) warning: possible EventEmitter memory leak detected. " + count + " listeners added. Use emitter.setMaxListeners() to increase limit.";
          if (this.verboseMemoryLeak) {
            errorMsg += " Event name: " + eventName + ".";
          }
          if (typeof process !== "undefined" && process.emitWarning) {
            var e = new Error(errorMsg);
            e.name = "MaxListenersExceededWarning";
            e.emitter = this;
            e.count = count;
            process.emitWarning(e);
          } else {
            console.error(errorMsg);
            if (console.trace) {
              console.trace();
            }
          }
        }
        var toArray = function(a2, b, c2) {
          var n = arguments.length;
          switch (n) {
            case 0:
              return [];
            case 1:
              return [a2];
            case 2:
              return [a2, b];
            case 3:
              return [a2, b, c2];
            default:
              var arr = new Array(n);
              while (n--) {
                arr[n] = arguments[n];
              }
              return arr;
          }
        };
        function toObject(keys, values) {
          var obj = {};
          var key;
          var len = keys.length;
          var valuesCount = values ? values.length : 0;
          for (var i = 0; i < len; i++) {
            key = keys[i];
            obj[key] = i < valuesCount ? values[i] : undefined2;
          }
          return obj;
        }
        function TargetObserver(emitter, target, options) {
          this._emitter = emitter;
          this._target = target;
          this._listeners = {};
          this._listenersCount = 0;
          var on, off;
          if (options.on || options.off) {
            on = options.on;
            off = options.off;
          }
          if (target.addEventListener) {
            on = target.addEventListener;
            off = target.removeEventListener;
          } else if (target.addListener) {
            on = target.addListener;
            off = target.removeListener;
          } else if (target.on) {
            on = target.on;
            off = target.off;
          }
          if (!on && !off) {
            throw Error("target does not implement any known event API");
          }
          if (typeof on !== "function") {
            throw TypeError("on method must be a function");
          }
          if (typeof off !== "function") {
            throw TypeError("off method must be a function");
          }
          this._on = on;
          this._off = off;
          var _observers = emitter._observers;
          if (_observers) {
            _observers.push(this);
          } else {
            emitter._observers = [this];
          }
        }
        Object.assign(TargetObserver.prototype, {
          subscribe: function(event, localEvent, reducer) {
            var observer = this;
            var target = this._target;
            var emitter = this._emitter;
            var listeners = this._listeners;
            var handler = function() {
              var args = toArray.apply(null, arguments);
              var eventObj = {
                data: args,
                name: localEvent,
                original: event
              };
              if (reducer) {
                var result = reducer.call(target, eventObj);
                if (result !== false) {
                  emitter.emit.apply(emitter, [eventObj.name].concat(args));
                }
                return;
              }
              emitter.emit.apply(emitter, [localEvent].concat(args));
            };
            if (listeners[event]) {
              throw Error("Event '" + event + "' is already listening");
            }
            this._listenersCount++;
            if (emitter._newListener && emitter._removeListener && !observer._onNewListener) {
              this._onNewListener = function(_event) {
                if (_event === localEvent && listeners[event] === null) {
                  listeners[event] = handler;
                  observer._on.call(target, event, handler);
                }
              };
              emitter.on("newListener", this._onNewListener);
              this._onRemoveListener = function(_event) {
                if (_event === localEvent && !emitter.hasListeners(_event) && listeners[event]) {
                  listeners[event] = null;
                  observer._off.call(target, event, handler);
                }
              };
              listeners[event] = null;
              emitter.on("removeListener", this._onRemoveListener);
            } else {
              listeners[event] = handler;
              observer._on.call(target, event, handler);
            }
          },
          unsubscribe: function(event) {
            var observer = this;
            var listeners = this._listeners;
            var emitter = this._emitter;
            var handler;
            var events;
            var off = this._off;
            var target = this._target;
            var i;
            if (event && typeof event !== "string") {
              throw TypeError("event must be a string");
            }
            function clearRefs() {
              if (observer._onNewListener) {
                emitter.off("newListener", observer._onNewListener);
                emitter.off("removeListener", observer._onRemoveListener);
                observer._onNewListener = null;
                observer._onRemoveListener = null;
              }
              var index2 = findTargetIndex.call(emitter, observer);
              emitter._observers.splice(index2, 1);
            }
            if (event) {
              handler = listeners[event];
              if (!handler)
                return;
              off.call(target, event, handler);
              delete listeners[event];
              if (!--this._listenersCount) {
                clearRefs();
              }
            } else {
              events = ownKeys(listeners);
              i = events.length;
              while (i-- > 0) {
                event = events[i];
                off.call(target, event, listeners[event]);
              }
              this._listeners = {};
              this._listenersCount = 0;
              clearRefs();
            }
          }
        });
        function resolveOptions(options, schema, reducers, allowUnknown) {
          var computedOptions = Object.assign({}, schema);
          if (!options)
            return computedOptions;
          if (typeof options !== "object") {
            throw TypeError("options must be an object");
          }
          var keys = Object.keys(options);
          var length = keys.length;
          var option, value;
          var reducer;
          function reject(reason) {
            throw Error('Invalid "' + option + '" option value' + (reason ? ". Reason: " + reason : ""));
          }
          for (var i = 0; i < length; i++) {
            option = keys[i];
            if (!allowUnknown && !hasOwnProperty.call(schema, option)) {
              throw Error('Unknown "' + option + '" option');
            }
            value = options[option];
            if (value !== undefined2) {
              reducer = reducers[option];
              computedOptions[option] = reducer ? reducer(value, reject) : value;
            }
          }
          return computedOptions;
        }
        function constructorReducer(value, reject) {
          if (typeof value !== "function" || !value.hasOwnProperty("prototype")) {
            reject("value must be a constructor");
          }
          return value;
        }
        function makeTypeReducer(types) {
          var message = "value must be type of " + types.join("|");
          var len = types.length;
          var firstType = types[0];
          var secondType = types[1];
          if (len === 1) {
            return function(v, reject) {
              if (typeof v === firstType) {
                return v;
              }
              reject(message);
            };
          }
          if (len === 2) {
            return function(v, reject) {
              var kind = typeof v;
              if (kind === firstType || kind === secondType)
                return v;
              reject(message);
            };
          }
          return function(v, reject) {
            var kind = typeof v;
            var i = len;
            while (i-- > 0) {
              if (kind === types[i])
                return v;
            }
            reject(message);
          };
        }
        var functionReducer = makeTypeReducer(["function"]);
        var objectFunctionReducer = makeTypeReducer(["object", "function"]);
        function makeCancelablePromise(Promise2, executor, options) {
          var isCancelable;
          var callbacks;
          var timer2 = 0;
          var subscriptionClosed;
          var promise = new Promise2(function(resolve, reject, onCancel) {
            options = resolveOptions(options, {
              timeout: 0,
              overload: false
            }, {
              timeout: function(value, reject2) {
                value *= 1;
                if (typeof value !== "number" || value < 0 || !Number.isFinite(value)) {
                  reject2("timeout must be a positive number");
                }
                return value;
              }
            });
            isCancelable = !options.overload && typeof Promise2.prototype.cancel === "function" && typeof onCancel === "function";
            function cleanup() {
              if (callbacks) {
                callbacks = null;
              }
              if (timer2) {
                clearTimeout(timer2);
                timer2 = 0;
              }
            }
            var _resolve = function(value) {
              cleanup();
              resolve(value);
            };
            var _reject = function(err) {
              cleanup();
              reject(err);
            };
            if (isCancelable) {
              executor(_resolve, _reject, onCancel);
            } else {
              callbacks = [function(reason) {
                _reject(reason || Error("canceled"));
              }];
              executor(_resolve, _reject, function(cb) {
                if (subscriptionClosed) {
                  throw Error("Unable to subscribe on cancel event asynchronously");
                }
                if (typeof cb !== "function") {
                  throw TypeError("onCancel callback must be a function");
                }
                callbacks.push(cb);
              });
              subscriptionClosed = true;
            }
            if (options.timeout > 0) {
              timer2 = setTimeout(function() {
                var reason = Error("timeout");
                reason.code = "ETIMEDOUT";
                timer2 = 0;
                promise.cancel(reason);
                reject(reason);
              }, options.timeout);
            }
          });
          if (!isCancelable) {
            promise.cancel = function(reason) {
              if (!callbacks) {
                return;
              }
              var length = callbacks.length;
              for (var i = 1; i < length; i++) {
                callbacks[i](reason);
              }
              callbacks[0](reason);
              callbacks = null;
            };
          }
          return promise;
        }
        function findTargetIndex(observer) {
          var observers = this._observers;
          if (!observers) {
            return -1;
          }
          var len = observers.length;
          for (var i = 0; i < len; i++) {
            if (observers[i]._target === observer)
              return i;
          }
          return -1;
        }
        function searchListenerTree(handlers, type2, tree, i, typeLength) {
          if (!tree) {
            return null;
          }
          if (i === 0) {
            var kind = typeof type2;
            if (kind === "string") {
              var ns, n, l = 0, j = 0, delimiter = this.delimiter, dl = delimiter.length;
              if ((n = type2.indexOf(delimiter)) !== -1) {
                ns = new Array(5);
                do {
                  ns[l++] = type2.slice(j, n);
                  j = n + dl;
                } while ((n = type2.indexOf(delimiter, j)) !== -1);
                ns[l++] = type2.slice(j);
                type2 = ns;
                typeLength = l;
              } else {
                type2 = [type2];
                typeLength = 1;
              }
            } else if (kind === "object") {
              typeLength = type2.length;
            } else {
              type2 = [type2];
              typeLength = 1;
            }
          }
          var listeners = null, branch, xTree, xxTree, isolatedBranch, endReached, currentType = type2[i], nextType = type2[i + 1], branches, _listeners;
          if (i === typeLength) {
            if (tree._listeners) {
              if (typeof tree._listeners === "function") {
                handlers && handlers.push(tree._listeners);
                listeners = [tree];
              } else {
                handlers && handlers.push.apply(handlers, tree._listeners);
                listeners = [tree];
              }
            }
          } else {
            if (currentType === "*") {
              branches = ownKeys(tree);
              n = branches.length;
              while (n-- > 0) {
                branch = branches[n];
                if (branch !== "_listeners") {
                  _listeners = searchListenerTree(handlers, type2, tree[branch], i + 1, typeLength);
                  if (_listeners) {
                    if (listeners) {
                      listeners.push.apply(listeners, _listeners);
                    } else {
                      listeners = _listeners;
                    }
                  }
                }
              }
              return listeners;
            } else if (currentType === "**") {
              endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === "*";
              if (endReached && tree._listeners) {
                listeners = searchListenerTree(handlers, type2, tree, typeLength, typeLength);
              }
              branches = ownKeys(tree);
              n = branches.length;
              while (n-- > 0) {
                branch = branches[n];
                if (branch !== "_listeners") {
                  if (branch === "*" || branch === "**") {
                    if (tree[branch]._listeners && !endReached) {
                      _listeners = searchListenerTree(handlers, type2, tree[branch], typeLength, typeLength);
                      if (_listeners) {
                        if (listeners) {
                          listeners.push.apply(listeners, _listeners);
                        } else {
                          listeners = _listeners;
                        }
                      }
                    }
                    _listeners = searchListenerTree(handlers, type2, tree[branch], i, typeLength);
                  } else if (branch === nextType) {
                    _listeners = searchListenerTree(handlers, type2, tree[branch], i + 2, typeLength);
                  } else {
                    _listeners = searchListenerTree(handlers, type2, tree[branch], i, typeLength);
                  }
                  if (_listeners) {
                    if (listeners) {
                      listeners.push.apply(listeners, _listeners);
                    } else {
                      listeners = _listeners;
                    }
                  }
                }
              }
              return listeners;
            } else if (tree[currentType]) {
              listeners = searchListenerTree(handlers, type2, tree[currentType], i + 1, typeLength);
            }
          }
          xTree = tree["*"];
          if (xTree) {
            searchListenerTree(handlers, type2, xTree, i + 1, typeLength);
          }
          xxTree = tree["**"];
          if (xxTree) {
            if (i < typeLength) {
              if (xxTree._listeners) {
                searchListenerTree(handlers, type2, xxTree, typeLength, typeLength);
              }
              branches = ownKeys(xxTree);
              n = branches.length;
              while (n-- > 0) {
                branch = branches[n];
                if (branch !== "_listeners") {
                  if (branch === nextType) {
                    searchListenerTree(handlers, type2, xxTree[branch], i + 2, typeLength);
                  } else if (branch === currentType) {
                    searchListenerTree(handlers, type2, xxTree[branch], i + 1, typeLength);
                  } else {
                    isolatedBranch = {};
                    isolatedBranch[branch] = xxTree[branch];
                    searchListenerTree(handlers, type2, { "**": isolatedBranch }, i + 1, typeLength);
                  }
                }
              }
            } else if (xxTree._listeners) {
              searchListenerTree(handlers, type2, xxTree, typeLength, typeLength);
            } else if (xxTree["*"] && xxTree["*"]._listeners) {
              searchListenerTree(handlers, type2, xxTree["*"], typeLength, typeLength);
            }
          }
          return listeners;
        }
        function growListenerTree(type2, listener, prepend) {
          var len = 0, j = 0, i, delimiter = this.delimiter, dl = delimiter.length, ns;
          if (typeof type2 === "string") {
            if ((i = type2.indexOf(delimiter)) !== -1) {
              ns = new Array(5);
              do {
                ns[len++] = type2.slice(j, i);
                j = i + dl;
              } while ((i = type2.indexOf(delimiter, j)) !== -1);
              ns[len++] = type2.slice(j);
            } else {
              ns = [type2];
              len = 1;
            }
          } else {
            ns = type2;
            len = type2.length;
          }
          if (len > 1) {
            for (i = 0; i + 1 < len; i++) {
              if (ns[i] === "**" && ns[i + 1] === "**") {
                return;
              }
            }
          }
          var tree = this.listenerTree, name;
          for (i = 0; i < len; i++) {
            name = ns[i];
            tree = tree[name] || (tree[name] = {});
            if (i === len - 1) {
              if (!tree._listeners) {
                tree._listeners = listener;
              } else {
                if (typeof tree._listeners === "function") {
                  tree._listeners = [tree._listeners];
                }
                if (prepend) {
                  tree._listeners.unshift(listener);
                } else {
                  tree._listeners.push(listener);
                }
                if (!tree._listeners.warned && this._maxListeners > 0 && tree._listeners.length > this._maxListeners) {
                  tree._listeners.warned = true;
                  logPossibleMemoryLeak.call(this, tree._listeners.length, name);
                }
              }
              return true;
            }
          }
          return true;
        }
        function collectTreeEvents(tree, events, root2, asArray) {
          var branches = ownKeys(tree);
          var i = branches.length;
          var branch, branchName, path;
          var hasListeners = tree["_listeners"];
          var isArrayPath;
          while (i-- > 0) {
            branchName = branches[i];
            branch = tree[branchName];
            if (branchName === "_listeners") {
              path = root2;
            } else {
              path = root2 ? root2.concat(branchName) : [branchName];
            }
            isArrayPath = asArray || typeof branchName === "symbol";
            hasListeners && events.push(isArrayPath ? path : path.join(this.delimiter));
            if (typeof branch === "object") {
              collectTreeEvents.call(this, branch, events, path, isArrayPath);
            }
          }
          return events;
        }
        function recursivelyGarbageCollect(root2) {
          var keys = ownKeys(root2);
          var i = keys.length;
          var obj, key, flag;
          while (i-- > 0) {
            key = keys[i];
            obj = root2[key];
            if (obj) {
              flag = true;
              if (key !== "_listeners" && !recursivelyGarbageCollect(obj)) {
                delete root2[key];
              }
            }
          }
          return flag;
        }
        function Listener(emitter, event, listener) {
          this.emitter = emitter;
          this.event = event;
          this.listener = listener;
        }
        Listener.prototype.off = function() {
          this.emitter.off(this.event, this.listener);
          return this;
        };
        function setupListener(event, listener, options) {
          if (options === true) {
            promisify = true;
          } else if (options === false) {
            async = true;
          } else {
            if (!options || typeof options !== "object") {
              throw TypeError("options should be an object or true");
            }
            var async = options.async;
            var promisify = options.promisify;
            var nextTick = options.nextTick;
            var objectify = options.objectify;
          }
          if (async || nextTick || promisify) {
            var _listener = listener;
            var _origin = listener._origin || listener;
            if (nextTick && !nextTickSupported) {
              throw Error("process.nextTick is not supported");
            }
            if (promisify === undefined2) {
              promisify = listener.constructor.name === "AsyncFunction";
            }
            listener = function() {
              var args = arguments;
              var context = this;
              var event2 = this.event;
              return promisify ? nextTick ? Promise.resolve() : new Promise(function(resolve) {
                _setImmediate(resolve);
              }).then(function() {
                context.event = event2;
                return _listener.apply(context, args);
              }) : (nextTick ? process.nextTick : _setImmediate)(function() {
                context.event = event2;
                _listener.apply(context, args);
              });
            };
            listener._async = true;
            listener._origin = _origin;
          }
          return [listener, objectify ? new Listener(this, event, listener) : this];
        }
        function EventEmitter(conf) {
          this._events = {};
          this._newListener = false;
          this._removeListener = false;
          this.verboseMemoryLeak = false;
          configure.call(this, conf);
        }
        EventEmitter.EventEmitter2 = EventEmitter;
        EventEmitter.prototype.listenTo = function(target, events, options) {
          if (typeof target !== "object") {
            throw TypeError("target musts be an object");
          }
          var emitter = this;
          options = resolveOptions(options, {
            on: undefined2,
            off: undefined2,
            reducers: undefined2
          }, {
            on: functionReducer,
            off: functionReducer,
            reducers: objectFunctionReducer
          });
          function listen(events2) {
            if (typeof events2 !== "object") {
              throw TypeError("events must be an object");
            }
            var reducers = options.reducers;
            var index2 = findTargetIndex.call(emitter, target);
            var observer;
            if (index2 === -1) {
              observer = new TargetObserver(emitter, target, options);
            } else {
              observer = emitter._observers[index2];
            }
            var keys = ownKeys(events2);
            var len = keys.length;
            var event;
            var isSingleReducer = typeof reducers === "function";
            for (var i = 0; i < len; i++) {
              event = keys[i];
              observer.subscribe(
                event,
                events2[event] || event,
                isSingleReducer ? reducers : reducers && reducers[event]
              );
            }
          }
          isArray(events) ? listen(toObject(events)) : typeof events === "string" ? listen(toObject(events.split(/\s+/))) : listen(events);
          return this;
        };
        EventEmitter.prototype.stopListeningTo = function(target, event) {
          var observers = this._observers;
          if (!observers) {
            return false;
          }
          var i = observers.length;
          var observer;
          var matched = false;
          if (target && typeof target !== "object") {
            throw TypeError("target should be an object");
          }
          while (i-- > 0) {
            observer = observers[i];
            if (!target || observer._target === target) {
              observer.unsubscribe(event);
              matched = true;
            }
          }
          return matched;
        };
        EventEmitter.prototype.delimiter = ".";
        EventEmitter.prototype.setMaxListeners = function(n) {
          if (n !== undefined2) {
            this._maxListeners = n;
            if (!this._conf)
              this._conf = {};
            this._conf.maxListeners = n;
          }
        };
        EventEmitter.prototype.getMaxListeners = function() {
          return this._maxListeners;
        };
        EventEmitter.prototype.event = "";
        EventEmitter.prototype.once = function(event, fn, options) {
          return this._once(event, fn, false, options);
        };
        EventEmitter.prototype.prependOnceListener = function(event, fn, options) {
          return this._once(event, fn, true, options);
        };
        EventEmitter.prototype._once = function(event, fn, prepend, options) {
          return this._many(event, 1, fn, prepend, options);
        };
        EventEmitter.prototype.many = function(event, ttl, fn, options) {
          return this._many(event, ttl, fn, false, options);
        };
        EventEmitter.prototype.prependMany = function(event, ttl, fn, options) {
          return this._many(event, ttl, fn, true, options);
        };
        EventEmitter.prototype._many = function(event, ttl, fn, prepend, options) {
          var self = this;
          if (typeof fn !== "function") {
            throw new Error("many only accepts instances of Function");
          }
          function listener() {
            if (--ttl === 0) {
              self.off(event, listener);
            }
            return fn.apply(this, arguments);
          }
          listener._origin = fn;
          return this._on(event, listener, prepend, options);
        };
        EventEmitter.prototype.emit = function() {
          if (!this._events && !this._all) {
            return false;
          }
          this._events || init2.call(this);
          var type2 = arguments[0], ns, wildcard = this.wildcard;
          var args, l, i, j, containsSymbol;
          if (type2 === "newListener" && !this._newListener) {
            if (!this._events.newListener) {
              return false;
            }
          }
          if (wildcard) {
            ns = type2;
            if (type2 !== "newListener" && type2 !== "removeListener") {
              if (typeof type2 === "object") {
                l = type2.length;
                if (symbolsSupported) {
                  for (i = 0; i < l; i++) {
                    if (typeof type2[i] === "symbol") {
                      containsSymbol = true;
                      break;
                    }
                  }
                }
                if (!containsSymbol) {
                  type2 = type2.join(this.delimiter);
                }
              }
            }
          }
          var al = arguments.length;
          var handler;
          if (this._all && this._all.length) {
            handler = this._all.slice();
            for (i = 0, l = handler.length; i < l; i++) {
              this.event = type2;
              switch (al) {
                case 1:
                  handler[i].call(this, type2);
                  break;
                case 2:
                  handler[i].call(this, type2, arguments[1]);
                  break;
                case 3:
                  handler[i].call(this, type2, arguments[1], arguments[2]);
                  break;
                default:
                  handler[i].apply(this, arguments);
              }
            }
          }
          if (wildcard) {
            handler = [];
            searchListenerTree.call(this, handler, ns, this.listenerTree, 0, l);
          } else {
            handler = this._events[type2];
            if (typeof handler === "function") {
              this.event = type2;
              switch (al) {
                case 1:
                  handler.call(this);
                  break;
                case 2:
                  handler.call(this, arguments[1]);
                  break;
                case 3:
                  handler.call(this, arguments[1], arguments[2]);
                  break;
                default:
                  args = new Array(al - 1);
                  for (j = 1; j < al; j++)
                    args[j - 1] = arguments[j];
                  handler.apply(this, args);
              }
              return true;
            } else if (handler) {
              handler = handler.slice();
            }
          }
          if (handler && handler.length) {
            if (al > 3) {
              args = new Array(al - 1);
              for (j = 1; j < al; j++)
                args[j - 1] = arguments[j];
            }
            for (i = 0, l = handler.length; i < l; i++) {
              this.event = type2;
              switch (al) {
                case 1:
                  handler[i].call(this);
                  break;
                case 2:
                  handler[i].call(this, arguments[1]);
                  break;
                case 3:
                  handler[i].call(this, arguments[1], arguments[2]);
                  break;
                default:
                  handler[i].apply(this, args);
              }
            }
            return true;
          } else if (!this.ignoreErrors && !this._all && type2 === "error") {
            if (arguments[1] instanceof Error) {
              throw arguments[1];
            } else {
              throw new Error("Uncaught, unspecified 'error' event.");
            }
          }
          return !!this._all;
        };
        EventEmitter.prototype.emitAsync = function() {
          if (!this._events && !this._all) {
            return false;
          }
          this._events || init2.call(this);
          var type2 = arguments[0], wildcard = this.wildcard, ns, containsSymbol;
          var args, l, i, j;
          if (type2 === "newListener" && !this._newListener) {
            if (!this._events.newListener) {
              return Promise.resolve([false]);
            }
          }
          if (wildcard) {
            ns = type2;
            if (type2 !== "newListener" && type2 !== "removeListener") {
              if (typeof type2 === "object") {
                l = type2.length;
                if (symbolsSupported) {
                  for (i = 0; i < l; i++) {
                    if (typeof type2[i] === "symbol") {
                      containsSymbol = true;
                      break;
                    }
                  }
                }
                if (!containsSymbol) {
                  type2 = type2.join(this.delimiter);
                }
              }
            }
          }
          var promises = [];
          var al = arguments.length;
          var handler;
          if (this._all) {
            for (i = 0, l = this._all.length; i < l; i++) {
              this.event = type2;
              switch (al) {
                case 1:
                  promises.push(this._all[i].call(this, type2));
                  break;
                case 2:
                  promises.push(this._all[i].call(this, type2, arguments[1]));
                  break;
                case 3:
                  promises.push(this._all[i].call(this, type2, arguments[1], arguments[2]));
                  break;
                default:
                  promises.push(this._all[i].apply(this, arguments));
              }
            }
          }
          if (wildcard) {
            handler = [];
            searchListenerTree.call(this, handler, ns, this.listenerTree, 0);
          } else {
            handler = this._events[type2];
          }
          if (typeof handler === "function") {
            this.event = type2;
            switch (al) {
              case 1:
                promises.push(handler.call(this));
                break;
              case 2:
                promises.push(handler.call(this, arguments[1]));
                break;
              case 3:
                promises.push(handler.call(this, arguments[1], arguments[2]));
                break;
              default:
                args = new Array(al - 1);
                for (j = 1; j < al; j++)
                  args[j - 1] = arguments[j];
                promises.push(handler.apply(this, args));
            }
          } else if (handler && handler.length) {
            handler = handler.slice();
            if (al > 3) {
              args = new Array(al - 1);
              for (j = 1; j < al; j++)
                args[j - 1] = arguments[j];
            }
            for (i = 0, l = handler.length; i < l; i++) {
              this.event = type2;
              switch (al) {
                case 1:
                  promises.push(handler[i].call(this));
                  break;
                case 2:
                  promises.push(handler[i].call(this, arguments[1]));
                  break;
                case 3:
                  promises.push(handler[i].call(this, arguments[1], arguments[2]));
                  break;
                default:
                  promises.push(handler[i].apply(this, args));
              }
            }
          } else if (!this.ignoreErrors && !this._all && type2 === "error") {
            if (arguments[1] instanceof Error) {
              return Promise.reject(arguments[1]);
            } else {
              return Promise.reject("Uncaught, unspecified 'error' event.");
            }
          }
          return Promise.all(promises);
        };
        EventEmitter.prototype.on = function(type2, listener, options) {
          return this._on(type2, listener, false, options);
        };
        EventEmitter.prototype.prependListener = function(type2, listener, options) {
          return this._on(type2, listener, true, options);
        };
        EventEmitter.prototype.onAny = function(fn) {
          return this._onAny(fn, false);
        };
        EventEmitter.prototype.prependAny = function(fn) {
          return this._onAny(fn, true);
        };
        EventEmitter.prototype.addListener = EventEmitter.prototype.on;
        EventEmitter.prototype._onAny = function(fn, prepend) {
          if (typeof fn !== "function") {
            throw new Error("onAny only accepts instances of Function");
          }
          if (!this._all) {
            this._all = [];
          }
          if (prepend) {
            this._all.unshift(fn);
          } else {
            this._all.push(fn);
          }
          return this;
        };
        EventEmitter.prototype._on = function(type2, listener, prepend, options) {
          if (typeof type2 === "function") {
            this._onAny(type2, listener);
            return this;
          }
          if (typeof listener !== "function") {
            throw new Error("on only accepts instances of Function");
          }
          this._events || init2.call(this);
          var returnValue = this, temp;
          if (options !== undefined2) {
            temp = setupListener.call(this, type2, listener, options);
            listener = temp[0];
            returnValue = temp[1];
          }
          if (this._newListener) {
            this.emit("newListener", type2, listener);
          }
          if (this.wildcard) {
            growListenerTree.call(this, type2, listener, prepend);
            return returnValue;
          }
          if (!this._events[type2]) {
            this._events[type2] = listener;
          } else {
            if (typeof this._events[type2] === "function") {
              this._events[type2] = [this._events[type2]];
            }
            if (prepend) {
              this._events[type2].unshift(listener);
            } else {
              this._events[type2].push(listener);
            }
            if (!this._events[type2].warned && this._maxListeners > 0 && this._events[type2].length > this._maxListeners) {
              this._events[type2].warned = true;
              logPossibleMemoryLeak.call(this, this._events[type2].length, type2);
            }
          }
          return returnValue;
        };
        EventEmitter.prototype.off = function(type2, listener) {
          if (typeof listener !== "function") {
            throw new Error("removeListener only takes instances of Function");
          }
          var handlers, leafs = [];
          if (this.wildcard) {
            var ns = typeof type2 === "string" ? type2.split(this.delimiter) : type2.slice();
            leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);
            if (!leafs)
              return this;
          } else {
            if (!this._events[type2])
              return this;
            handlers = this._events[type2];
            leafs.push({ _listeners: handlers });
          }
          for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {
            var leaf = leafs[iLeaf];
            handlers = leaf._listeners;
            if (isArray(handlers)) {
              var position = -1;
              for (var i = 0, length = handlers.length; i < length; i++) {
                if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {
                  position = i;
                  break;
                }
              }
              if (position < 0) {
                continue;
              }
              if (this.wildcard) {
                leaf._listeners.splice(position, 1);
              } else {
                this._events[type2].splice(position, 1);
              }
              if (handlers.length === 0) {
                if (this.wildcard) {
                  delete leaf._listeners;
                } else {
                  delete this._events[type2];
                }
              }
              if (this._removeListener)
                this.emit("removeListener", type2, listener);
              return this;
            } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {
              if (this.wildcard) {
                delete leaf._listeners;
              } else {
                delete this._events[type2];
              }
              if (this._removeListener)
                this.emit("removeListener", type2, listener);
            }
          }
          this.listenerTree && recursivelyGarbageCollect(this.listenerTree);
          return this;
        };
        EventEmitter.prototype.offAny = function(fn) {
          var i = 0, l = 0, fns;
          if (fn && this._all && this._all.length > 0) {
            fns = this._all;
            for (i = 0, l = fns.length; i < l; i++) {
              if (fn === fns[i]) {
                fns.splice(i, 1);
                if (this._removeListener)
                  this.emit("removeListenerAny", fn);
                return this;
              }
            }
          } else {
            fns = this._all;
            if (this._removeListener) {
              for (i = 0, l = fns.length; i < l; i++)
                this.emit("removeListenerAny", fns[i]);
            }
            this._all = [];
          }
          return this;
        };
        EventEmitter.prototype.removeListener = EventEmitter.prototype.off;
        EventEmitter.prototype.removeAllListeners = function(type2) {
          if (type2 === undefined2) {
            !this._events || init2.call(this);
            return this;
          }
          if (this.wildcard) {
            var leafs = searchListenerTree.call(this, null, type2, this.listenerTree, 0), leaf, i;
            if (!leafs)
              return this;
            for (i = 0; i < leafs.length; i++) {
              leaf = leafs[i];
              leaf._listeners = null;
            }
            this.listenerTree && recursivelyGarbageCollect(this.listenerTree);
          } else if (this._events) {
            this._events[type2] = null;
          }
          return this;
        };
        EventEmitter.prototype.listeners = function(type2) {
          var _events = this._events;
          var keys, listeners, allListeners;
          var i;
          var listenerTree;
          if (type2 === undefined2) {
            if (this.wildcard) {
              throw Error("event name required for wildcard emitter");
            }
            if (!_events) {
              return [];
            }
            keys = ownKeys(_events);
            i = keys.length;
            allListeners = [];
            while (i-- > 0) {
              listeners = _events[keys[i]];
              if (typeof listeners === "function") {
                allListeners.push(listeners);
              } else {
                allListeners.push.apply(allListeners, listeners);
              }
            }
            return allListeners;
          } else {
            if (this.wildcard) {
              listenerTree = this.listenerTree;
              if (!listenerTree)
                return [];
              var handlers = [];
              var ns = typeof type2 === "string" ? type2.split(this.delimiter) : type2.slice();
              searchListenerTree.call(this, handlers, ns, listenerTree, 0);
              return handlers;
            }
            if (!_events) {
              return [];
            }
            listeners = _events[type2];
            if (!listeners) {
              return [];
            }
            return typeof listeners === "function" ? [listeners] : listeners;
          }
        };
        EventEmitter.prototype.eventNames = function(nsAsArray) {
          var _events = this._events;
          return this.wildcard ? collectTreeEvents.call(this, this.listenerTree, [], null, nsAsArray) : _events ? ownKeys(_events) : [];
        };
        EventEmitter.prototype.listenerCount = function(type2) {
          return this.listeners(type2).length;
        };
        EventEmitter.prototype.hasListeners = function(type2) {
          if (this.wildcard) {
            var handlers = [];
            var ns = typeof type2 === "string" ? type2.split(this.delimiter) : type2.slice();
            searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);
            return handlers.length > 0;
          }
          var _events = this._events;
          var _all = this._all;
          return !!(_all && _all.length || _events && (type2 === undefined2 ? ownKeys(_events).length : _events[type2]));
        };
        EventEmitter.prototype.listenersAny = function() {
          if (this._all) {
            return this._all;
          } else {
            return [];
          }
        };
        EventEmitter.prototype.waitFor = function(event, options) {
          var self = this;
          var type2 = typeof options;
          if (type2 === "number") {
            options = { timeout: options };
          } else if (type2 === "function") {
            options = { filter: options };
          }
          options = resolveOptions(options, {
            timeout: 0,
            filter: undefined2,
            handleError: false,
            Promise,
            overload: false
          }, {
            filter: functionReducer,
            Promise: constructorReducer
          });
          return makeCancelablePromise(options.Promise, function(resolve, reject, onCancel) {
            function listener() {
              var filter2 = options.filter;
              if (filter2 && !filter2.apply(self, arguments)) {
                return;
              }
              self.off(event, listener);
              if (options.handleError) {
                var err = arguments[0];
                err ? reject(err) : resolve(toArray.apply(null, arguments).slice(1));
              } else {
                resolve(toArray.apply(null, arguments));
              }
            }
            onCancel(function() {
              self.off(event, listener);
            });
            self._on(event, listener, false);
          }, {
            timeout: options.timeout,
            overload: options.overload
          });
        };
        function once(emitter, name, options) {
          options = resolveOptions(options, {
            Promise,
            timeout: 0,
            overload: false
          }, {
            Promise: constructorReducer
          });
          var _Promise = options.Promise;
          return makeCancelablePromise(_Promise, function(resolve, reject, onCancel) {
            var handler;
            if (typeof emitter.addEventListener === "function") {
              handler = function() {
                resolve(toArray.apply(null, arguments));
              };
              onCancel(function() {
                emitter.removeEventListener(name, handler);
              });
              emitter.addEventListener(
                name,
                handler,
                { once: true }
              );
              return;
            }
            var eventListener = function() {
              errorListener && emitter.removeListener("error", errorListener);
              resolve(toArray.apply(null, arguments));
            };
            var errorListener;
            if (name !== "error") {
              errorListener = function(err) {
                emitter.removeListener(name, eventListener);
                reject(err);
              };
              emitter.once("error", errorListener);
            }
            onCancel(function() {
              errorListener && emitter.removeListener("error", errorListener);
              emitter.removeListener(name, eventListener);
            });
            emitter.once(name, eventListener);
          }, {
            timeout: options.timeout,
            overload: options.overload
          });
        }
        var prototype = EventEmitter.prototype;
        Object.defineProperties(EventEmitter, {
          defaultMaxListeners: {
            get: function() {
              return prototype._maxListeners;
            },
            set: function(n) {
              if (typeof n !== "number" || n < 0 || Number.isNaN(n)) {
                throw TypeError("n must be a non-negative number");
              }
              prototype._maxListeners = n;
            },
            enumerable: true
          },
          once: {
            value: once,
            writable: true,
            configurable: true
          }
        });
        Object.defineProperties(prototype, {
          _maxListeners: {
            value: defaultMaxListeners,
            writable: true,
            configurable: true
          },
          _observers: { value: null, writable: true, configurable: true }
        });
        if (typeof define === "function" && define.amd) {
          define(function() {
            return EventEmitter;
          });
        } else if (typeof exports === "object") {
          module.exports = EventEmitter;
        } else {
          var _global = new Function("", "return this")();
          _global.EventEmitter2 = EventEmitter;
        }
      }();
    }
  });

  // node_modules/roslib/src/core/Service.js
  var require_Service = __commonJS({
    "node_modules/roslib/src/core/Service.js"(exports, module) {
      var ServiceResponse = require_ServiceResponse();
      var ServiceRequest = require_ServiceRequest();
      var EventEmitter2 = require_eventemitter2().EventEmitter2;
      function Service(options) {
        options = options || {};
        this.ros = options.ros;
        this.name = options.name;
        this.serviceType = options.serviceType;
        this.isAdvertised = false;
        this._serviceCallback = null;
      }
      Service.prototype.__proto__ = EventEmitter2.prototype;
      Service.prototype.callService = function(request, callback, failedCallback) {
        if (this.isAdvertised) {
          return;
        }
        var serviceCallId = "call_service:" + this.name + ":" + ++this.ros.idCounter;
        if (callback || failedCallback) {
          this.ros.once(serviceCallId, function(message) {
            if (message.result !== void 0 && message.result === false) {
              if (typeof failedCallback === "function") {
                failedCallback(message.values);
              }
            } else if (typeof callback === "function") {
              callback(new ServiceResponse(message.values));
            }
          });
        }
        var call = {
          op: "call_service",
          id: serviceCallId,
          service: this.name,
          type: this.serviceType,
          args: request
        };
        this.ros.callOnConnection(call);
      };
      Service.prototype.advertise = function(callback) {
        if (this.isAdvertised || typeof callback !== "function") {
          return;
        }
        this._serviceCallback = callback;
        this.ros.on(this.name, this._serviceResponse.bind(this));
        this.ros.callOnConnection({
          op: "advertise_service",
          type: this.serviceType,
          service: this.name
        });
        this.isAdvertised = true;
      };
      Service.prototype.unadvertise = function() {
        if (!this.isAdvertised) {
          return;
        }
        this.ros.callOnConnection({
          op: "unadvertise_service",
          service: this.name
        });
        this.isAdvertised = false;
      };
      Service.prototype._serviceResponse = function(rosbridgeRequest) {
        var response = {};
        var success = this._serviceCallback(rosbridgeRequest.args, response);
        var call = {
          op: "service_response",
          service: this.name,
          values: new ServiceResponse(response),
          result: success
        };
        if (rosbridgeRequest.id) {
          call.id = rosbridgeRequest.id;
        }
        this.ros.callOnConnection(call);
      };
      module.exports = Service;
    }
  });

  // node_modules/roslib/src/core/Ros.js
  var require_Ros = __commonJS({
    "node_modules/roslib/src/core/Ros.js"(exports, module) {
      var WebSocket2 = require_WebSocket();
      var WorkerSocket = require_workerSocket();
      var socketAdapter = require_SocketAdapter();
      var Service = require_Service();
      var ServiceRequest = require_ServiceRequest();
      var assign = require_object_assign();
      var EventEmitter2 = require_eventemitter2().EventEmitter2;
      function Ros(options) {
        options = options || {};
        var that = this;
        this.socket = null;
        this.idCounter = 0;
        this.isConnected = false;
        this.transportLibrary = options.transportLibrary || "websocket";
        this.transportOptions = options.transportOptions || {};
        this._sendFunc = function(msg) {
          that.sendEncodedMessage(msg);
        };
        if (typeof options.groovyCompatibility === "undefined") {
          this.groovyCompatibility = true;
        } else {
          this.groovyCompatibility = options.groovyCompatibility;
        }
        this.setMaxListeners(0);
        if (options.url) {
          this.connect(options.url);
        }
      }
      Ros.prototype.__proto__ = EventEmitter2.prototype;
      Ros.prototype.connect = function(url) {
        if (this.transportLibrary === "socket.io") {
          this.socket = assign(io(url, { "force new connection": true }), socketAdapter(this));
          this.socket.on("connect", this.socket.onopen);
          this.socket.on("data", this.socket.onmessage);
          this.socket.on("close", this.socket.onclose);
          this.socket.on("error", this.socket.onerror);
        } else if (this.transportLibrary.constructor.name === "RTCPeerConnection") {
          this.socket = assign(this.transportLibrary.createDataChannel(url, this.transportOptions), socketAdapter(this));
        } else if (this.transportLibrary === "websocket") {
          if (!this.socket || this.socket.readyState === WebSocket2.CLOSED) {
            var sock = new WebSocket2(url);
            sock.binaryType = "arraybuffer";
            this.socket = assign(sock, socketAdapter(this));
          }
        } else if (this.transportLibrary === "workersocket") {
          this.socket = assign(new WorkerSocket(url), socketAdapter(this));
        } else {
          throw "Unknown transportLibrary: " + this.transportLibrary.toString();
        }
      };
      Ros.prototype.close = function() {
        if (this.socket) {
          this.socket.close();
        }
      };
      Ros.prototype.authenticate = function(mac, client, dest, rand, t, level, end) {
        var auth = {
          op: "auth",
          mac,
          client,
          dest,
          rand,
          t,
          level,
          end
        };
        this.callOnConnection(auth);
      };
      Ros.prototype.sendEncodedMessage = function(messageEncoded) {
        var emitter = null;
        var that = this;
        if (this.transportLibrary === "socket.io") {
          emitter = function(msg) {
            that.socket.emit("operation", msg);
          };
        } else {
          emitter = function(msg) {
            that.socket.send(msg);
          };
        }
        if (!this.isConnected) {
          that.once("connection", function() {
            emitter(messageEncoded);
          });
        } else {
          emitter(messageEncoded);
        }
      };
      Ros.prototype.callOnConnection = function(message) {
        if (this.transportOptions.encoder) {
          this.transportOptions.encoder(message, this._sendFunc);
        } else {
          this._sendFunc(JSON.stringify(message));
        }
      };
      Ros.prototype.setStatusLevel = function(level, id2) {
        var levelMsg = {
          op: "set_level",
          level,
          id: id2
        };
        this.callOnConnection(levelMsg);
      };
      Ros.prototype.getActionServers = function(callback, failedCallback) {
        var getActionServers = new Service({
          ros: this,
          name: "/rosapi/action_servers",
          serviceType: "rosapi/GetActionServers"
        });
        var request = new ServiceRequest({});
        if (typeof failedCallback === "function") {
          getActionServers.callService(
            request,
            function(result) {
              callback(result.action_servers);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          getActionServers.callService(request, function(result) {
            callback(result.action_servers);
          });
        }
      };
      Ros.prototype.getTopics = function(callback, failedCallback) {
        var topicsClient = new Service({
          ros: this,
          name: "/rosapi/topics",
          serviceType: "rosapi/Topics"
        });
        var request = new ServiceRequest();
        if (typeof failedCallback === "function") {
          topicsClient.callService(
            request,
            function(result) {
              callback(result);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          topicsClient.callService(request, function(result) {
            callback(result);
          });
        }
      };
      Ros.prototype.getTopicsForType = function(topicType, callback, failedCallback) {
        var topicsForTypeClient = new Service({
          ros: this,
          name: "/rosapi/topics_for_type",
          serviceType: "rosapi/TopicsForType"
        });
        var request = new ServiceRequest({
          type: topicType
        });
        if (typeof failedCallback === "function") {
          topicsForTypeClient.callService(
            request,
            function(result) {
              callback(result.topics);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          topicsForTypeClient.callService(request, function(result) {
            callback(result.topics);
          });
        }
      };
      Ros.prototype.getServices = function(callback, failedCallback) {
        var servicesClient = new Service({
          ros: this,
          name: "/rosapi/services",
          serviceType: "rosapi/Services"
        });
        var request = new ServiceRequest();
        if (typeof failedCallback === "function") {
          servicesClient.callService(
            request,
            function(result) {
              callback(result.services);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          servicesClient.callService(request, function(result) {
            callback(result.services);
          });
        }
      };
      Ros.prototype.getServicesForType = function(serviceType, callback, failedCallback) {
        var servicesForTypeClient = new Service({
          ros: this,
          name: "/rosapi/services_for_type",
          serviceType: "rosapi/ServicesForType"
        });
        var request = new ServiceRequest({
          type: serviceType
        });
        if (typeof failedCallback === "function") {
          servicesForTypeClient.callService(
            request,
            function(result) {
              callback(result.services);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          servicesForTypeClient.callService(request, function(result) {
            callback(result.services);
          });
        }
      };
      Ros.prototype.getServiceRequestDetails = function(type2, callback, failedCallback) {
        var serviceTypeClient = new Service({
          ros: this,
          name: "/rosapi/service_request_details",
          serviceType: "rosapi/ServiceRequestDetails"
        });
        var request = new ServiceRequest({
          type: type2
        });
        if (typeof failedCallback === "function") {
          serviceTypeClient.callService(
            request,
            function(result) {
              callback(result);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          serviceTypeClient.callService(request, function(result) {
            callback(result);
          });
        }
      };
      Ros.prototype.getServiceResponseDetails = function(type2, callback, failedCallback) {
        var serviceTypeClient = new Service({
          ros: this,
          name: "/rosapi/service_response_details",
          serviceType: "rosapi/ServiceResponseDetails"
        });
        var request = new ServiceRequest({
          type: type2
        });
        if (typeof failedCallback === "function") {
          serviceTypeClient.callService(
            request,
            function(result) {
              callback(result);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          serviceTypeClient.callService(request, function(result) {
            callback(result);
          });
        }
      };
      Ros.prototype.getNodes = function(callback, failedCallback) {
        var nodesClient = new Service({
          ros: this,
          name: "/rosapi/nodes",
          serviceType: "rosapi/Nodes"
        });
        var request = new ServiceRequest();
        if (typeof failedCallback === "function") {
          nodesClient.callService(
            request,
            function(result) {
              callback(result.nodes);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          nodesClient.callService(request, function(result) {
            callback(result.nodes);
          });
        }
      };
      Ros.prototype.getNodeDetails = function(node, callback, failedCallback) {
        var nodesClient = new Service({
          ros: this,
          name: "/rosapi/node_details",
          serviceType: "rosapi/NodeDetails"
        });
        var request = new ServiceRequest({
          node
        });
        if (typeof failedCallback === "function") {
          nodesClient.callService(
            request,
            function(result) {
              callback(result.subscribing, result.publishing, result.services);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          nodesClient.callService(request, function(result) {
            callback(result);
          });
        }
      };
      Ros.prototype.getParams = function(callback, failedCallback) {
        var paramsClient = new Service({
          ros: this,
          name: "/rosapi/get_param_names",
          serviceType: "rosapi/GetParamNames"
        });
        var request = new ServiceRequest();
        if (typeof failedCallback === "function") {
          paramsClient.callService(
            request,
            function(result) {
              callback(result.names);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          paramsClient.callService(request, function(result) {
            callback(result.names);
          });
        }
      };
      Ros.prototype.getTopicType = function(topic, callback, failedCallback) {
        var topicTypeClient = new Service({
          ros: this,
          name: "/rosapi/topic_type",
          serviceType: "rosapi/TopicType"
        });
        var request = new ServiceRequest({
          topic
        });
        if (typeof failedCallback === "function") {
          topicTypeClient.callService(
            request,
            function(result) {
              callback(result.type);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          topicTypeClient.callService(request, function(result) {
            callback(result.type);
          });
        }
      };
      Ros.prototype.getServiceType = function(service, callback, failedCallback) {
        var serviceTypeClient = new Service({
          ros: this,
          name: "/rosapi/service_type",
          serviceType: "rosapi/ServiceType"
        });
        var request = new ServiceRequest({
          service
        });
        if (typeof failedCallback === "function") {
          serviceTypeClient.callService(
            request,
            function(result) {
              callback(result.type);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          serviceTypeClient.callService(request, function(result) {
            callback(result.type);
          });
        }
      };
      Ros.prototype.getMessageDetails = function(message, callback, failedCallback) {
        var messageDetailClient = new Service({
          ros: this,
          name: "/rosapi/message_details",
          serviceType: "rosapi/MessageDetails"
        });
        var request = new ServiceRequest({
          type: message
        });
        if (typeof failedCallback === "function") {
          messageDetailClient.callService(
            request,
            function(result) {
              callback(result.typedefs);
            },
            function(message2) {
              failedCallback(message2);
            }
          );
        } else {
          messageDetailClient.callService(request, function(result) {
            callback(result.typedefs);
          });
        }
      };
      Ros.prototype.decodeTypeDefs = function(defs) {
        var that = this;
        var decodeTypeDefsRec = function(theType, hints) {
          var typeDefDict = {};
          for (var i = 0; i < theType.fieldnames.length; i++) {
            var arrayLen = theType.fieldarraylen[i];
            var fieldName = theType.fieldnames[i];
            var fieldType = theType.fieldtypes[i];
            if (fieldType.indexOf("/") === -1) {
              if (arrayLen === -1) {
                typeDefDict[fieldName] = fieldType;
              } else {
                typeDefDict[fieldName] = [fieldType];
              }
            } else {
              var sub = false;
              for (var j = 0; j < hints.length; j++) {
                if (hints[j].type.toString() === fieldType.toString()) {
                  sub = hints[j];
                  break;
                }
              }
              if (sub) {
                var subResult = decodeTypeDefsRec(sub, hints);
                if (arrayLen === -1) {
                  typeDefDict[fieldName] = subResult;
                } else {
                  typeDefDict[fieldName] = [subResult];
                }
              } else {
                that.emit("error", "Cannot find " + fieldType + " in decodeTypeDefs");
              }
            }
          }
          return typeDefDict;
        };
        return decodeTypeDefsRec(defs[0], defs);
      };
      Ros.prototype.getTopicsAndRawTypes = function(callback, failedCallback) {
        var topicsAndRawTypesClient = new Service({
          ros: this,
          name: "/rosapi/topics_and_raw_types",
          serviceType: "rosapi/TopicsAndRawTypes"
        });
        var request = new ServiceRequest();
        if (typeof failedCallback === "function") {
          topicsAndRawTypesClient.callService(
            request,
            function(result) {
              callback(result);
            },
            function(message) {
              failedCallback(message);
            }
          );
        } else {
          topicsAndRawTypesClient.callService(request, function(result) {
            callback(result);
          });
        }
      };
      module.exports = Ros;
    }
  });

  // node_modules/roslib/src/core/Message.js
  var require_Message = __commonJS({
    "node_modules/roslib/src/core/Message.js"(exports, module) {
      var assign = require_object_assign();
      function Message(values) {
        assign(this, values);
      }
      module.exports = Message;
    }
  });

  // node_modules/roslib/src/core/Topic.js
  var require_Topic = __commonJS({
    "node_modules/roslib/src/core/Topic.js"(exports, module) {
      var EventEmitter2 = require_eventemitter2().EventEmitter2;
      var Message = require_Message();
      function Topic(options) {
        options = options || {};
        this.ros = options.ros;
        this.name = options.name;
        this.messageType = options.messageType;
        this.isAdvertised = false;
        this.compression = options.compression || "none";
        this.throttle_rate = options.throttle_rate || 0;
        this.latch = options.latch || false;
        this.queue_size = options.queue_size || 100;
        this.queue_length = options.queue_length || 0;
        this.reconnect_on_close = options.reconnect_on_close !== void 0 ? options.reconnect_on_close : true;
        if (this.compression && this.compression !== "png" && this.compression !== "cbor" && this.compression !== "cbor-raw" && this.compression !== "none") {
          this.emit("warning", this.compression + " compression is not supported. No compression will be used.");
          this.compression = "none";
        }
        if (this.throttle_rate < 0) {
          this.emit("warning", this.throttle_rate + " is not allowed. Set to 0");
          this.throttle_rate = 0;
        }
        var that = this;
        if (this.reconnect_on_close) {
          this.callForSubscribeAndAdvertise = function(message) {
            that.ros.callOnConnection(message);
            that.waitForReconnect = false;
            that.reconnectFunc = function() {
              if (!that.waitForReconnect) {
                that.waitForReconnect = true;
                that.ros.callOnConnection(message);
                that.ros.once("connection", function() {
                  that.waitForReconnect = false;
                });
              }
            };
            that.ros.on("close", that.reconnectFunc);
          };
        } else {
          this.callForSubscribeAndAdvertise = this.ros.callOnConnection;
        }
        this._messageCallback = function(data) {
          that.emit("message", new Message(data));
        };
      }
      Topic.prototype.__proto__ = EventEmitter2.prototype;
      Topic.prototype.subscribe = function(callback) {
        if (typeof callback === "function") {
          this.on("message", callback);
        }
        if (this.subscribeId) {
          return;
        }
        this.ros.on(this.name, this._messageCallback);
        this.subscribeId = "subscribe:" + this.name + ":" + ++this.ros.idCounter;
        this.callForSubscribeAndAdvertise({
          op: "subscribe",
          id: this.subscribeId,
          type: this.messageType,
          topic: this.name,
          compression: this.compression,
          throttle_rate: this.throttle_rate,
          queue_length: this.queue_length
        });
      };
      Topic.prototype.unsubscribe = function(callback) {
        if (callback) {
          this.off("message", callback);
          if (this.listeners("message").length) {
            return;
          }
        }
        if (!this.subscribeId) {
          return;
        }
        this.ros.off(this.name, this._messageCallback);
        if (this.reconnect_on_close) {
          this.ros.off("close", this.reconnectFunc);
        }
        this.emit("unsubscribe");
        this.ros.callOnConnection({
          op: "unsubscribe",
          id: this.subscribeId,
          topic: this.name
        });
        this.subscribeId = null;
      };
      Topic.prototype.advertise = function() {
        if (this.isAdvertised) {
          return;
        }
        this.advertiseId = "advertise:" + this.name + ":" + ++this.ros.idCounter;
        this.callForSubscribeAndAdvertise({
          op: "advertise",
          id: this.advertiseId,
          type: this.messageType,
          topic: this.name,
          latch: this.latch,
          queue_size: this.queue_size
        });
        this.isAdvertised = true;
        if (!this.reconnect_on_close) {
          var that = this;
          this.ros.on("close", function() {
            that.isAdvertised = false;
          });
        }
      };
      Topic.prototype.unadvertise = function() {
        if (!this.isAdvertised) {
          return;
        }
        if (this.reconnect_on_close) {
          this.ros.off("close", this.reconnectFunc);
        }
        this.emit("unadvertise");
        this.ros.callOnConnection({
          op: "unadvertise",
          id: this.advertiseId,
          topic: this.name
        });
        this.isAdvertised = false;
      };
      Topic.prototype.publish = function(message) {
        if (!this.isAdvertised) {
          this.advertise();
        }
        this.ros.idCounter++;
        var call = {
          op: "publish",
          id: "publish:" + this.name + ":" + this.ros.idCounter,
          topic: this.name,
          msg: message,
          latch: this.latch
        };
        this.ros.callOnConnection(call);
      };
      module.exports = Topic;
    }
  });

  // node_modules/roslib/src/core/Param.js
  var require_Param = __commonJS({
    "node_modules/roslib/src/core/Param.js"(exports, module) {
      var Service = require_Service();
      var ServiceRequest = require_ServiceRequest();
      function Param(options) {
        options = options || {};
        this.ros = options.ros;
        this.name = options.name;
      }
      Param.prototype.get = function(callback, failedCallback) {
        var paramClient = new Service({
          ros: this.ros,
          name: "/rosapi/get_param",
          serviceType: "rosapi/GetParam"
        });
        var request = new ServiceRequest({
          name: this.name
        });
        paramClient.callService(request, function(result) {
          var value = JSON.parse(result.value);
          callback(value);
        }, failedCallback);
      };
      Param.prototype.set = function(value, callback, failedCallback) {
        var paramClient = new Service({
          ros: this.ros,
          name: "/rosapi/set_param",
          serviceType: "rosapi/SetParam"
        });
        var request = new ServiceRequest({
          name: this.name,
          value: JSON.stringify(value)
        });
        paramClient.callService(request, callback, failedCallback);
      };
      Param.prototype.delete = function(callback, failedCallback) {
        var paramClient = new Service({
          ros: this.ros,
          name: "/rosapi/delete_param",
          serviceType: "rosapi/DeleteParam"
        });
        var request = new ServiceRequest({
          name: this.name
        });
        paramClient.callService(request, callback, failedCallback);
      };
      module.exports = Param;
    }
  });

  // node_modules/roslib/src/core/index.js
  var require_core = __commonJS({
    "node_modules/roslib/src/core/index.js"(exports, module) {
      var mixin = require_mixin();
      var core = module.exports = {
        Ros: require_Ros(),
        Topic: require_Topic(),
        Message: require_Message(),
        Param: require_Param(),
        Service: require_Service(),
        ServiceRequest: require_ServiceRequest(),
        ServiceResponse: require_ServiceResponse()
      };
      mixin(core.Ros, ["Param", "Service", "Topic"], core);
    }
  });

  // node_modules/roslib/src/actionlib/ActionClient.js
  var require_ActionClient = __commonJS({
    "node_modules/roslib/src/actionlib/ActionClient.js"(exports, module) {
      var Topic = require_Topic();
      var Message = require_Message();
      var EventEmitter2 = require_eventemitter2().EventEmitter2;
      function ActionClient(options) {
        var that = this;
        options = options || {};
        this.ros = options.ros;
        this.serverName = options.serverName;
        this.actionName = options.actionName;
        this.timeout = options.timeout;
        this.omitFeedback = options.omitFeedback;
        this.omitStatus = options.omitStatus;
        this.omitResult = options.omitResult;
        this.goals = {};
        var receivedStatus = false;
        this.feedbackListener = new Topic({
          ros: this.ros,
          name: this.serverName + "/feedback",
          messageType: this.actionName + "Feedback"
        });
        this.statusListener = new Topic({
          ros: this.ros,
          name: this.serverName + "/status",
          messageType: "actionlib_msgs/GoalStatusArray"
        });
        this.resultListener = new Topic({
          ros: this.ros,
          name: this.serverName + "/result",
          messageType: this.actionName + "Result"
        });
        this.goalTopic = new Topic({
          ros: this.ros,
          name: this.serverName + "/goal",
          messageType: this.actionName + "Goal"
        });
        this.cancelTopic = new Topic({
          ros: this.ros,
          name: this.serverName + "/cancel",
          messageType: "actionlib_msgs/GoalID"
        });
        this.goalTopic.advertise();
        this.cancelTopic.advertise();
        if (!this.omitStatus) {
          this.statusListener.subscribe(function(statusMessage) {
            receivedStatus = true;
            statusMessage.status_list.forEach(function(status) {
              var goal = that.goals[status.goal_id.id];
              if (goal) {
                goal.emit("status", status);
              }
            });
          });
        }
        if (!this.omitFeedback) {
          this.feedbackListener.subscribe(function(feedbackMessage) {
            var goal = that.goals[feedbackMessage.status.goal_id.id];
            if (goal) {
              goal.emit("status", feedbackMessage.status);
              goal.emit("feedback", feedbackMessage.feedback);
            }
          });
        }
        if (!this.omitResult) {
          this.resultListener.subscribe(function(resultMessage) {
            var goal = that.goals[resultMessage.status.goal_id.id];
            if (goal) {
              goal.emit("status", resultMessage.status);
              goal.emit("result", resultMessage.result);
            }
          });
        }
        if (this.timeout) {
          setTimeout(function() {
            if (!receivedStatus) {
              that.emit("timeout");
            }
          }, this.timeout);
        }
      }
      ActionClient.prototype.__proto__ = EventEmitter2.prototype;
      ActionClient.prototype.cancel = function() {
        var cancelMessage = new Message();
        this.cancelTopic.publish(cancelMessage);
      };
      ActionClient.prototype.dispose = function() {
        this.goalTopic.unadvertise();
        this.cancelTopic.unadvertise();
        if (!this.omitStatus) {
          this.statusListener.unsubscribe();
        }
        if (!this.omitFeedback) {
          this.feedbackListener.unsubscribe();
        }
        if (!this.omitResult) {
          this.resultListener.unsubscribe();
        }
      };
      module.exports = ActionClient;
    }
  });

  // node_modules/roslib/src/actionlib/ActionListener.js
  var require_ActionListener = __commonJS({
    "node_modules/roslib/src/actionlib/ActionListener.js"(exports, module) {
      var Topic = require_Topic();
      var Message = require_Message();
      var EventEmitter2 = require_eventemitter2().EventEmitter2;
      function ActionListener(options) {
        var that = this;
        options = options || {};
        this.ros = options.ros;
        this.serverName = options.serverName;
        this.actionName = options.actionName;
        var goalListener = new Topic({
          ros: this.ros,
          name: this.serverName + "/goal",
          messageType: this.actionName + "Goal"
        });
        var feedbackListener = new Topic({
          ros: this.ros,
          name: this.serverName + "/feedback",
          messageType: this.actionName + "Feedback"
        });
        var statusListener = new Topic({
          ros: this.ros,
          name: this.serverName + "/status",
          messageType: "actionlib_msgs/GoalStatusArray"
        });
        var resultListener = new Topic({
          ros: this.ros,
          name: this.serverName + "/result",
          messageType: this.actionName + "Result"
        });
        goalListener.subscribe(function(goalMessage) {
          that.emit("goal", goalMessage);
        });
        statusListener.subscribe(function(statusMessage) {
          statusMessage.status_list.forEach(function(status) {
            that.emit("status", status);
          });
        });
        feedbackListener.subscribe(function(feedbackMessage) {
          that.emit("status", feedbackMessage.status);
          that.emit("feedback", feedbackMessage.feedback);
        });
        resultListener.subscribe(function(resultMessage) {
          that.emit("status", resultMessage.status);
          that.emit("result", resultMessage.result);
        });
      }
      ActionListener.prototype.__proto__ = EventEmitter2.prototype;
      module.exports = ActionListener;
    }
  });

  // node_modules/roslib/src/actionlib/Goal.js
  var require_Goal = __commonJS({
    "node_modules/roslib/src/actionlib/Goal.js"(exports, module) {
      var Message = require_Message();
      var EventEmitter2 = require_eventemitter2().EventEmitter2;
      function Goal(options) {
        var that = this;
        this.actionClient = options.actionClient;
        this.goalMessage = options.goalMessage;
        this.isFinished = false;
        var date = /* @__PURE__ */ new Date();
        this.goalID = "goal_" + Math.random() + "_" + date.getTime();
        this.goalMessage = new Message({
          goal_id: {
            stamp: {
              secs: 0,
              nsecs: 0
            },
            id: this.goalID
          },
          goal: this.goalMessage
        });
        this.on("status", function(status) {
          that.status = status;
        });
        this.on("result", function(result) {
          that.isFinished = true;
          that.result = result;
        });
        this.on("feedback", function(feedback) {
          that.feedback = feedback;
        });
        this.actionClient.goals[this.goalID] = this;
      }
      Goal.prototype.__proto__ = EventEmitter2.prototype;
      Goal.prototype.send = function(timeout2) {
        var that = this;
        that.actionClient.goalTopic.publish(that.goalMessage);
        if (timeout2) {
          setTimeout(function() {
            if (!that.isFinished) {
              that.emit("timeout");
            }
          }, timeout2);
        }
      };
      Goal.prototype.cancel = function() {
        var cancelMessage = new Message({
          id: this.goalID
        });
        this.actionClient.cancelTopic.publish(cancelMessage);
      };
      module.exports = Goal;
    }
  });

  // node_modules/roslib/src/actionlib/SimpleActionServer.js
  var require_SimpleActionServer = __commonJS({
    "node_modules/roslib/src/actionlib/SimpleActionServer.js"(exports, module) {
      var Topic = require_Topic();
      var Message = require_Message();
      var EventEmitter2 = require_eventemitter2().EventEmitter2;
      function SimpleActionServer(options) {
        var that = this;
        options = options || {};
        this.ros = options.ros;
        this.serverName = options.serverName;
        this.actionName = options.actionName;
        this.feedbackPublisher = new Topic({
          ros: this.ros,
          name: this.serverName + "/feedback",
          messageType: this.actionName + "Feedback"
        });
        this.feedbackPublisher.advertise();
        var statusPublisher = new Topic({
          ros: this.ros,
          name: this.serverName + "/status",
          messageType: "actionlib_msgs/GoalStatusArray"
        });
        statusPublisher.advertise();
        this.resultPublisher = new Topic({
          ros: this.ros,
          name: this.serverName + "/result",
          messageType: this.actionName + "Result"
        });
        this.resultPublisher.advertise();
        var goalListener = new Topic({
          ros: this.ros,
          name: this.serverName + "/goal",
          messageType: this.actionName + "Goal"
        });
        var cancelListener = new Topic({
          ros: this.ros,
          name: this.serverName + "/cancel",
          messageType: "actionlib_msgs/GoalID"
        });
        this.statusMessage = new Message({
          header: {
            stamp: { secs: 0, nsecs: 100 },
            frame_id: ""
          },
          status_list: []
        });
        this.currentGoal = null;
        this.nextGoal = null;
        goalListener.subscribe(function(goalMessage) {
          if (that.currentGoal) {
            that.nextGoal = goalMessage;
            that.emit("cancel");
          } else {
            that.statusMessage.status_list = [{ goal_id: goalMessage.goal_id, status: 1 }];
            that.currentGoal = goalMessage;
            that.emit("goal", goalMessage.goal);
          }
        });
        var isEarlier = function(t12, t2) {
          if (t12.secs > t2.secs) {
            return false;
          } else if (t12.secs < t2.secs) {
            return true;
          } else if (t12.nsecs < t2.nsecs) {
            return true;
          } else {
            return false;
          }
        };
        cancelListener.subscribe(function(cancelMessage) {
          if (cancelMessage.stamp.secs === 0 && cancelMessage.stamp.secs === 0 && cancelMessage.id === "") {
            that.nextGoal = null;
            if (that.currentGoal) {
              that.emit("cancel");
            }
          } else {
            if (that.currentGoal && cancelMessage.id === that.currentGoal.goal_id.id) {
              that.emit("cancel");
            } else if (that.nextGoal && cancelMessage.id === that.nextGoal.goal_id.id) {
              that.nextGoal = null;
            }
            if (that.nextGoal && isEarlier(
              that.nextGoal.goal_id.stamp,
              cancelMessage.stamp
            )) {
              that.nextGoal = null;
            }
            if (that.currentGoal && isEarlier(
              that.currentGoal.goal_id.stamp,
              cancelMessage.stamp
            )) {
              that.emit("cancel");
            }
          }
        });
        var statusInterval = setInterval(function() {
          var currentTime = /* @__PURE__ */ new Date();
          var secs = Math.floor(currentTime.getTime() / 1e3);
          var nsecs = Math.round(1e9 * (currentTime.getTime() / 1e3 - secs));
          that.statusMessage.header.stamp.secs = secs;
          that.statusMessage.header.stamp.nsecs = nsecs;
          statusPublisher.publish(that.statusMessage);
        }, 500);
      }
      SimpleActionServer.prototype.__proto__ = EventEmitter2.prototype;
      SimpleActionServer.prototype.setSucceeded = function(result) {
        var resultMessage = new Message({
          status: { goal_id: this.currentGoal.goal_id, status: 3 },
          result
        });
        this.resultPublisher.publish(resultMessage);
        this.statusMessage.status_list = [];
        if (this.nextGoal) {
          this.currentGoal = this.nextGoal;
          this.nextGoal = null;
          this.emit("goal", this.currentGoal.goal);
        } else {
          this.currentGoal = null;
        }
      };
      SimpleActionServer.prototype.setAborted = function(result) {
        var resultMessage = new Message({
          status: { goal_id: this.currentGoal.goal_id, status: 4 },
          result
        });
        this.resultPublisher.publish(resultMessage);
        this.statusMessage.status_list = [];
        if (this.nextGoal) {
          this.currentGoal = this.nextGoal;
          this.nextGoal = null;
          this.emit("goal", this.currentGoal.goal);
        } else {
          this.currentGoal = null;
        }
      };
      SimpleActionServer.prototype.sendFeedback = function(feedback) {
        var feedbackMessage = new Message({
          status: { goal_id: this.currentGoal.goal_id, status: 1 },
          feedback
        });
        this.feedbackPublisher.publish(feedbackMessage);
      };
      SimpleActionServer.prototype.setPreempted = function() {
        this.statusMessage.status_list = [];
        var resultMessage = new Message({
          status: { goal_id: this.currentGoal.goal_id, status: 2 }
        });
        this.resultPublisher.publish(resultMessage);
        if (this.nextGoal) {
          this.currentGoal = this.nextGoal;
          this.nextGoal = null;
          this.emit("goal", this.currentGoal.goal);
        } else {
          this.currentGoal = null;
        }
      };
      module.exports = SimpleActionServer;
    }
  });

  // node_modules/roslib/src/actionlib/index.js
  var require_actionlib = __commonJS({
    "node_modules/roslib/src/actionlib/index.js"(exports, module) {
      var Ros = require_Ros();
      var mixin = require_mixin();
      var action = module.exports = {
        ActionClient: require_ActionClient(),
        ActionListener: require_ActionListener(),
        Goal: require_Goal(),
        SimpleActionServer: require_SimpleActionServer()
      };
      mixin(Ros, ["ActionClient", "SimpleActionServer"], action);
    }
  });

  // node_modules/roslib/src/math/Vector3.js
  var require_Vector3 = __commonJS({
    "node_modules/roslib/src/math/Vector3.js"(exports, module) {
      function Vector3(options) {
        options = options || {};
        this.x = options.x || 0;
        this.y = options.y || 0;
        this.z = options.z || 0;
      }
      Vector3.prototype.add = function(v) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
      };
      Vector3.prototype.subtract = function(v) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
      };
      Vector3.prototype.multiplyQuaternion = function(q) {
        var ix = q.w * this.x + q.y * this.z - q.z * this.y;
        var iy = q.w * this.y + q.z * this.x - q.x * this.z;
        var iz = q.w * this.z + q.x * this.y - q.y * this.x;
        var iw = -q.x * this.x - q.y * this.y - q.z * this.z;
        this.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;
        this.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;
        this.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;
      };
      Vector3.prototype.clone = function() {
        return new Vector3(this);
      };
      module.exports = Vector3;
    }
  });

  // node_modules/roslib/src/math/Quaternion.js
  var require_Quaternion = __commonJS({
    "node_modules/roslib/src/math/Quaternion.js"(exports, module) {
      function Quaternion(options) {
        options = options || {};
        this.x = options.x || 0;
        this.y = options.y || 0;
        this.z = options.z || 0;
        this.w = typeof options.w === "number" ? options.w : 1;
      }
      Quaternion.prototype.conjugate = function() {
        this.x *= -1;
        this.y *= -1;
        this.z *= -1;
      };
      Quaternion.prototype.norm = function() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
      };
      Quaternion.prototype.normalize = function() {
        var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        if (l === 0) {
          this.x = 0;
          this.y = 0;
          this.z = 0;
          this.w = 1;
        } else {
          l = 1 / l;
          this.x = this.x * l;
          this.y = this.y * l;
          this.z = this.z * l;
          this.w = this.w * l;
        }
      };
      Quaternion.prototype.invert = function() {
        this.conjugate();
        this.normalize();
      };
      Quaternion.prototype.multiply = function(q) {
        var newX = this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x;
        var newY = -this.x * q.z + this.y * q.w + this.z * q.x + this.w * q.y;
        var newZ = this.x * q.y - this.y * q.x + this.z * q.w + this.w * q.z;
        var newW = -this.x * q.x - this.y * q.y - this.z * q.z + this.w * q.w;
        this.x = newX;
        this.y = newY;
        this.z = newZ;
        this.w = newW;
      };
      Quaternion.prototype.clone = function() {
        return new Quaternion(this);
      };
      module.exports = Quaternion;
    }
  });

  // node_modules/roslib/src/math/Pose.js
  var require_Pose = __commonJS({
    "node_modules/roslib/src/math/Pose.js"(exports, module) {
      var Vector3 = require_Vector3();
      var Quaternion = require_Quaternion();
      function Pose(options) {
        options = options || {};
        this.position = new Vector3(options.position);
        this.orientation = new Quaternion(options.orientation);
      }
      Pose.prototype.applyTransform = function(tf) {
        this.position.multiplyQuaternion(tf.rotation);
        this.position.add(tf.translation);
        var tmp = tf.rotation.clone();
        tmp.multiply(this.orientation);
        this.orientation = tmp;
      };
      Pose.prototype.clone = function() {
        return new Pose(this);
      };
      Pose.prototype.multiply = function(pose) {
        var p = pose.clone();
        p.applyTransform({ rotation: this.orientation, translation: this.position });
        return p;
      };
      Pose.prototype.getInverse = function() {
        var inverse = this.clone();
        inverse.orientation.invert();
        inverse.position.multiplyQuaternion(inverse.orientation);
        inverse.position.x *= -1;
        inverse.position.y *= -1;
        inverse.position.z *= -1;
        return inverse;
      };
      module.exports = Pose;
    }
  });

  // node_modules/roslib/src/math/Transform.js
  var require_Transform = __commonJS({
    "node_modules/roslib/src/math/Transform.js"(exports, module) {
      var Vector3 = require_Vector3();
      var Quaternion = require_Quaternion();
      function Transform2(options) {
        options = options || {};
        this.translation = new Vector3(options.translation);
        this.rotation = new Quaternion(options.rotation);
      }
      Transform2.prototype.clone = function() {
        return new Transform2(this);
      };
      module.exports = Transform2;
    }
  });

  // node_modules/roslib/src/math/index.js
  var require_math = __commonJS({
    "node_modules/roslib/src/math/index.js"(exports, module) {
      module.exports = {
        Pose: require_Pose(),
        Quaternion: require_Quaternion(),
        Transform: require_Transform(),
        Vector3: require_Vector3()
      };
    }
  });

  // node_modules/roslib/src/tf/TFClient.js
  var require_TFClient = __commonJS({
    "node_modules/roslib/src/tf/TFClient.js"(exports, module) {
      var ActionClient = require_ActionClient();
      var Goal = require_Goal();
      var Service = require_Service();
      var ServiceRequest = require_ServiceRequest();
      var Topic = require_Topic();
      var Transform2 = require_Transform();
      function TFClient(options) {
        options = options || {};
        this.ros = options.ros;
        this.fixedFrame = options.fixedFrame || "base_link";
        this.angularThres = options.angularThres || 2;
        this.transThres = options.transThres || 0.01;
        this.rate = options.rate || 10;
        this.updateDelay = options.updateDelay || 50;
        var seconds = options.topicTimeout || 2;
        var secs = Math.floor(seconds);
        var nsecs = Math.floor((seconds - secs) * 1e9);
        this.topicTimeout = {
          secs,
          nsecs
        };
        this.serverName = options.serverName || "/tf2_web_republisher";
        this.repubServiceName = options.repubServiceName || "/republish_tfs";
        this.currentGoal = false;
        this.currentTopic = false;
        this.frameInfos = {};
        this.republisherUpdateRequested = false;
        this._subscribeCB = null;
        this._isDisposed = false;
        this.actionClient = new ActionClient({
          ros: options.ros,
          serverName: this.serverName,
          actionName: "tf2_web_republisher/TFSubscriptionAction",
          omitStatus: true,
          omitResult: true
        });
        this.serviceClient = new Service({
          ros: options.ros,
          name: this.repubServiceName,
          serviceType: "tf2_web_republisher/RepublishTFs"
        });
      }
      TFClient.prototype.processTFArray = function(tf) {
        var that = this;
        tf.transforms.forEach(function(transform2) {
          var frameID = transform2.child_frame_id;
          if (frameID[0] === "/") {
            frameID = frameID.substring(1);
          }
          var info = this.frameInfos[frameID];
          if (info) {
            info.transform = new Transform2({
              translation: transform2.transform.translation,
              rotation: transform2.transform.rotation
            });
            info.cbs.forEach(function(cb) {
              cb(info.transform);
            });
          }
        }, this);
      };
      TFClient.prototype.updateGoal = function() {
        var goalMessage = {
          source_frames: Object.keys(this.frameInfos),
          target_frame: this.fixedFrame,
          angular_thres: this.angularThres,
          trans_thres: this.transThres,
          rate: this.rate
        };
        if (this.ros.groovyCompatibility) {
          if (this.currentGoal) {
            this.currentGoal.cancel();
          }
          this.currentGoal = new Goal({
            actionClient: this.actionClient,
            goalMessage
          });
          this.currentGoal.on("feedback", this.processTFArray.bind(this));
          this.currentGoal.send();
        } else {
          goalMessage.timeout = this.topicTimeout;
          var request = new ServiceRequest(goalMessage);
          this.serviceClient.callService(request, this.processResponse.bind(this));
        }
        this.republisherUpdateRequested = false;
      };
      TFClient.prototype.processResponse = function(response) {
        if (this._isDisposed) {
          return;
        }
        if (this.currentTopic) {
          this.currentTopic.unsubscribe(this._subscribeCB);
        }
        this.currentTopic = new Topic({
          ros: this.ros,
          name: response.topic_name,
          messageType: "tf2_web_republisher/TFArray"
        });
        this._subscribeCB = this.processTFArray.bind(this);
        this.currentTopic.subscribe(this._subscribeCB);
      };
      TFClient.prototype.subscribe = function(frameID, callback) {
        if (frameID[0] === "/") {
          frameID = frameID.substring(1);
        }
        if (!this.frameInfos[frameID]) {
          this.frameInfos[frameID] = {
            cbs: []
          };
          if (!this.republisherUpdateRequested) {
            setTimeout(this.updateGoal.bind(this), this.updateDelay);
            this.republisherUpdateRequested = true;
          }
        } else if (this.frameInfos[frameID].transform) {
          callback(this.frameInfos[frameID].transform);
        }
        this.frameInfos[frameID].cbs.push(callback);
      };
      TFClient.prototype.unsubscribe = function(frameID, callback) {
        if (frameID[0] === "/") {
          frameID = frameID.substring(1);
        }
        var info = this.frameInfos[frameID];
        for (var cbs = info && info.cbs || [], idx = cbs.length; idx--; ) {
          if (cbs[idx] === callback) {
            cbs.splice(idx, 1);
          }
        }
        if (!callback || cbs.length === 0) {
          delete this.frameInfos[frameID];
        }
      };
      TFClient.prototype.dispose = function() {
        this._isDisposed = true;
        this.actionClient.dispose();
        if (this.currentTopic) {
          this.currentTopic.unsubscribe(this._subscribeCB);
        }
      };
      module.exports = TFClient;
    }
  });

  // node_modules/roslib/src/tf/index.js
  var require_tf = __commonJS({
    "node_modules/roslib/src/tf/index.js"(exports, module) {
      var Ros = require_Ros();
      var mixin = require_mixin();
      var tf = module.exports = {
        TFClient: require_TFClient()
      };
      mixin(Ros, ["TFClient"], tf);
    }
  });

  // node_modules/roslib/src/urdf/UrdfTypes.js
  var require_UrdfTypes = __commonJS({
    "node_modules/roslib/src/urdf/UrdfTypes.js"(exports, module) {
      module.exports = {
        URDF_SPHERE: 0,
        URDF_BOX: 1,
        URDF_CYLINDER: 2,
        URDF_MESH: 3
      };
    }
  });

  // node_modules/roslib/src/urdf/UrdfBox.js
  var require_UrdfBox = __commonJS({
    "node_modules/roslib/src/urdf/UrdfBox.js"(exports, module) {
      var Vector3 = require_Vector3();
      var UrdfTypes = require_UrdfTypes();
      function UrdfBox(options) {
        this.dimension = null;
        this.type = UrdfTypes.URDF_BOX;
        var xyz = options.xml.getAttribute("size").split(" ");
        this.dimension = new Vector3({
          x: parseFloat(xyz[0]),
          y: parseFloat(xyz[1]),
          z: parseFloat(xyz[2])
        });
      }
      module.exports = UrdfBox;
    }
  });

  // node_modules/roslib/src/urdf/UrdfColor.js
  var require_UrdfColor = __commonJS({
    "node_modules/roslib/src/urdf/UrdfColor.js"(exports, module) {
      function UrdfColor(options) {
        var rgba2 = options.xml.getAttribute("rgba").split(" ");
        this.r = parseFloat(rgba2[0]);
        this.g = parseFloat(rgba2[1]);
        this.b = parseFloat(rgba2[2]);
        this.a = parseFloat(rgba2[3]);
      }
      module.exports = UrdfColor;
    }
  });

  // node_modules/roslib/src/urdf/UrdfCylinder.js
  var require_UrdfCylinder = __commonJS({
    "node_modules/roslib/src/urdf/UrdfCylinder.js"(exports, module) {
      var UrdfTypes = require_UrdfTypes();
      function UrdfCylinder(options) {
        this.type = UrdfTypes.URDF_CYLINDER;
        this.length = parseFloat(options.xml.getAttribute("length"));
        this.radius = parseFloat(options.xml.getAttribute("radius"));
      }
      module.exports = UrdfCylinder;
    }
  });

  // node_modules/roslib/src/urdf/UrdfMaterial.js
  var require_UrdfMaterial = __commonJS({
    "node_modules/roslib/src/urdf/UrdfMaterial.js"(exports, module) {
      var UrdfColor = require_UrdfColor();
      function UrdfMaterial(options) {
        this.textureFilename = null;
        this.color = null;
        this.name = options.xml.getAttribute("name");
        var textures = options.xml.getElementsByTagName("texture");
        if (textures.length > 0) {
          this.textureFilename = textures[0].getAttribute("filename");
        }
        var colors = options.xml.getElementsByTagName("color");
        if (colors.length > 0) {
          this.color = new UrdfColor({
            xml: colors[0]
          });
        }
      }
      UrdfMaterial.prototype.isLink = function() {
        return this.color === null && this.textureFilename === null;
      };
      var assign = require_object_assign();
      UrdfMaterial.prototype.assign = function(obj) {
        return assign(this, obj);
      };
      module.exports = UrdfMaterial;
    }
  });

  // node_modules/roslib/src/urdf/UrdfMesh.js
  var require_UrdfMesh = __commonJS({
    "node_modules/roslib/src/urdf/UrdfMesh.js"(exports, module) {
      var Vector3 = require_Vector3();
      var UrdfTypes = require_UrdfTypes();
      function UrdfMesh(options) {
        this.scale = null;
        this.type = UrdfTypes.URDF_MESH;
        this.filename = options.xml.getAttribute("filename");
        var scale = options.xml.getAttribute("scale");
        if (scale) {
          var xyz = scale.split(" ");
          this.scale = new Vector3({
            x: parseFloat(xyz[0]),
            y: parseFloat(xyz[1]),
            z: parseFloat(xyz[2])
          });
        }
      }
      module.exports = UrdfMesh;
    }
  });

  // node_modules/roslib/src/urdf/UrdfSphere.js
  var require_UrdfSphere = __commonJS({
    "node_modules/roslib/src/urdf/UrdfSphere.js"(exports, module) {
      var UrdfTypes = require_UrdfTypes();
      function UrdfSphere(options) {
        this.type = UrdfTypes.URDF_SPHERE;
        this.radius = parseFloat(options.xml.getAttribute("radius"));
      }
      module.exports = UrdfSphere;
    }
  });

  // node_modules/roslib/src/urdf/UrdfVisual.js
  var require_UrdfVisual = __commonJS({
    "node_modules/roslib/src/urdf/UrdfVisual.js"(exports, module) {
      var Pose = require_Pose();
      var Vector3 = require_Vector3();
      var Quaternion = require_Quaternion();
      var UrdfCylinder = require_UrdfCylinder();
      var UrdfBox = require_UrdfBox();
      var UrdfMaterial = require_UrdfMaterial();
      var UrdfMesh = require_UrdfMesh();
      var UrdfSphere = require_UrdfSphere();
      function UrdfVisual(options) {
        var xml = options.xml;
        this.origin = null;
        this.geometry = null;
        this.material = null;
        this.name = options.xml.getAttribute("name");
        var origins = xml.getElementsByTagName("origin");
        if (origins.length === 0) {
          this.origin = new Pose();
        } else {
          var xyz = origins[0].getAttribute("xyz");
          var position = new Vector3();
          if (xyz) {
            xyz = xyz.split(" ");
            position = new Vector3({
              x: parseFloat(xyz[0]),
              y: parseFloat(xyz[1]),
              z: parseFloat(xyz[2])
            });
          }
          var rpy = origins[0].getAttribute("rpy");
          var orientation = new Quaternion();
          if (rpy) {
            rpy = rpy.split(" ");
            var roll = parseFloat(rpy[0]);
            var pitch = parseFloat(rpy[1]);
            var yaw = parseFloat(rpy[2]);
            var phi = roll / 2;
            var the = pitch / 2;
            var psi = yaw / 2;
            var x3 = Math.sin(phi) * Math.cos(the) * Math.cos(psi) - Math.cos(phi) * Math.sin(the) * Math.sin(psi);
            var y3 = Math.cos(phi) * Math.sin(the) * Math.cos(psi) + Math.sin(phi) * Math.cos(the) * Math.sin(psi);
            var z = Math.cos(phi) * Math.cos(the) * Math.sin(psi) - Math.sin(phi) * Math.sin(the) * Math.cos(psi);
            var w = Math.cos(phi) * Math.cos(the) * Math.cos(psi) + Math.sin(phi) * Math.sin(the) * Math.sin(psi);
            orientation = new Quaternion({
              x: x3,
              y: y3,
              z,
              w
            });
            orientation.normalize();
          }
          this.origin = new Pose({
            position,
            orientation
          });
        }
        var geoms = xml.getElementsByTagName("geometry");
        if (geoms.length > 0) {
          var geom = geoms[0];
          var shape = null;
          for (var i = 0; i < geom.childNodes.length; i++) {
            var node = geom.childNodes[i];
            if (node.nodeType === 1) {
              shape = node;
              break;
            }
          }
          var type2 = shape.nodeName;
          if (type2 === "sphere") {
            this.geometry = new UrdfSphere({
              xml: shape
            });
          } else if (type2 === "box") {
            this.geometry = new UrdfBox({
              xml: shape
            });
          } else if (type2 === "cylinder") {
            this.geometry = new UrdfCylinder({
              xml: shape
            });
          } else if (type2 === "mesh") {
            this.geometry = new UrdfMesh({
              xml: shape
            });
          } else {
            console.warn("Unknown geometry type " + type2);
          }
        }
        var materials = xml.getElementsByTagName("material");
        if (materials.length > 0) {
          this.material = new UrdfMaterial({
            xml: materials[0]
          });
        }
      }
      module.exports = UrdfVisual;
    }
  });

  // node_modules/roslib/src/urdf/UrdfLink.js
  var require_UrdfLink = __commonJS({
    "node_modules/roslib/src/urdf/UrdfLink.js"(exports, module) {
      var UrdfVisual = require_UrdfVisual();
      function UrdfLink(options) {
        this.name = options.xml.getAttribute("name");
        this.visuals = [];
        var visuals = options.xml.getElementsByTagName("visual");
        for (var i = 0; i < visuals.length; i++) {
          this.visuals.push(new UrdfVisual({
            xml: visuals[i]
          }));
        }
      }
      module.exports = UrdfLink;
    }
  });

  // node_modules/roslib/src/urdf/UrdfJoint.js
  var require_UrdfJoint = __commonJS({
    "node_modules/roslib/src/urdf/UrdfJoint.js"(exports, module) {
      var Pose = require_Pose();
      var Vector3 = require_Vector3();
      var Quaternion = require_Quaternion();
      function UrdfJoint(options) {
        this.name = options.xml.getAttribute("name");
        this.type = options.xml.getAttribute("type");
        var parents = options.xml.getElementsByTagName("parent");
        if (parents.length > 0) {
          this.parent = parents[0].getAttribute("link");
        }
        var children2 = options.xml.getElementsByTagName("child");
        if (children2.length > 0) {
          this.child = children2[0].getAttribute("link");
        }
        var limits = options.xml.getElementsByTagName("limit");
        if (limits.length > 0) {
          this.minval = parseFloat(limits[0].getAttribute("lower"));
          this.maxval = parseFloat(limits[0].getAttribute("upper"));
        }
        var origins = options.xml.getElementsByTagName("origin");
        if (origins.length === 0) {
          this.origin = new Pose();
        } else {
          var xyz = origins[0].getAttribute("xyz");
          var position = new Vector3();
          if (xyz) {
            xyz = xyz.split(" ");
            position = new Vector3({
              x: parseFloat(xyz[0]),
              y: parseFloat(xyz[1]),
              z: parseFloat(xyz[2])
            });
          }
          var rpy = origins[0].getAttribute("rpy");
          var orientation = new Quaternion();
          if (rpy) {
            rpy = rpy.split(" ");
            var roll = parseFloat(rpy[0]);
            var pitch = parseFloat(rpy[1]);
            var yaw = parseFloat(rpy[2]);
            var phi = roll / 2;
            var the = pitch / 2;
            var psi = yaw / 2;
            var x3 = Math.sin(phi) * Math.cos(the) * Math.cos(psi) - Math.cos(phi) * Math.sin(the) * Math.sin(psi);
            var y3 = Math.cos(phi) * Math.sin(the) * Math.cos(psi) + Math.sin(phi) * Math.cos(the) * Math.sin(psi);
            var z = Math.cos(phi) * Math.cos(the) * Math.sin(psi) - Math.sin(phi) * Math.sin(the) * Math.cos(psi);
            var w = Math.cos(phi) * Math.cos(the) * Math.cos(psi) + Math.sin(phi) * Math.sin(the) * Math.sin(psi);
            orientation = new Quaternion({
              x: x3,
              y: y3,
              z,
              w
            });
            orientation.normalize();
          }
          this.origin = new Pose({
            position,
            orientation
          });
        }
      }
      module.exports = UrdfJoint;
    }
  });

  // node_modules/roslib/src/util/shim/@xmldom/xmldom.js
  var require_xmldom = __commonJS({
    "node_modules/roslib/src/util/shim/@xmldom/xmldom.js"(exports) {
      exports.DOMImplementation = window.DOMImplementation;
      exports.XMLSerializer = window.XMLSerializer;
      exports.DOMParser = window.DOMParser;
    }
  });

  // node_modules/roslib/src/urdf/UrdfModel.js
  var require_UrdfModel = __commonJS({
    "node_modules/roslib/src/urdf/UrdfModel.js"(exports, module) {
      var UrdfMaterial = require_UrdfMaterial();
      var UrdfLink = require_UrdfLink();
      var UrdfJoint = require_UrdfJoint();
      var DOMParser = require_xmldom().DOMParser;
      function UrdfModel(options) {
        options = options || {};
        var xmlDoc = options.xml;
        var string = options.string;
        this.materials = {};
        this.links = {};
        this.joints = {};
        if (string) {
          var parser = new DOMParser();
          xmlDoc = parser.parseFromString(string, "text/xml");
        }
        var robotXml = xmlDoc.documentElement;
        this.name = robotXml.getAttribute("name");
        for (var nodes = robotXml.childNodes, i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          if (node.tagName === "material") {
            var material = new UrdfMaterial({
              xml: node
            });
            if (this.materials[material.name] !== void 0) {
              if (this.materials[material.name].isLink()) {
                this.materials[material.name].assign(material);
              } else {
                console.warn("Material " + material.name + "is not unique.");
              }
            } else {
              this.materials[material.name] = material;
            }
          } else if (node.tagName === "link") {
            var link = new UrdfLink({
              xml: node
            });
            if (this.links[link.name] !== void 0) {
              console.warn("Link " + link.name + " is not unique.");
            } else {
              for (var j = 0; j < link.visuals.length; j++) {
                var mat = link.visuals[j].material;
                if (mat !== null && mat.name) {
                  if (this.materials[mat.name] !== void 0) {
                    link.visuals[j].material = this.materials[mat.name];
                  } else {
                    this.materials[mat.name] = mat;
                  }
                }
              }
              this.links[link.name] = link;
            }
          } else if (node.tagName === "joint") {
            var joint = new UrdfJoint({
              xml: node
            });
            this.joints[joint.name] = joint;
          }
        }
      }
      module.exports = UrdfModel;
    }
  });

  // node_modules/roslib/src/urdf/index.js
  var require_urdf = __commonJS({
    "node_modules/roslib/src/urdf/index.js"(exports, module) {
      module.exports = require_object_assign()({
        UrdfBox: require_UrdfBox(),
        UrdfColor: require_UrdfColor(),
        UrdfCylinder: require_UrdfCylinder(),
        UrdfLink: require_UrdfLink(),
        UrdfMaterial: require_UrdfMaterial(),
        UrdfMesh: require_UrdfMesh(),
        UrdfModel: require_UrdfModel(),
        UrdfSphere: require_UrdfSphere(),
        UrdfVisual: require_UrdfVisual()
      }, require_UrdfTypes());
    }
  });

  // node_modules/roslib/src/RosLib.js
  var require_RosLib = __commonJS({
    "node_modules/roslib/src/RosLib.js"(exports, module) {
      var ROSLIB = exports.ROSLIB || {
        /**
         * @default
         * @description Library version
         */
        REVISION: "1.4.1"
      };
      var assign = require_object_assign();
      assign(ROSLIB, require_core());
      assign(ROSLIB, require_actionlib());
      assign(ROSLIB, require_math());
      assign(ROSLIB, require_tf());
      assign(ROSLIB, require_urdf());
      module.exports = ROSLIB;
    }
  });

  // dist/kb_explorer.js
  var require_kb_explorer = __commonJS({
    "dist/kb_explorer.js"(exports) {
      init_async_mutex();
      init_src31();
      var import_roslib = __toESM(require_RosLib());
      var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      var ICON_MAP = {
        "owl:Thing": "GenericInstance",
        "cyc:Plant": "leaf",
        "cyc:Color": "invert-colors",
        "cyc:EnduringThing-Localized": "map",
        "cyc:SpatialThing-Localized": "map-marker",
        "cyc:SpatialThing": "record-circle-outline",
        "cyc:SpaceRegion": "selection-marker",
        "undecided": "progress-question",
        "Robot": "Robot",
        "Human": "Human",
        "cyc:TemporalThing": "Time",
        "cyc:Event": "timer-outline",
        "EmbodiedAgent": "Agent",
        "Toolbox": "toolbox-outline",
        "Agent": "Agent",
        "Box": "GenericInstance",
        "Cardboardbox": "GenericInstance",
        "cyc:FurniturePiece": "Furniture",
        "Table": "Furniture",
        "cyc:CellularTelephone": "cellphone",
        "Cloth": "tshirt-crew",
        "Trashbin": "trash-can",
        "Tableware": "silverware-fork-knife",
        "Window": "window-closed-variant",
        "GraspableObject": "hand",
        "Book": "book-open-variant",
        "cyc:Chair-PieceOfFurniture": "chair-rolling",
        "cyc:Sofa-PieceOfFurniture": "sofa-single",
        "cyc:ArmChair": "armchair",
        "Remote": "remote-tv",
        "cyc:Tray": "tray",
        "Bottle": "bottle-wine",
        "Glass": "cup-water",
        "Cup": "glass-mug",
        "Placemat": "mat",
        "Container": "contain",
        "cyc:Action": "run-fast",
        "cyc:Situation": "location-enter",
        "cyc:PurposefulAction": "target",
        "Rest": "chat-sleep",
        "Manipulation": "hand",
        "TaskPlan": "chart-gantt",
        "TimeInterval": "timelapse",
        "ContinuousTimeInterval": "timelapse",
        "TimePoint": "timeline",
        "Avatar": "account-box-outline",
        "cyc:Hand": "hand",
        "Hand": "hand",
        "Torso": "torso",
        "BodyPart": "human-handsup",
        "Eye": "eye",
        "Head": "head",
        "Shelf": "bookshelf",
        "cyc:Object-SupportingFurniture": "support",
        "cyc:FluidTangibleThing": "water",
        "cyc:EdibleStuff": "food-apple",
        "Artifact": "hammer",
        "cyc:PartiallyTangible": "tangible"
      };
      var t = transition().duration(750).ease(linear2);
      var RosKBClient = class {
        constructor(rosBridgeUrl) {
          this.ros = new import_roslib.default.Ros({
            url: rosBridgeUrl
          });
          this.ros.on("connection", () => {
            console.log("Connected to rosbridge server.");
          });
          this.ros.on("error", (error) => {
            console.error("Error connecting to rosbridge server:", error);
          });
          this.ros.on("close", () => {
            console.log("Connection to rosbridge server closed.");
          });
          this.details_service = new import_roslib.default.Service({
            ros: this.ros,
            name: "/kb/details",
            serviceType: "kb_msgs/srv/About"
          });
        }
        details(term) {
          return new Promise((resolve, reject) => {
            const requestMsg = new import_roslib.default.ServiceRequest({ term });
            this.details_service.callService(requestMsg, (response) => {
              resolve(response);
            }, (error) => {
              reject(error);
            });
          });
        }
      };
      var ros_kb_client = new RosKBClient("ws://localhost:9090");
      var Node = class _Node {
        constructor(id2, type2, classes = [], instances = [], superClasses = [], subClasses = [], rels = [], label = id2) {
          this.id = id2;
          this.type = type2;
          this.classes = classes;
          this.instances = instances;
          this.superClasses = superClasses;
          this.subClasses = subClasses;
          this.rels = rels;
          this.label = label;
          this.icon = "";
          this.selected = false;
          this.hovered = false;
          this.highlight = false;
          this.depth = 0;
        }
        resetDepths() {
          const graph = asAdjencyList(KB);
          let visited = Object.fromEntries(Object.keys(graph).map((k) => [k, false]));
          this.selected ? this.depth = 0 : this.depth = 5e3;
          let q = new Array();
          visited[this.id] = true;
          q.push(this.id);
          while (q.length > 0) {
            const node_id = q.pop();
            for (let adjN of graph[node_id]) {
              if (!visited[adjN.id]) {
                visited[adjN.id] = true;
                adjN.selected = false;
                adjN.fx = null;
                adjN.fy = null;
                if (!adjN.selected) {
                  adjN.depth = 1e4;
                } else {
                  adjN.depth = 0;
                }
                q.push(adjN.id);
              }
            }
          }
        }
        updateDepths(reset_depth = true) {
          const graph = asAdjencyList(KB);
          let visited = Object.fromEntries(Object.keys(graph).map((k) => [k, false]));
          if (reset_depth) {
            this.resetDepths();
          }
          let q = new Array();
          visited[this.id] = true;
          q.push([this.id, this.depth]);
          while (q.length > 0) {
            const [node_id, depth] = q.pop();
            for (let adjN of graph[node_id]) {
              if (!visited[adjN.id]) {
                visited[adjN.id] = true;
                adjN.selected = false;
                if (adjN.depth > depth + 1) {
                  if (!adjN.selected) {
                    adjN.setDepth(depth + 1);
                    q.push([adjN.id, depth + 1]);
                  } else {
                    adjN.setDepth(0);
                    adjN.updateDepths(false);
                  }
                }
              }
            }
          }
        }
        setDepth(d) {
          this.depth = d;
        }
        static fromKB(term) {
          return __awaiter(this, void 0, void 0, function* () {
            let attrs = {
              "superClasses": [],
              "subClasses": [],
              "classes": [],
              "instances": []
            };
            let response = yield ros_kb_client.details(term);
            let res = JSON.parse(response["json"]);
            for (const attr of res["attributes"]) {
              for (const sc of attr["values"]) {
                attrs[attr["id"]].push(sc["id"]);
              }
            }
            return new _Node(res["id"], res["type"], attrs["classes"], attrs["instances"], attrs["superClasses"], attrs["subClasses"], res["relations"], res["label"]["default"]);
          });
        }
      };
      function asAdjencyList(graph) {
        let nodes = Object.fromEntries(graph.nodes.map((d) => [d.id, d]));
        let adj = Object.fromEntries(graph.nodes.map((d) => [d.id, []]));
        for (const link of graph.links) {
          adj[link.source].push(nodes[link.target]);
          adj[link.target].push(nodes[link.source]);
        }
        return adj;
      }
      var KB = {
        links: [],
        nodes: [
          new Node("EmbodiedAgent", "class")
        ]
      };
      var kbMutex = new Mutex();
      function hasLink(link) {
        return KB.links.some((l) => l.source === link.source && l.target === link.target && l.label === link.label);
      }
      function hasNode(id2) {
        return KB.nodes.some((n) => n.id === id2);
      }
      function updateTerm(term) {
        return __awaiter(this, void 0, void 0, function* () {
          const release = yield kbMutex.acquire();
          let node = yield Node.fromKB(term);
          const idx = KB.nodes.findIndex((n) => n.id === node.id);
          if (idx == -1) {
            console.log("Adding term " + node.id);
            KB.nodes.push(node);
          } else {
            console.log("Updating term " + node.id);
            KB.nodes[idx] = node;
          }
          for (const cls of node.classes) {
            let link = { source: cls, target: node.id, label: "isA" };
            if (!hasNode(cls)) {
              console.log("Adding related term " + cls);
              KB.nodes.push(yield Node.fromKB(cls));
            }
            if (!hasLink(link)) {
              KB.links.push(link);
            }
          }
          for (const instance of node.instances) {
            let link = { source: node.id, target: instance, label: "isA" };
            if (!hasNode(instance)) {
              console.log("Adding related term " + instance);
              KB.nodes.push(yield Node.fromKB(instance));
            }
            if (!hasLink(link)) {
              KB.links.push(link);
            }
          }
          for (const cls of node.superClasses) {
            let link = { source: cls, target: node.id, label: "isA" };
            if (!hasNode(cls)) {
              console.log("Adding related term " + cls);
              KB.nodes.push(yield Node.fromKB(cls));
            }
            if (!hasLink(link)) {
              KB.links.push(link);
            }
          }
          for (const cls of node.subClasses) {
            let link = { source: node.id, target: cls, label: "isA" };
            if (!hasNode(cls)) {
              console.log("Adding related term " + cls);
              KB.nodes.push(yield Node.fromKB(cls));
            }
            if (!hasLink(link)) {
              KB.links.push(link);
            }
          }
          for (const rel of node.rels) {
            let link = { source: rel[0], target: rel[2], label: rel[1] };
            if (rel[0] == rel[2]) {
              continue;
            }
            if (!hasNode(rel[0])) {
              console.log("Adding related term " + rel[0]);
              KB.nodes.push(yield Node.fromKB(rel[0]));
            }
            if (!hasNode(rel[2])) {
              console.log("Adding related term " + rel[2]);
              KB.nodes.push(yield Node.fromKB(rel[2]));
            }
            if (!hasLink(link)) {
              KB.links.push(link);
            }
          }
          release();
          return node;
        });
      }
      var SCALE_FACTOR_INSTANCES = 1.5;
      function makeChart(data, invalidation = null) {
        const width = 928;
        const height = 680;
        const activeConceptsSource = new EventSource("/active_concepts");
        activeConceptsSource.onmessage = (msg) => {
          updateTerm(msg.data).then((node2) => {
            console.log("Updated node " + node2.id);
            kb_graph.update(KB);
          });
        };
        const links = data.links.map((d) => Object.assign({}, d));
        const nodes = data.nodes;
        const node_radius = 25;
        const simulation = simulation_default(nodes).force("link", link_default(links).id((d) => d.id).distance((d) => 50)).force("charge", manyBody_default().strength(-1e3)).force("collide", collide_default(nodes).radius((n) => node_radius * 2)).force("x", x_default2()).force("y", y_default2());
        const svg = create_default("svg").attr("width", "100vw").attr("height", "100vh").attr("viewBox", [-width / 2, -height / 2, width, height]).attr("style", "max-width: 100vw; height: 100vh;");
        const defs = svg.append("defs");
        defs.append("marker").attr("id", "arrowhead").attr("markerWidth", 15).attr("markerHeight", 15).attr("refX", 0).attr("refY", 7.5).attr("orient", "auto").attr("stroke", 0).attr("fill", "context-stroke").attr("markerUnits", "userSpaceOnUse").append("polygon").attr("points", "0 0, 15 7.5, 0 15");
        let link = svg.append("g").attr("stroke", "#999").attr("stroke-opacity", 0.6).selectAll("g").data(links, (d) => d).join((enter) => linkBuilder(enter));
        let node = svg.append("g").selectAll("g").data(nodes, (d) => d).join((enter) => nodeBuilder(enter));
        updateTerm(nodes[0].id).then((node2) => {
          node2.selected = true;
          node2.updateDepths();
          kb_graph.update(KB);
        });
        simulation.on("tick", () => {
          link.attr("opacity", (d) => {
            let depth = Math.max(d.target.depth, d.source.depth);
            return depth < 2 ? 1 : 1 / depth;
          }).selectChild("path").attr("d", (d) => `M ${d.source.x} ${d.source.y} L  ${(d.source.x + d.target.x) / 2} ${(d.source.y + d.target.y) / 2}  L ${d.target.x} ${d.target.y}`);
          node.attr("transform", (d) => `translate(${d.x - node_radius} ${d.y - node_radius})`).attr("opacity", (d) => d.depth < 2 ? 1 : 1 / d.depth).selectChild("rect").attr("fill", (d) => d.selected || d.hovered ? "#ffb280ff" : d.type == "class" ? "#fae4d1ff" : "#fff");
        });
        function linkBuilder(enter) {
          let g = enter.append("g").attr("class", "edge-group");
          g.append("path").attr("id", (d) => `edge-${d.source.id}-${d.target.id}`).attr("marker-mid", (d) => {
            switch (d.label) {
              case "isA": {
                return "url(#arrowhead)";
              }
              default: {
                return "none";
              }
            }
          }).attr("stroke-width", (d) => d.dist ? 5 * 1 / d.dist : 2);
          g.filter((d) => d.label !== "isA").append("text").attr("text-anchor", "middle").attr("class", "edge-label").append("textPath").attr("href", (d) => `#edge-${d.source.id}-${d.target.id}`).attr("startOffset", "50%").text((d) => {
            switch (d.label) {
              case "owl:equivalentClass":
              case "owl:sameAs": {
                return "=";
              }
              default: {
                return d.label;
              }
            }
          });
          return g;
        }
        function nodeBuilder(enter) {
          let g = enter.append("g").attr("class", "node-group");
          g.append("rect").attr("height", (d) => d.type == "class" ? node_radius * 2 : node_radius * SCALE_FACTOR_INSTANCES).attr("width", (d) => d.type == "class" ? node_radius * 2 : node_radius * SCALE_FACTOR_INSTANCES).attr("x", (d) => d.type == "class" ? 0 : node_radius * (1 - SCALE_FACTOR_INSTANCES / 2)).attr("y", (d) => d.type == "class" ? 0 : node_radius * (1 - SCALE_FACTOR_INSTANCES / 2)).attr("rx", 5).attr("stroke-width", "0px").attr("stroke", "#ffb38096");
          g.append("image").attr("preserveAspectRatio", "xMidYMid").attr("width", (d) => d.type == "class" ? node_radius * 2 : node_radius * SCALE_FACTOR_INSTANCES).attr("x", (d) => d.type == "class" ? 0 : node_radius * (1 - SCALE_FACTOR_INSTANCES / 2)).attr("y", (d) => d.type == "class" ? 0 : node_radius * (1 - SCALE_FACTOR_INSTANCES / 2)).attr("href", (d) => `static/icons/${icon(d)}.svg`).attr("alt", (d) => d.id).on("click touchstart", (evt, d) => {
            if (!d.selected) {
              updateTerm(d.id).then((node2) => {
                node2.selected = true;
                node2.fx = d.x;
                node2.fy = d.y;
                node2.updateDepths();
                kb_graph.update(KB);
              });
            }
          }).on("mouseover", (evt, d) => {
            d.hovered = true;
          }).on("mouseout", (evt, d) => {
            d.hovered = false;
          });
          g.append("text").attr("text-anchor", "middle").attr("y", node_radius * 2 + 12).attr("x", node_radius).attr("class", (d) => d.type == "class" ? "node-label class-label" : "node-label").text((d) => d.label);
          g.append("title").text((d) => d.id);
          g.call(drag_default().on("start", dragstarted).on("drag", dragged).on("end", dragended));
          return g;
        }
        function icon(d) {
          if (d.type == "class") {
            if (d.id in ICON_MAP) {
              return ICON_MAP[d.id];
            } else {
              return "GenericClass";
            }
          } else if (d.type == "instance") {
            if (d.classes.length > 0 && d.classes[0] in ICON_MAP) {
              return ICON_MAP[d.classes[0]];
            } else {
              return "GenericInstance";
            }
          } else
            return ICON_MAP["undecided"];
        }
        function dragstarted(event) {
          if (!event.active)
            simulation.alphaTarget(0.3).restart();
          if (!event.subject.selected) {
            updateTerm(event.subject.id).then((node2) => {
              node2.selected = true;
              node2.fx = event.subject.x;
              node2.fy = event.subject.y;
              node2.updateDepths();
              kb_graph.update(KB);
            });
          } else {
            event.subject.fx = event.subject.x;
            event.subject.fy = event.subject.y;
          }
        }
        function dragged(event) {
          event.subject.fx = event.x;
          event.subject.fy = event.y;
        }
        function dragended(event) {
          if (!event.active)
            simulation.alphaTarget(0);
        }
        if (invalidation) {
          invalidation.then(() => simulation.stop());
        }
        return Object.assign(svg.node(), {
          update(kb) {
            const old = new Map(node.data().map((d) => [d.id, d]));
            let nodes2 = kb.nodes.map((d) => Object.assign(old.get(d.id) || new Node("", "class"), d)).filter((d) => d.depth < 4);
            let links2 = kb.links.map((d) => Object.assign({}, d)).filter((l) => {
              let keys = nodes2.map((d) => d.id);
              return keys.includes(l.source) && keys.includes(l.target);
            });
            simulation.nodes(nodes2);
            simulation.force("link").links(links2);
            simulation.alpha(0.5).restart();
            node = node.data(nodes2, (d) => d.id).join((enter) => nodeBuilder(enter));
            link = link.data(links2, (d) => `edge-${d.source.id}-${d.target.id}`).join((enter) => linkBuilder(enter));
          }
        });
      }
      var kb_graph = makeChart(KB);
      document.getElementById("chart").appendChild(kb_graph);
    }
  });
  require_kb_explorer();
})();
/*! Bundled license information:

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

eventemitter2/lib/eventemitter2.js:
  (*!
   * EventEmitter2
   * https://github.com/hij1nx/EventEmitter2
   *
   * Copyright (c) 2013 hij1nx
   * Licensed under the MIT license.
   *)
*/
//# sourceMappingURL=kb_explorer.min.js.map
